;1	08.12.2016 13:38:32	jlawrie2	
X0 22c17fc 0 22c2e60 0 0 0 0

X1 22c2e60 22c17fc 0 22c2f18 0 0 2
SharedVector WLProj GuarCV(yearIndex; vectorWLProj)
SharedVector WLProj GuarCV(8; v_(0;0;0;V_(1;2;3;4;5;6;7;8);0;0))
8
X1 22c2f18 22c17fc 0 22c3030 0 0 2
SharedVector SolveParms FaceAmount(vectorSolveParms; yearIndex)
SharedVector SolveParms FaceAmount(0;"(()!()!(100!100))";2)
0
X1 22c3030 22c17fc 0 22c3190 0 0 2
SharedVector SolveParms Premium(vectorSolveParms; yearIndex)
SharedVector SolveParms Premium("((100!100!100)!0)"; 2)
0
X1 22c3190 22c17fc 0 22c32b8 0 0 2
SharedVector ModePremium ForcedPaymentMode(vectorModePrem)
SharedVector ModePremium ForcedPaymentMode("(1!0!0!0!0!C!0!1212006!P!R!0!CL!0!1!C)")
0
X1 22c32b8 22c17fc 0 0 0 0 2
SharedVector ModePremium PaymentMode(vectorModePrem)
SharedVector ModePremium PaymentMode("(1!0!0!0!0!C!0!1212006!P!R!0!CL!0!1!C)")
0
O0 22c16ac 0 0 0 0 0 0

E0 22c171c 0 0 0 0 0 0

L0 22c178c 0 0 0 0 0 0

B0 22c194c 0 0 0 0 0 0

P3 22c186c 0 22c3500 0 0 0 2

--description
Common sub-model containing common vector functions used throughout the models.çä çäCash value projection and actuarial vector informational functions are examples of those contained here.çä çäRELEASE LOG:çäRELEASE 1501 - PAC031 MEC AvoidanceçäRELEASE 1301 - SCARAB/JIRA issues PAD1091, PAD1213çäRELEASE wmA 1001 - ENH922çäRELEASE 1101 - PAC013 calcType
LICENSENAME
"CSC US internal use only - Workbench"
COMPILERVERSION
"4.6.1    "
P13 22c3500 22c186c 0 0 0 0 2
Shared Vectors
IncType
mandatory
IncRule

IncValue

OUTPUT Comment
"Model:   Vector definition and vector access for vectors that are used across multiple models.çä Author:  John Heumannçä Date:     10/31/2007 çä Modification Log:çä Date              Modeler               Change Descriptionçä 10/31/2007     John Heumann    Created model.çä"
OUTPUT Runtime Version
"1.0.0"
OUTPUT Runtime Date
"04/22/2016"
OUTPUT Source Version Computer
"VPMS_Server"
OUTPUT Source Version File
"SharedVectors.PMS"
OUTPUT Source Version Number
'GEN VersionInfo'
OUTPUT Source Version Date
"04/22/2016"
OUTPUT Source Version Author
"CSC"
OUTPUT Source Version Comment
"PA1603 Delivery"
OUTPUT Audit History Block
"04/22/2016 PA1601 Delivery"
F0 22c18dc 0 22c3900 0 0 0 0

F1 22c3900 22c18dc 22c3f88 2397868 0 0 2
:SharedVector
Funktion

F1 22c3f88 22c3900 22c3ea8 22c5258 0 0 2
:CVPROJAddlInfo
Funktion

F1 22c3ea8 22c3f88 22c40e8 0 0 0 2
-- Cash Value Projections Additional Info Vector Functions --
Funktion

F1 22c40e8 22c3ea8 0 22c4218 0 0 2
SharedVector CVPROJAddlInfo Passed(vectorAddlInfo)
Funktion
IF ( /*Has additional info been passed in the vector?*/ vectorAddlInfo ALIKE 'GEN Vector Blank' ; çä   /*No*/ 0 ; çä   /*Yes*/ 1çä)
F1 22c4218 22c3ea8 0 22c4318 0 0 2
SharedVector CVPROJAddlInfo CheckForLapse(vectorAddlInfo)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorAddlInfo) > 0 ; çä   /*Yes*/ E_(vectorAddlInfo;0) ; çä   /*No*/ 0çä)
F1 22c4318 22c3ea8 0 22c44a0 0 0 2
SharedVector CVPROJAddlInfo InitialLumpSum(vectorAddlInfo)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorAddlInfo) > 1 ; çä   /*Yes*/ E_(vectorAddlInfo;1) ; çä   /*No*/ 0çä)
F1 22c44a0 22c3ea8 0 22c4628 0 0 2
SharedVector CVPROJAddlInfo AdjustForGuidelines(vectorAddlInfo)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorAddlInfo) > 2 ; çä   /*Yes*/ E_(vectorAddlInfo;2) ; çä   /*No*/ 0çä)
F1 22c4628 22c3ea8 0 22c46e0 0 0 2
SharedVector CVPROJAddlInfo GuidelineLimit(vectorAddlInfo; yearIndex)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorAddlInfo) > 3 && V_LENGTH(E_(vectorAddlInfo;3)) > 1 ; çä   // this vector element holds two bits - GSP and GLP.çäMAX(E_(E_(vectorAddlInfo;3);1);E_(E_(vectorAddlInfo;3);0) * yearIndex) ; çä   //e_(e_(vectorAddlInfo; 3); yearIndex - 1);çä//e_(e_(vectorAddlInfo; 3);yearIndex-1);çä/*No*/0çä)
F1 22c46e0 22c3ea8 0 22c4868 0 0 2
SharedVector CVPROJAddlInfo VaryingPremiums(vectorAddlInfo)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorAddlInfo) > 4 ; çä   /*Yes*/ E_(vectorAddlInfo;4) ; çä   /*No*/ 0çä)
F1 22c4868 22c3ea8 0 22c4ac8 0 0 2
SharedVector CVPROJAddlInfo PeriodicPremium(vectorAddlInfo; yearIndex)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorAddlInfo) > 5 ; çä   /*Yes*/ E_(E_(vectorAddlInfo;5);yearIndex - 1) ; çä   /*No*/ 0çä)
F1 22c4ac8 22c3ea8 0 22c4c50 0 0 2
SharedVector CVPROJAddlInfo LoadTargetPremium(vectorAddlInfo)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorAddlInfo) > 6 ; çä   /*Yes*/ E_(vectorAddlInfo;6) ; çä   /*No*/ 0çä)
F1 22c4c50 22c3ea8 7468324c 22c4ea0 0 0 2
SharedVector CVPROJAddlInfo StartYear(vectorAddlInfo)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorAddlInfo) > 7 ; çä   /*Yes*/ E_(vectorAddlInfo;7) ; çä   /*no*/ 1çä)
F1 7468324c 22c4c50 0 0 0 0 2
SharedVectorCVPROJAddlInfo Year Equals StartYear(vectorAddlInfo; yearIndex)
Funktion
yearIndex = 'SharedVector CVPROJAddlInfo StartYear'(vectorAddlInfo)
F1 22c4ea0 22c3ea8 2f9a69ce a8a3fb1 0 0 2
SharedVector CVPROJAddlInfo StartMonth(vectorAddlInfo)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorAddlInfo) > 8 ; çä   /*Yes*/ E_(vectorAddlInfo;8) ; çä   /*No - default start month is 1*/ 1çä)
F1 2f9a69ce 22c4ea0 0 0 0 0 2
SharedVectorCVPROJAddlInfo Month Equals StartMonth(vectorAddlInfo; monthIndex)
Funktion
monthIndex = 'SharedVector CVPROJAddlInfo StartMonth'(vectorAddlInfo)
F1 a8a3fb1 22c3ea8 0 22c5070 0 0 2
SharedVectorCVPROJAddlInfo Year and Month Equal Start Year and Month(vectorAddlInfo; yearIndex; monthIndex)
Funktion
'SharedVectorCVPROJAddlInfo Year Equals StartYear'(vectorAddlInfo;yearIndex) && 'SharedVectorCVPROJAddlInfo Month Equals StartMonth'(vectorAddlInfo;monthIndex)
F1 22c5070 22c3ea8 22c5150 0 0 0 2
-- Derived Vector Functions --
Funktion

F1 22c5150 22c5070 4359578b ba37416 0 0 2
SharedVector CVPROJAddlInfo IsInforceCalc(calcType; vectorAddlInfo)
Funktion
 //Is inforce calculation?çä'SharedVectorCVPROJAddlInfo Start Year and Month Not 1'(vectorAddlInfo) && IF ('CalcType Length Greater Than or Equal to Target Position'(calcType) ; çä  'CalcType Not 7702 or Target'(calcType) ; çä  0çä)
F1 4359578b 22c5150 0 0 0 0 2
SharedVectorCVPROJAddlInfo Start Year and Month Not 1(vectorAddlInfo)
Funktion
('SharedVector CVPROJAddlInfo StartYear'(vectorAddlInfo) <> 1 || 'SharedVector CVPROJAddlInfo StartMonth'(vectorAddlInfo) <> 1)
F1 ba37416 22c5070 0 0 0 0 2
SharedVectorCVPROJAddlInfo First Month of InForce Projection(vectorAddlInfo; yearIndex; monthIndex)
Funktion
'SharedVectorCVPROJAddlInfo Year Equals StartYear'(vectorAddlInfo;yearIndex) && monthIndex = 'SharedVector CVPROJAddlInfo StartMonth'(vectorAddlInfo)
F1 22c5258 22c3900 22c5418 2393068 0 0 2
:ACTInfo
Funktion

F1 22c5418 22c5258 22c55c8 0 0 0 2
-- Actuarial Info Vector Functions --
Funktion
çä
F1 22c55c8 22c5418 0 22c5718 0 0 2
SharedVector ACTInfo IssueAge(vectorActInfo)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorActInfo) > 0 ; çä   /*Yes*/ E_(vectorActInfo;0) ; çä   /*No*/ 0çä)
F1 22c5718 22c5418 0 22c59a0 0 0 2
SharedVector ACTInfo MaturityDuration(vectorActInfo)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorActInfo) > 1 ; çä   /*Yes*/ E_(vectorActInfo;1) ; çä   /*No*/ 0çä)
F1 22c59a0 22c5418 0 22c5b20 0 0 2
SharedVector ACTInfo InterestRate(vectorActInfo)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorActInfo) > 2 ; çä   /*Yes*/ E_(vectorActInfo;2) ; çä   /*No*/ 0çä)
F1 22c5b20 22c5418 0 22c5db8 0 0 2
SharedVector ACTInfo MortalityTable(vectorActInfo)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorActInfo) > 3 ; çä   /*Yes*/ E_(vectorActInfo;3) ; çä   /*No*/ 0çä)
F1 22c5db8 22c5418 0 2392090 0 0 2
SharedVector ACTInfo Gender(vectorActInfo)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorActInfo) > 4 ; çä   /*Yes*/ E_(vectorActInfo;4) ; çä   /*No*/ 0çä)
F1 2392090 22c5418 0 23921d0 0 0 2
SharedVector ACTInfo UnderwritingClass(vectorActInfo)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorActInfo) > 5 ; çä   /*Yes*/ E_(vectorActInfo;5) ; çä   /*No*/ 0çä)
F1 23921d0 22c5418 0 2392350 0 0 2
SharedVector ACTInfo TobaccoBasis(vectorActInfo)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorActInfo) > 6 ; çä   /*Yes*/ E_(vectorActInfo;6) ; çä   /*No*/ 0çä)
F1 2392350 22c5418 0 23924c8 0 0 2
SharedVector ACTInfo ProductCode(vectorActInfo)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorActInfo) > 7 ; çä   /*Yes*/ E_(vectorActInfo;7) ; çä   /*No*/ 0çä)
F1 23924c8 22c5418 0 2392790 0 0 2
SharedVector ACTInfo ProductEffectiveDate(vectorActInfo)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorActInfo) > 8 ; çä   /*Yes*/ E_(vectorActInfo;8) ; çä   /*No*/ 0çä)
F1 2392790 22c5418 0 2392910 0 0 2
SharedVector ACTInfo Jurisdiction(vectorActInfo)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorActInfo) > 9 ; çä   /*Yes*/ E_(vectorActInfo;9) ; çä   /*No*/ 0çä)
F1 2392910 22c5418 0 2392a90 0 0 2
SharedVector ACTInfo AgeCalculationType(vectorActInfo)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorActInfo) > 10 ; çä   /*Yes*/ E_(vectorActInfo;10) ; çä   /*No*/ 0çä)
F1 2392a90 22c5418 0 2392d68 0 0 2
SharedVector ACTInfo IncludeTableRatings(vectorActInfo)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorActInfo) > 11 ; çä   /*Yes*/ E_(vectorActInfo;11) ; çä   /*No*/ 0çä)
F1 2392d68 22c5418 0 2392ee8 0 0 2
SharedVector ACTInfo IncludeFlatExtras(vectorActInfo)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorActInfo) > 12 ; çä   /*Yes*/ E_(vectorActInfo;12) ; çä   /*No*/ 0çä)
F1 2392ee8 22c5418 0 0 0 0 2
SharedVector ACTInfo PayToDuration(vectorActInfo)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorActInfo) > 13 ; çä   /*Yes*/ E_(vectorActInfo;13) ; çä   /*No*/ 0çä)
F1 2393068 22c3900 2393130 2393ad0 0 0 2
:WLProj
Funktion

F1 2393130 2393068 2393228 0 0 0 2
-- Whole Life Projection calcs Vector Functions --
Funktion

F1 2393228 2393130 0 2393518 0 0 2
SharedVector WLProj PremPUAUnits(vectorWLProj; coverageIndex)
Funktion
IF (V_LENGTH(E_(vectorWLProj;0)) > coverageIndex ; çä  E_(E_(vectorWLProj;0);coverageIndex) ; çä  0çä)
F1 2393518 2393130 0 2393618 0 0 2
SharedVector WLProj DivPUAUnits(vectorWLProj; coverageIndex)
Funktion
IF (V_LENGTH(E_(vectorWLProj;1)) > coverageIndex ; çä  E_(E_(vectorWLProj;1);coverageIndex) ; çä  0çä)
F1 2393618 2393130 6b0cdda 2393718 0 0 2
SharedVector WLProj LoanBalance(yearIndex; vectorWLProj)
Funktion
IF (V_LENGTH(E_(vectorWLProj;2)) >= yearIndex ; çä  E_(E_(vectorWLProj;2);yearIndex - 1) ; çä  E_(E_(vectorWLProj;2);0)çä)
F1 6b0cdda 2393618 0 0 0 0 2
SharedVector WLProj LoanInfoPassed(vectorWLProj)
Funktion
V_LENGTH(E_(vectorWLProj;2)) > 0
F1 2393718 2393130 0 23938a0 0 0 2
SharedVector WLProj GuarCV(yearIndex; vectorWLProj)
Funktion
IF (V_LENGTH(E_(vectorWLProj;3)) >= yearIndex ; çä  E_(E_(vectorWLProj;3);yearIndex - 1) ; çä  E_(E_(vectorWLProj;3);0)çä)
F1 23938a0 2393130 0 23939b8 0 0 2
SharedVector WLProj LoanIntRate(vectorWLProj)
Funktion
E_(vectorWLProj;4)
F1 23939b8 2393130 0 0 0 0 2
SharedVector WLProj BaseUnits(vectorWLProj)
Funktion
E_(vectorWLProj;5)
F1 2393ad0 22c3900 2393d50 2395688 0 0 2
:SolveParms
Funktion

F1 2393d50 2393ad0 2393e38 0 0 0 2
-- Solve calcs Vector Functions --
Funktion
/* vectorSolveParms has the following elements : çä çä0 - vector of Premium stream from 1 to premium durationçä1 - Vector of Withdrawal stream from 1 to last withdrawalçä2 - Vector of face amount stream (if level, only first element is populated)çä3 - vector of loan stream from 1 to last loançä4 - Death Benefit Optionçä5 - Start yearçä çä*/çä
F1 2393e38 2393d50 2393f38 2394310 0 0 2
SharedVector SolveParms Premium(vectorSolveParms; yearIndex)
Funktion
IF (V_LENGTH(vectorSolveParms) > 0 ; çä   //Is any info passed in the vector at all?çäIF ((E_(E_(vectorSolveParms;0);0) + V_LENGTH(E_(vectorSolveParms;0)) - 2) >= yearIndex && yearIndex > 0 ; çä     /*Is premium info for yearIndex passed?*/// check if yearIndex > initial level premium durationçä IF (yearIndex <= E_(E_(vectorSolveParms;0);0) ; çä      E_(E_(vectorSolveParms;0);1) ; çä      E_(E_(vectorSolveParms;0);yearIndex - E_(E_(vectorSolveParms;0);0) + 1)çä    ) ; çä  0çä) ; çä0çä)
F1 2393f38 2393e38 0 23940d0 0 0 2
SharedVector SolveParms MakePremium(periodicPremium; premiumDuration)
Funktion
IF (V_LENGTH(periodicPremium) > 0 ; çä  V_(V_CONCAT(V_(1);periodicPremium)) ; çä  V_(V_(premiumDuration;periodicPremium))çä)
F1 23940d0 2393e38 0 2394188 0 0 2
SharedVector SolveParms ReplacePremium(periodicPremium; premiumDuration; vectorSolveParms)
Funktion
V_REPLACE(vectorSolveParms;V_(premiumDuration;periodicPremium);0) //VECTORX(yrIndex; 0; premiumDuration-1; periodicPremium); 0)çä
F1 2394188 2393e38 0 3215b02d 0 0 2
SharedVector SolveParms PremiumDuration(vectorSolveParms)
Funktion
E_(E_(vectorSolveParms;0);0) + V_LENGTH(E_(vectorSolveParms;0)) - 2
F1 3215b02d 2393e38 0 0 0 0 2
SharedVector SolveParms Premium passed(vectorSolveParms)
Funktion
IF (V_LENGTH(vectorSolveParms) > 0 ; çä  E_(vectorSolveParms;0) NOTEQUAL 'GEN Vector Blank' && E_(E_(vectorSolveParms;0);1) NOTEQUAL 'GEN Vector Blank' ; çä  0çä)
F1 2394310 2393d50 2394410 2394568 0 0 2
SharedVector SolveParms Withdrawal(vectorSolveParms; yearIndex)
Funktion
IF (V_LENGTH(vectorSolveParms) > 1 ; çä   /*Is withdrawal info passed at all?*/ IF ( /*Is withdrawal info for yearIndex passed?*/ V_LENGTH(E_(vectorSolveParms;1)) >= yearIndex && yearIndex > 0 ; çä    E_(E_(vectorSolveParms;1);yearIndex - 1) ; çä    0çä  ) ; çä0çä)
F1 2394410 2394310 0 767c7f38 0 0 2
SharedVector SolveParms MakeWithdrawal(withdrawalAmount; withdrawalDuration)
Funktion
V_('GEN Vector Blank';V_(VECTORX(yrIndex;0;withdrawalDuration - 1;withdrawalAmount));'GEN Vector Blank';'GEN Vector Blank')
F1 767c7f38 2394310 0 0 0 0 2
SharedVector SolveParms Withdrawal passed(vectorSolveParms)
Funktion
IF (V_LENGTH(vectorSolveParms) > 1 ; çä  V_LENGTH(E_(vectorSolveParms;1)) > 0 && E_(E_(vectorSolveParms;1);0) NOTEQUAL 'GEN Vector Blank' ; çä  0çä)
F1 2394568 2393d50 2394668 2394c70 0 0 2
SharedVector SolveParms FaceAmount(coverageIndex; vectorSolveParms; yearIndex)
Funktion
IF (V_LENGTH(vectorSolveParms) > 2 /*Is face amount info passed?*/  && V_LENGTH(E_(vectorSolveParms;2)) > coverageIndex ; çä  IF ( /*Is Face amount info for yearIndex passed?*/ V_LENGTH(E_(E_(vectorSolveParms;2);coverageIndex)) >= yearIndex && yearIndex > 0 ; çä    E_(E_(E_(vectorSolveParms;2);coverageIndex);yearIndex - 1) ; çä     //No - use previous valueçä'SharedVector SolveParms FaceAmount'(coverageIndex;vectorSolveParms;yearIndex - 1)çä  ) ; çä0çä)
F1 2394668 2394568 0 23949f8 0 0 2
SharedVector SolveParms FaceAmount Passed(coverageIndex; vectorSolveParms)
Funktion
IF (V_LENGTH(vectorSolveParms) > 2 && V_LENGTH(E_(vectorSolveParms;2)) > coverageIndex ; çä  V_LENGTH(E_(E_(vectorSolveParms;2);coverageIndex)) > 0 && E_(E_(E_(vectorSolveParms;2);coverageIndex);0) NOTEQUAL 'GEN Vector Blank' ; çä  0çä)
F1 23949f8 2394568 0 2394b68 0 0 2
SharedVector SolveParms MakeFaceAmount(calcType; faceAmount)
Funktion
V_('GEN Vector Blank';'GEN Vector Blank';IF ('Policy Number of Coverage'(calcType;1) > 1 ; çä  V_CONCAT(V_(V_(FaceAmount));VECTORX(cov;1;'Policy Number of Coverage'(calcType;1) - 1;V_('Policy Coverage CurrentAmt'(calcType;#cov;1)))) ; çä  V_(V_(FaceAmount))çä);'GEN Vector Blank';'GEN Vector Blank';'GEN Vector Blank';'Policy Number of Coverage'(calcType;1))
F1 2394b68 2394568 0 0 0 0 2
SharedVector SolveParms ReplaceFaceAmount(calcType; faceAmount; vectorSolveParms)
Funktion
IF (V_LENGTH(vectorSolveParms) = 1 ; çä   /*only premium info in vector*/ V_CONCAT(vectorSolveParms;V_('GEN Vector Blank';IF ('Policy Number of Coverage'(calcType;1) > 1 ; çä    V_CONCAT(V_(V_(FaceAmount));VECTORX(cov;1;'Policy Number of Coverage'(calcType;1) - 1;V_('Policy Coverage CurrentAmt'(calcType;#cov;1)))) ; çä    V_(V_(FaceAmount))çä  ))) ; çäIF (V_LENGTH(vectorSolveParms) >= 3 ; çä   /*is face amount info already in vector?*/ V_REPLACE(vectorSolveParms;IF ('Policy Number of Coverage'(calcType;1) > 1 ; çä    V_CONCAT(V_(V_(FaceAmount));VECTORX(cov;1;'Policy Number of Coverage'(calcType;1) - 1;V_('Policy Coverage CurrentAmt'(calcType;#cov;1)))) ; çä    V_(V_(FaceAmount))çä  );2) ; çäV_CONCAT(vectorSolveParms;V_(IF ('Policy Number of Coverage'(calcType;1) > 1 ; çä  V_CONCAT(V_(V_(FaceAmount));VECTORX(cov;1;'Policy Number of Coverage'(calcType;1) - 1;V_('Policy Coverage CurrentAmt'(calcType;#cov;1)))) ; çä  V_(V_(FaceAmount))çä)))çä)çä)
F1 2394c70 2393d50 0 2394d70 0 0 2
SharedVector SolveParms Loan(vectorSolveParms; yearIndex)
Funktion
IF (V_LENGTH(vectorSolveParms) > 3 ; çä   /*Is loan info passed?*/ IF ( /*Is premium info for yearIndex passed?*/ V_LENGTH(E_(vectorSolveParms;3)) >= yearIndex && yearIndex > 0 ; çä    E_(E_(vectorSolveParms;3);yearIndex - 1) ; çä    0çä  ) ; çä0çä)
F1 2394d70 2393d50 2394e70 23952a0 0 0 2
SharedVector SolveParms DthBenOpt(vectorSolveParms; yearIndex)
Funktion
IF (V_LENGTH(vectorSolveParms) > 4 ; çä   /*Is face amount info passed?*/ IF ( /*Is Face amount info for yearIndex passed?*/ V_LENGTH(E_(vectorSolveParms;4)) >= yearIndex && yearIndex > 0 ; çä    E_(E_(vectorSolveParms;4);yearIndex - 1) ; çä     // No - use previous valueçä'SharedVector SolveParms DthBenOpt'(vectorSolveParms;yearIndex - 1)çä  ) ; çä0çä)
F1 2394e70 2394d70 0 2395008 0 0 2
SharedVector SolveParms DthBenOpt passed(vectorSolveParms)
Funktion
IF (V_LENGTH(vectorSolveParms) > 4 ; çä  V_LENGTH(E_(vectorSolveParms;4)) > 0 && E_(E_(vectorSolveParms;4);0) NOTEQUAL 'GEN Vector Blank' ; çä  0çä)
F1 2395008 2394d70 0 2395190 0 0 2
SharedVector SolveParms MakeDthBenOpt(deathBenefitOption)
Funktion
V_('GEN Vector Blank';'GEN Vector Blank';'GEN Vector Blank';'GEN Vector Blank';V_(deathBenefitOption))
F1 2395190 2394d70 0 0 0 0 2
SharedVector SolveParms ReplaceDthBenOpt(deathBenefitOption; vectorSolveParms)
Funktion
IF (V_LENGTH(vectorSolveParms) = 1 ; çä   /*only premium info in vector*/ V_CONCAT(vectorSolveParms;V_('GEN Vector Blank';'GEN Vector Blank';'GEN Vector Blank';V_(deathBenefitOption))) ; çä  IF (V_LENGTH(vectorSolveParms) = 2 ; çä     /*is DB Option info already in vector?*/ V_CONCAT(vectorSolveParms;V_('GEN Vector Blank';'GEN Vector Blank';V_(deathBenefitOption))) ; çä    IF (V_LENGTH(vectorSolveParms) = 3 ; çä       /*is DB Option info already in vector?*/ V_CONCAT(vectorSolveParms;V_('GEN Vector Blank';V_(deathBenefitOption))) ; çä      IF (V_LENGTH(vectorSolveParms) = 4 ; çä         /*is DB Option info already in vector?*/ V_CONCAT(vectorSolveParms;V_(V_(deathBenefitOption))) ; çä        V_REPLACE(vectorSolveParms;V_(V_(deathBenefitOption));4)çä      )çä  )çä)çä)
F1 23952a0 2393d50 2395398 23954c0 0 0 2
SharedVector SolveParms StartYear(vectorSolveParms)
Funktion
IF (V_LENGTH(vectorSolveParms) > 5 /*Is loan info passed?*/  && E_(vectorSolveParms;5) NOTALIKE 'GEN Vector Blank' ; çä  E_(vectorSolveParms;5) ; çä  1çä)
F1 2395398 23952a0 0 44ff4664 0 0 2
SharedVector SolveParms MakeStartYear(startYear)
Funktion
V_('GEN Vector Blank';'GEN Vector Blank';'GEN Vector Blank';'GEN Vector Blank';'GEN Vector Blank';startYear)
F1 44ff4664 23952a0 0 0 0 0 2
SharedVector SolveParms ReplaceStartYear(startYear; vectorSolveParms)
Funktion
IF (V_LENGTH(vectorSolveParms) = 1 ; çä   /*only premium info in vector*/ V_CONCAT(vectorSolveParms;V_('GEN Vector Blank';'GEN Vector Blank';'GEN Vector Blank';'GEN Vector Blank';startYear)) ; çä   //No - more than thatçäIF (V_LENGTH(vectorSolveParms) = 2 ; çä     /*is DB Option info already in vector?*/ V_CONCAT(vectorSolveParms;V_('GEN Vector Blank';'GEN Vector Blank';'GEN Vector Blank';startYear)) ; çä    IF (V_LENGTH(vectorSolveParms) = 3 ; çä       /*is DB Option info already in vector?*/ V_CONCAT(vectorSolveParms;V_('GEN Vector Blank';'GEN Vector Blank';startYear)) ; çä      IF (V_LENGTH(vectorSolveParms) = 4 ; çä         /*is DB Option info already in vector?*/ V_CONCAT(vectorSolveParms;V_('GEN Vector Blank';startYear)) ; çä        IF (V_LENGTH(vectorSolveParms) = 5 ; çä           /*is DB Option info already in vector?*/ V_CONCAT(vectorSolveParms;V_(startYear)) ; çä          V_REPLACE(vectorSolveParms;startYear;5)çä        )çä    )çä)çä)çä)
F1 23954c0 2393d50 0 31fdd65a 0 0 2
SharedVector SolveParms MakeFaceAmtandDBOptandStartYear(calcType; faceAmount; deathBenefitOption; startYear)
Funktion
V_('GEN Vector Blank';'GEN Vector Blank';IF ('Policy Number of Coverage'(calcType;1) > 1 ; çä  V_CONCAT(V_(V_(FaceAmount));VECTORX(cov;1;'Policy Number of Coverage'(calcType;1) - 1;V_(IF ('Std Coverage Is InForce'(calcType;#cov;TransEffDate;TransEffDur) ; çä    'Policy Coverage CurrentAmt'(calcType;#cov;startYear) ; çä    0çä  )))) ; çäV_(V_(FaceAmount))çä);'GEN Vector Blank';V_(deathBenefitOption);startYear;'Policy Number of Coverage'(calcType;1) //Note only one amount is required for level face amounts currently assumed.çä)
F1 31fdd65a 2393d50 0 369b6535 0 0 2
SharedVector SolveParms Shorten for Charges(vectorSolveParms)
Funktion
IF (V_LENGTH(vectorSolveParms) > 0 ; çä  V_('GEN Vector Blank';'GEN Vector Blank';IF (V_LENGTH(vectorSolveParms) > 2 ; çä    E_(vectorSolveParms;2) ; çä    'GEN Vector Blank'çä  );'GEN Vector Blank';IF (V_LENGTH(vectorSolveParms) > 4 ; çä  E_(vectorSolveParms;4) ; çä  'GEN Vector Blank'çä);IF (V_LENGTH(vectorSolveParms) > 5 ; çäE_(vectorSolveParms;5) ; çä'GEN Vector Blank'çä);IF (V_LENGTH(vectorSolveParms) > 6 ; çäE_(vectorSolveParms;6) ; çä'GEN Vector Blank'çä)) ; çä'GEN Vector Blank'çä)
F1 369b6535 2393d50 0 3fd7f1ee 0 0 2
SharedVector SolveParms Number of Coverage(calcType; vectorSolveParms)
Funktion
IF ('SharedVector SolveParms Contains Number of Coverage'(vectorSolveParms) ; çä  E_(vectorSolveParms;6) ; çä  'Policy Number of Coverage'(calcType;1)çä)
F1 3fd7f1ee 2393d50 0 128821da 0 0 2
SharedVector SolveParms Contains Number of Coverage(vectorSolveParms)
Funktion
V_LENGTH(vectorSolveParms) > 6 && E_(vectorSolveParms;6) NOTEQUAL 'GEN Vector Blank'
F1 128821da 2393d50 0 5aad1286 0 0 2
SharedVector SolveParms Add Number of Coverage(numCov; vectorSolveParms)
Funktion
IF (numCov > 0 ; çä  IF (V_LENGTH(vectorSolveParms) > 6 ; çä    V_REPLACE(vectorSolveParms;numCov;6) ; çä    V_CONCAT(V_CONCAT(vectorSolveParms;VECTORX(count;1;6 - V_LENGTH(vectorSolveParms);'GEN Vector Blank'));V_(numCov))çä  ) ; çävectorSolveParmsçä)
F1 5aad1286 2393d50 0 711b274f 0 0 2
SharedVector SolveParms Replace FA DBOpt StartYr(calcType; faceAmount; deathBenefitOption; startYear; vectorSolveParms)
Funktion
'SharedVector SolveParms ReplaceFaceAmount'(calcType;faceAmount;'SharedVector SolveParms ReplaceDthBenOpt'(deathBenefitOption;'SharedVector SolveParms ReplaceStartYear'(startYear;vectorSolveParms)))
F1 711b274f 2393d50 0 0 0 0 2
SharedVector SolveParms MakePremandFaceAmtandDBOptandStartYear(calcType; periodicPremium, premiumDuration; faceAmount; deathBenefitOption; startYear)
Funktion
V_(IF (V_LENGTH(periodicPremium) > 0 ; çä  V_CONCAT(V_(1);periodicPremium) ; çä  V_(premiumDuration;periodicPremium)çä);'GEN Vector Blank';IF ('Policy Number of Coverage'(calcType;1) > 1 ; çäV_CONCAT(V_(V_(FaceAmount));VECTORX(cov;1;'Policy Number of Coverage'(calcType;1) - 1;V_(IF ('Std Coverage Is InForce'(calcType;#cov;TransEffDate;TransEffDur) ; çä  'Policy Coverage CurrentAmt'(calcType;#cov;1) ; çä  0çä)))) ; çäV_(V_(FaceAmount))çä);'GEN Vector Blank';V_(deathBenefitOption);startYear;'Policy Number of Coverage'(calcType;1) //Note only one amount is required for level face amounts currently assumed.çä)
F1 2395688 22c3900 2395758 2395970 0 0 2
:WdlGuess
Funktion

F1 2395758 2395688 2395848 0 0 0 2
-- Temporary Withdrawal Stream Vector --
Funktion

F1 2395848 2395758 0 0 0 0 2
SharedVector WdlGuess(vectorWdlGuess; yearIndex)
Funktion
E_(vectorWdlGuess;yearIndex - 1)
F1 2395970 22c3900 2395a38 2395c90 0 0 2
:Curr
Funktion

F1 2395a38 2395970 2395b28 0 0 0 2
-- Current Interest Rate Parms Vector --
Funktion

F1 2395b28 2395a38 0 0 0 0 2
SharedVector Curr Int Rate Parms(yearIndex)
Funktion
V_('INPUT Invest Rate Type';'INPUT Invest Rate Sub Type';'Policy CarrierCode')
F1 2395c90 22c3900 2395d60 2397430 0 0 2
:ModePremium
Funktion
çä
F1 2395d60 2395c90 0 2396078 0 0 2
SharedVector ModePremium PaymentMode(vectorModePrem)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorModePrem) > 0 ; çä   /*Yes*/ E_(vectorModePrem;0) ; çä   /*No*/ 0çä)
F1 2396078 2395c90 0 2395ef0 0 0 2
SharedVector ModePremium ForcedPaymentMode(vectorModePrem)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorModePrem) > 1 ; çä   /*Yes*/ E_(vectorModePrem;1) ; çä   /*No*/ 0çä)
F1 2395ef0 2395c90 0 2396200 0 0 2
SharedVector ModePremium PremiumCalcOption(vectorModePrem)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorModePrem) > 2 ; çä   /*Yes*/ E_(vectorModePrem;2) ; çä   /*No*/ 0çä)
F1 2396200 2395c90 0 2396390 0 0 2
SharedVector ModePremium CommissionPremiumCalcOption(vectorModePrem)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorModePrem) > 3 ; çä   /*Yes*/ E_(vectorModePrem;3) ; çä   /*No*/ 0çä)
F1 2396390 2395c90 0 2396518 0 0 2
SharedVector ModePremium Specified Phase(vectorModePrem)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorModePrem) > 4 ; çä   /*Yes*/ E_(vectorModePrem;4) ; çä   /*No*/ 0çä)
F1 2396518 2395c90 0 23966a0 0 0 2
SharedVector ModePremium SpecifiedElement(vectorModePrem)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorModePrem) > 5 ; çä   /*Yes*/ E_(vectorModePrem;5) ; çä   /*No*/ 0çä)
F1 23966a0 2395c90 0 2396828 0 0 2
SharedVector ModePremium  SpecifiedElementIndex(vectorModePrem)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorModePrem) > 6 ; çä   /*Yes*/ E_(vectorModePrem;6) ; çä   /*No*/ 0çä)
F1 2396828 2395c90 0 23969a8 0 0 2
SharedVector ModePremium TransEffDate(vectorModePrem)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorModePrem) > 7 ; çä   /*Yes*/ E_(vectorModePrem;7) ; çä   /*No*/ 0çä)
F1 23969a8 2395c90 0 2396b28 0 0 2
SharedVector ModePremium PremiumType(vectorModePrem)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorModePrem) > 8 ; çä   /*Yes*/ E_(vectorModePrem;8) ; çä   /*No*/ 0çä)
F1 2396b28 2395c90 0 2396ca8 0 0 2
SharedVector ModePremium PremiumSubType(vectorModePrem)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorModePrem) > 9 ; çä   /*Yes*/ E_(vectorModePrem;9) ; çä   /*No*/ 0çä)
F1 2396ca8 2395c90 0 2396e30 0 0 2
SharedVector ModePremium RateInfoPassedInd(vectorModePrem)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorModePrem) > 10 ; çä   /*Yes*/ E_(vectorModePrem;10) ; çä   /*No*/ 0çä)
F1 2396e30 2395c90 0 2396fb0 0 0 2
SharedVector ModePremium CallingSystem(vectorModePrem)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorModePrem) > 11 ; çä   /*Yes*/ E_(vectorModePrem;11) ; çä   /*No*/ 0çä)
F1 2396fb0 2395c90 0 2397130 0 0 2
SharedVector ModePremium PaymentForm(vectorModePrem)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorModePrem) > 12 ; çä   /*Yes*/ E_(vectorModePrem;12) ; çä   /*No*/ 0çä)
F1 2397130 2395c90 0 1db69045 0 0 2
SharedVector ModePremium PolicyDuration(vectorModePrem)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorModePrem) > 13 ; çä   /*Yes*/ E_(vectorModePrem;13) ; çä   /*No*/ 0çä)
F1 1db69045 2395c90 0 23972b0 0 0 2
SharedVector ModePremium yearIndex(vectorModePrem)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorModePrem) > 14 ; çä   /*Yes*/ E_(vectorModePrem;14) ; çä   /*No*/ 0çä)
F1 23972b0 2395c90 0 71270b86 0 0 2
SharedVector ModePremium RateAssumption(vectorModePrem)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorModePrem) > 15 ; çä   /*Yes*/ E_(vectorModePrem;15) ; çä   /*No*/ 0çä)
F1 71270b86 2395c90 0 0 0 0 2
SharedVector ModePremium PolicyUnits(vectorModePrem)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorModePrem) > 16 ; çä   /*Yes*/ E_(vectorModePrem;16) ; çä   /*No*/ 0çä)
F1 2397430 22c3900 2397500 7468c8e8 0 0 2
:ULLoans
Funktion

F1 2397500 2397430 0 23975f8 0 0 2
SharedVector ULLoans MonthlyCharge(vectorULloan)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorULloan) > 1 ; çä   /*Yes*/ E_(vectorULloan;1) ; çä   /*No*/ 0çä)
F1 23975f8 2397430 0 20db3926 0 0 2
SharedVector ULLoans PeriodicPremium(vectorULloan; yearIndex)
Funktion
IF (V_LENGTH(vectorULloan) > 2 ; çä   /*Is any info passed in the vector at all?*/ IF ( /*Is premium info for yearIndex passed?*/ V_LENGTH(E_(vectorULloan;0)) >= yearIndex && yearIndex > 0 ; çä    IF (V_LENGTH(E_(vectorULloan;2)) > 1 ; çä      E_(E_(E_(vectorULloan;2);0);yearIndex - 1) ; çä      E_(E_(vectorULloan;2);yearIndex - 1)çä    ) ; çä  0çä) ; çä0çä)
F1 20db3926 2397430 0 5bddffe 0 0 2
SharedVector ULLoans AddInfoVector(vectorULloan)
Funktion
IF (V_LENGTH(vectorULloan) > 3 ; çä   /*Is any info passed in the vector at all?*/ E_(vectorULloan;3) ; çä  'GEN Vector Blank'çä)
F1 5bddffe 2397430 0 23976f8 0 0 2
SharedVector ULLoans SolveParmsVector(vectorULloan)
Funktion
IF (V_LENGTH(vectorULloan) > 2 ; çä   /*Is any info passed in the vector at all?*/ E_(vectorULloan;2) ; çä  'GEN Vector Blank'çä)
F1 23976f8 2397430 0 4fb5c619 0 0 2
SharedVector ULLoans PrevCVEOM(vectorULloan)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorULloan) > 0 ; çä   /*Yes*/ E_(vectorULloan;0) ; çä   /*No*/ 0çä)
F1 4fb5c619 2397430 75013e50 0 0 0 2
SharedVector ULLoans LoanAmount(yearIndex; vectorULLoan)
Funktion
IF (V_LENGTH(E_(vectorULLoan;3)) >= yearIndex ; çä  E_(E_(vectorULLoan;3);yearIndex - 1) ; çä  E_(E_(vectorULLoan;3);0)çä)
F1 75013e50 4fb5c619 0 0 0 0 2
SharedVector ULLoans LoanInfoPassed(vectorULLoan)
Funktion
V_LENGTH(E_(vectorULLoan;3)) > 0
F1 7468c8e8 22c3900 17786991 4223532a 0 0 2
: AMI
Funktion

F1 17786991 7468c8e8 226cef2 95b6bbd 0 0 2
SharedVector AMI Withdrawal(vectorAMI; yearIndex)
Funktion
IF ('SharedVector AMI Withdrawal Passed'(vectorAMI) ; çä   /*Is any info passed in the vector at all?*/ 'SharedVector AMI GetValue'(yearIndex;E_(vectorAMI;2)) ; çä  0çä)
F1 226cef2 17786991 0 0 0 0 2
SharedVector AMI Withdrawal Passed(vectorAMI)
Funktion
V_LENGTH(vectorAMI) > 2 && V_LENGTH(E_(vectorAMI;2)) > 0
F1 95b6bbd 7468c8e8 1f262a39 64fbd48b 0 0 2
SharedVector AMI Premium(vectorAMI; yearIndex)
Funktion
IF ('SharedVector AMI Premium Passed'(vectorAMI) ; çä   /*Is any info passed in the vector at all?*/ 'SharedVector AMI GetValue'(yearIndex;E_(vectorAMI;1)) ; çä  0çä)
F1 1f262a39 95b6bbd 0 0 0 0 2
SharedVector AMI Premium Passed(vectorAMI)
Funktion
V_LENGTH(vectorAMI) > 1 && V_LENGTH(E_(vectorAMI;1)) > 0
F1 64fbd48b 7468c8e8 5305b006 6aad96c 0 0 2
SharedVector AMI Loan(vectorAMI; yearIndex)
Funktion
IF ('SharedVector AMI Loan Passed'(vectorAMI) ; çä   /*Is any info passed in the vector at all?*/ 'SharedVector AMI GetValue'(yearIndex;E_(vectorAMI;3)) ; çä  0çä)
F1 5305b006 64fbd48b 0 0 0 0 2
SharedVector AMI Loan Passed(vectorAMI)
Funktion
V_LENGTH(vectorAMI) > 3 && V_LENGTH(E_(vectorAMI;3)) > 0
F1 6aad96c 7468c8e8 1febe61b 7351c4bf 0 0 2
SharedVector AMI GetValue(yearIndex; vectorPass)
Funktion
IF ('SharedVector AMI GetBracket'(yearIndex;0;vectorPass) = -1 ; çä  0 ; çä  E_(E_(vectorPass;'SharedVector AMI GetBracket'(yearIndex;0;vectorPass));1)çä)
F1 1febe61b 6aad96c 0 0 0 0 2
SharedVector AMI GetBracket(yearIndex; bracket; vectorPass)
Funktion
IF (yearIndex < E_(E_(vectorPass;bracket);0) ; çä  -1 ; çä  IF (yearIndex = E_(E_(vectorPass;bracket);0) || (yearIndex >= E_(E_(vectorPass;bracket);0) && (bracket = V_LENGTH(vectorPass) - 1 || yearIndex < E_(E_(vectorPass;bracket + 1);0))) ; çä    bracket ; çä    'SharedVector AMI GetBracket'(yearIndex;bracket + 1;vectorPass)çä  )çä)
F1 7351c4bf 7468c8e8 669e6b15 0 0 0 2
SharedVector AMI FaceAmount(vectorAMI; coverageIndex)
Funktion
IF ('SharedVector AMI FaceAmount Passed'(vectorAMI) ; çä   /*Is face amount info passed at all?*/ IF (V_LENGTH(E_(vectorAMI;0)) > coverageIndex && coverageIndex >= 0 ; çä     /*Is face amount info for coverage passed?*/ E_(E_(vectorAMI;0);coverageIndex) ; çä    0çä  ) ; çä0çä)
F1 669e6b15 7351c4bf 0 502920d8 0 0 2
SharedVector AMI FaceAmount Passed(vectorAMI)
Funktion
V_LENGTH(vectorAMI) > 0 && V_LENGTH(E_(vectorAMI;0)) > 0
F1 502920d8 7351c4bf 0 0 0 0 2
SharedVector AMI ReplaceFaceAmount(faceAmount; coverageIndex; vectorAMI)
Funktion
V_REPLACE(vectorAMI;V_REPLACE(E_(vectorAMI;0);faceAmount;coverageIndex);0)
F1 4223532a 22c3900 a22cf73 63a19327 0 0 2
: MultipleFunds
Funktion

F1 a22cf73 4223532a 0 607513a3 0 0 2
SharedVector MultipleFunds Fund Cash Value(vectorFundCV; fundIndex)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorFundCV) > fundIndex ; çä   /*Yes*/ E_(vectorFundCV;fundIndex) ; çä   /*No*/ 0çä)
F1 607513a3 4223532a 0 6005c0eb 0 0 2
SharedVector MultipleFunds Fund Cash Values excl Grace(vectorFundCV)
Funktion
V_DELETE(vectorFundCV;'Std Grace fundIndex')
F1 6005c0eb 4223532a 0 34fc9495 0 0 2
SharedVector MultipleFunds GraceFund Cash Value(vectorFundCV)
Funktion
'SharedVector MultipleFunds Fund Cash Value'(vectorFundCV;'Std Grace fundIndex')
F1 34fc9495 4223532a 0 0 0 0 2
SharedVector MultipleFunds IntRate(projInterestRate; fundIndex)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(projInterestRate) > fundIndex ; çä   /*Yes*/ E_(projInterestRate;fundIndex) ; çä   /*No*/ 0çä)
F1 63a19327 22c3900 2ca7b2ad 2844b116 0 0 2
: AnnSC
Funktion

F1 2ca7b2ad 63a19327 0 766ff570 0 0 2
SharedVector AnnSC AcctValue(vectorAnnSC)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorAnnSC) > 4 ; çä   /*Yes*/ E_(vectorAnnSC;4) ; çä   /*No*/ 0çä)
F1 766ff570 63a19327 0 852617b 0 0 2
SharedVector AnnSC GuarAcctValue(vectorAnnSC)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorAnnSC) > 5 ; çä   /*Yes*/ E_(vectorAnnSC;5) ; çä   /*No*/ 0çä)
F1 852617b 63a19327 0 19f718b7 0 0 2
SharedVector AnnSC NetPremFY(vectorAnnSC)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorAnnSC) > 7 ; çä   /*Yes*/ E_(vectorAnnSC;7) ; çä   /*No*/ 0çä)
F1 19f718b7 63a19327 0 7be61d49 0 0 2
SharedVector AnnSC NetPremITD(vectorAnnSC)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorAnnSC) > 6 ; çä   /*Yes*/ E_(vectorAnnSC;6) ; çä   /*No*/ 0çä)
F1 7be61d49 63a19327 0 6bd07e34 0 0 2
SharedVector AnnSC NetWithITD(vectorAnnSC)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorAnnSC) > 3 ; çä   /*Yes*/ E_(vectorAnnSC;3) ; çä   /*No*/ 0çä)
F1 6bd07e34 63a19327 0 724d5660 0 0 2
SharedVector AnnSC PremAmt(vectorAnnSC; premIndex)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorAnnSC) > 0 ; çä   /*Yes*/ IF (V_LENGTH(E_(vectorAnnSC;0)) > premIndex ; çä     /*Yes*/ E_(E_(E_(vectorAnnSC;0);premIndex);1) ; çä     /*No*/ 0çä  ) ; çä0çä)
F1 724d5660 63a19327 0 399b25e0 0 0 2
SharedVector AnnSC PremDate(vectorAnnSC; premIndex)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorAnnSC) > 0 ; çä   /*Yes*/ IF (V_LENGTH(E_(vectorAnnSC;0)) > premIndex ; çä     /*Yes*/ E_(E_(E_(vectorAnnSC;0);premIndex);0) ; çä     /*No*/ 0çä  ) ; çä0çä)
F1 399b25e0 63a19327 0 d2882b1 0 0 2
SharedVector AnnSC TotDepITD(vectorAnnSC)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorAnnSC) > 2 ; çä   /*Yes*/ E_(vectorAnnSC;2) ; çä   /*No*/ 0çä)
F1 d2882b1 63a19327 0 0 0 0 2
SharedVector AnnSC WithITD(vectorAnnSC)
Funktion
IF ( /*Is this field in the vector?*/ V_LENGTH(vectorAnnSC) > 1 ; çä   /*Yes*/ E_(vectorAnnSC;1) ; çä   /*No*/ 0çä)
F1 2844b116 22c3900 5c9ec46e 0 0 0 2
: MECAvoid
Funktion

F1 5c9ec46e 2844b116 0 0 0 0 2
SharedVector MECAvoid Search(vectorMECAvoid; yearIndex; searchItem)
Funktion
IF (v_length(vectorMECAvoid) <= 1 ; çä  "N/A" ; çä  IF (left(e_(vectorMECAvoid;0);length(searchItem)) ALIKE searchItem && mid(e_(vectorMECAvoid;0);instr(e_(vectorMECAvoid;0);"[") + 1;instr(e_(vectorMECAvoid;0);"]") - instr(e_(vectorMECAvoid;0);"[") - 1) ALIKE yearIndex ; çä    e_(vectorMECAvoid;1) ; çä    'SharedVector MECAvoid Search'(v_replace(vectorMECAvoid;void();0);yearIndex;searchItem)çä  )çä)
F1 2397868 22c18dc 2397930 2398870 0 0 2
:vBIR
Funktion

F1 2397930 2397868 2397a10 2398268 0 0 2
-- BIR Vector Functions --
Funktion

F1 2397a10 2397930 0 2397e40 0 0 2
vBIR Prem(vectorBIR)
Funktion
E_(vectorBIR;0)
F1 2397e40 2397930 0 2397f48 0 0 2
vBIR crossOverDur(vectorBIR)
Funktion
E_(vectorBIR;1)
F1 2397f48 2397930 0 2398058 0 0 2
vBIR faceAmount(vectorBIR)
Funktion
E_(vectorBIR;2)
F1 2398058 2397930 0 2398160 0 0 2
vBIR premPayYears(vectorBIR)
Funktion
E_(vectorBIR;3)
F1 2398160 2397930 0 0 0 0 2
vBIR baseUnits(vectorBIR)
Funktion
E_(vectorBIR;4)
F1 2398268 2397868 2398348 0 0 0 2
--BIR vector readability--
Funktion

F1 2398348 2398268 0 2398438 0 0 2
TGTDB BIR PremViaVector(calcType; yearIndex; vectorBIR)
Funktion
IF ('Std BIR coverage exists'(calcType) && yearIndex > 0 ; çä  IF (V_LENGTH(E_(vectorBIR;0)) > yearIndex - 1 ; çä    E_(E_(vectorBIR;0);yearIndex - 1) ; çä    IF (V_LENGTH(E_(vectorBIR;0)) > 0 ; çä      E_(E_(vectorBIR;0);0) ; çä       //0çäE_(vectorBIR;0)çä    )çä) ; çä0çä)
F1 2398438 2398268 0 2398540 0 0 2
TGTDB BIR CrossoverViaVector(vectorBIR)
Funktion
E_(vectorBIR;1)
F1 2398540 2398268 0 2398650 0 0 2
TGTDB BIR FaceAmountViaVector(vectorBIR)
Funktion
E_(vectorBIR;2)
F1 2398650 2398268 0 2398760 0 0 2
TGTDB BIR PremPayDurViaVector(vectorBIR)
Funktion
E_(vectorBIR;3)
F1 2398760 2398268 0 50bc201a 0 0 2
TGTDB Base FaceAmountViaVector(vectorBIR)
Funktion
E_(vectorBIR;4)
F1 50bc201a 2398268 25637816 0 0 0 2
SharedVector Shorten vectorBIR(vectorBIR; yearIndex)
Funktion
 // leaves vectorBIR what it used to be after yearIndex yearsçäIF (V_LENGTH(vectorBIR) = 0 ; çä  0 ; çä  V_REPLACE(V_REPLACE(vectorBIR;'SharedVector Shorten vectorBIR sub'(E_(vectorBIR;0);yearIndex);0);'SharedVector Shorten vectorBIR sub'(E_(vectorBIR;2);yearIndex);2)çä)
F1 25637816 50bc201a 0 1c180898 0 0 2
SharedVector Shorten vectorBIR sub(vectorBIRsub; yearIndex)
Funktion
IF ( //'SharedVector years in vectorBIRsub'(vectorBIRsub) <= yearIndex || 'SharedVector years in vectorBIRsub'(vectorBIRsub) = 0;çäV_LENGTH(vectorBIRsub) <= yearIndex ; çä  vectorBIRsub ; çä  IF (yearIndex <= 0 ; çä    0 ; çä    IF (yearIndex = 1 ; çä      E_(vectorBIRsub;0) ; çä      V_ELEMENTS(vectorBIRsub;0;yearIndex)çä    )çä)çä)
F1 1c180898 50bc201a 0 0 0 0 2
SharedVector years in vectorBIRsub(vectorBIRsub)
Funktion
IF (V_LENGTH(vectorBIRsub) > 0 ; çä  E_(vectorBIRsub;0) + V_LENGTH(vectorBIRsub) - 2 ; çä   // for non-LISR cases, this sub vector is just a single zeroçä0çä)
F1 2398870 22c18dc 2398940 2398b00 0 0 2
:vWithdrwl
Funktion

F1 2398940 2398870 2398a18 0 0 0 2
-- Withdrawal vector --
Funktion

F1 2398a18 2398940 0 6f94a187 0 0 2
vWithdrwl(vectorWithdrwl; yearIndex)
Funktion
IF (V_LENGTH(vectorWithdrwl) = 0 ; çä  0 ; çä  IF (V_LENGTH(vectorWithdrwl) > yearIndex - 1 ; çä    E_(vectorWithdrwl;MAX(yearIndex - 1;0)) ; çä    IF (V_LENGTH(vectorWithdrwl) > 0 ; çä      E_(vectorWithdrwl;V_LENGTH(vectorWIthdrwl) - 1) ; çä      E_(E_(vectorWithdrwl;0);0)çä    )çä)çä)
F1 6f94a187 2398940 76e15a6e 0 0 0 2
SharedVector Shorten vectorWithdrwl(vectorWithdrwl; yearIndex)
Funktion
IF (V_LENGTH(vectorWithdrwl) <= 1 ; çä  vectorWithdrwl ; çä  IF (yearIndex < 1 ; çä    V_(0) ; çä    V_ELEMENTS(vectorWithdrwl;0;yearIndex)çä  )çä)
F1 76e15a6e 6f94a187 0 0 0 0 2
SharedVector Remove Zero Withdrawals(vectorWithdrwl)
Funktion
IF (V_LENGTH(vectorWithdrwl) > 0 ; çä  IF (V_LAST(vectorWithdrwl) = 0 && V_LENGTH(vectorWithdrwl) > 1 ; çä    'SharedVector Remove Zero Withdrawals'(V_ELEMENTS(vectorWithdrwl;0;V_LENGTH(vectorWithdrwl) - 1)) ; çä    vectorWithdrwlçä  ) ; çävectorWithdrwlçä)
F1 2398b00 22c18dc 2398c10 2399168 0 0 2
-- Functions to allow serialized strings to be passed as vector parameters --
Funktion
/* Took these out of circulation due to UTV * functionalityçä çä11/3/2009 - NTçä çä*/
F1 2398c10 2398b00 2399088 0 0 0 2
vv(vectorParm)
Funktion
IF (V_LENGTH(vectorParm) = 0 ; çä  IF ( /*sub vector found*/ INSTR(MID(vectorParm;2);"(") > 0 ; çä    'vv rec'(V_CONSTRUCT(vectorParm);0) ; çä    V_CONSTRUCT(vectorParm)çä  ) ; çävectorParmçä)
F1 2399088 2398c10 0 0 0 0 2
vv rec(vectorParm; elementNum)
Funktion
IF (elementNum >= V_LENGTH(vectorParm) ; çä  vectorParm ; çä  IF (INSTR(E_(vectorParm;elementNum);"(") = 0 ; çä    'vv rec'(vectorParm;elementNum + 1) ; çä    'vv rec'(V_REPLACE(vectorParm;elementNum;V_STRINGX(E_(vectorParm;elementNum)));elementNum + 1)çä  )çä)
F1 2399168 22c18dc 2399240 0 0 0 2
-- Default Functions --
Funktion

F1 2399240 2399168 0 2399318 0 0 2
Std BIR coverage exists(calcType)
Funktion
0
F1 2399318 2399168 0 0 0 0 2
Policy CarrierCode
Funktion
'GEN Vector Blank'
A0 22c19bc 0 2399400 0 0 0 0

A0 2399400 22c19bc 2399498 0 0 0 2
-- Default attributes
A1 2399498 2399400 0 2399578 0 0 2
INPUT Invest Rate Type
default
0
A1 2399578 2399400 0 0 0 0 2
INPUT Invest Rate Sub Type
default
0
T0 22c1a2c 0 0 0 0 0 0

I0 22c1a9c 0 2399660 0 0 0 0

I0 2399660 22c1a9c 0 0 0 0 0
StandardTables.pms
-
O0
E0
L0
B0
P1
22c3500
F74
22c3900
22c3f88
22c5258
2393068
2393130
2393228
2393518
2393618
2393718
23938a0
23939b8
2393ad0
2393d50
2393e38
2393f38
23940d0
2394188
3215b02d
2394310
2394410
767c7f38
2394568
2394668
23949f8
2394b68
2394c70
2394d70
2394e70
2395008
2395190
23952a0
23954c0
31fdd65a
369b6535
3fd7f1ee
128821da
5aad1286
711b274f
2395688
2395758
2395848
2395970
2395a38
2395b28
2395c90
2397430
7468c8e8
4223532a
63a19327
2844b116
2397868
2397930
2397a10
2397e40
2397f48
2398058
2398160
2398268
2398348
2398438
2398540
2398650
2398760
50bc201a
2398870
2398940
2398a18
6f94a187
2398b00
2398c10
2399088
2399168
2399240
2399318
A3
2399400
2399498
2399578
T0
!127
2399400 -2 -2
Description:  attributes added to allow stand-alone compileçäModifications log:çä12/04/2008 CSC Initial function
22c3ea8 -2 -2
 âParameter #âParameter Descriptionçäâ0ââCheck for lapse (True or False)çäâ1ââInitial lump sum amountçäâ2ââAdjust for DEFRA (True or False)çäâ3ââVector of guideline limitsçäâ4ââVarying premiums (True or False)çäâ5ââVector of periodic premiumsçäâ6ââVector of load target premiums by coverageçäâ7ââStarting year for the projectionçäâ8ââStarting month for the projectionçä
22c40e8 -2 -2
Description:  Returns the True (i.e. 1) if additional info is passed in the vector.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
22c4218 -2 -2
Description:  Returns the True (i.e. 1) if the CV search should check for lapse.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
22c4318 -2 -2
Description:  Returns the initial lump sum amount.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
22c44a0 -2 -2
Description:  Returns True (i.e. 1) if the DEFRA guideline limitations are to be considered.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
22c4628 -2 -2
Description:  Returns the DEFRA guideline limit for the particular year.çä çäModification Log:çä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä05/21/2010 pA performance CMC reverted back to vector.çä05/14/2010 pA performance CMC changed to only be a single guideline value.çä11/06/2009 PA1001 - NT - changed this function to do the calculation from the given GSP /GLP instead of reading the value from the vectorçä01/26/2009 - pA1001 Testing - wdp - Changed function to use GSP/GLP correctly (they where switched around)çä10/31/2007 CSC Initial Calculation/Rule
22c46e0 -2 -2
Description:  Returns True (i.e. 1) if the periodic premium varies by duration.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
22c4868 -2 -2
Description:  Returns the periodic premium for the particular year.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
22c4ac8 -2 -2
Description:  Returns a vector of vectors for the annual load target premiums.  Each coverage with an associatedload premium will contain a vector containing the coverage load target premium and the coverage index.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
22c4c50 -2 -2
Description:  Returns a the starting year for the projection.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
7468324c -2 -2
Description:  Returns a 1 if yearIndex equals vector start yearçä çäModification Log:çä07/14/2011 - cleanup - BT - add new function so it can be reused
22c4ea0 -2 -2
Description:  Returns a the starting month for the projection.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
2f9a69ce -2 -2
Description:  Returns a 1 if monthIndex equals vector monthçä çäModification Log:çä8/18/2011 - Cleanup - BT - add initial function
a8a3fb1 -2 -2
Description:  Returns a 1 if monthIndex equals vector month and yearIndex equal vector yearçä çäModification Log:çä8/18/2011 - Cleanup - BT - add initial function
22c5150 -2 -2
Description:  Returns True (i.e. 1) if the calculation is an inforce calculation.çä çäModification Log:çä05/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/10/2011 - PAC013 calcType - BT - Restructureçä01/19/2011 - PAC013 calcType - BT - Restructureçä01/12/2011 - PAC013 calcType - BT - Restructureçä11/30/2010 - PERF - rm - eliminated unnecessary IF statement, since function has Boolean resultçä10/31/2007 CSC Initial Calculation/Rule
4359578b -2 -2
çä02/10/2011 - PAC013 calcType - BT - Restructure
ba37416 -2 -2
çä07/14/2011 - Cleanup - BT - add SharedVectorCVPROJAddlInfo Year Equals StartYearçä01/19/2011 - PAC013 calcType - BT - Restructure
22c5418 -2 -2
 âParameter #âParameter Descriptionçäâ0ââIssue Ageçäâ1ââMaturity Durationçäâ2ââInterest Rateçäâ3ââMortality Tableçäâ4ââGenderçäâ5ââUnderwriting Classçäâ6ââTobacco Basisçäâ7ââProduct Codeçäâ8ââProduct Effective Dateçäâ9ââJurisdictionçäâ10ââAge Calculation Typeçäâ11ââInclude TableRatingsçäâ12ââInclude FlatExtras
22c55c8 -2 -2
Description:  Returns the issue age from the actuarial info vector.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
22c5718 -2 -2
Description:  Returns the maturity duration from the actuarial info vector.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
22c59a0 -2 -2
Description:  Returns the interest rate from the actuarial info vector.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
22c5b20 -2 -2
Description:  Returns the mortality table from the actuarial info vector.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
22c5db8 -2 -2
Description:  Returns the gender from the actuarial info vector.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
2392090 -2 -2
Description:  Returns the underwriting class from the actuarial info vector.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
23921d0 -2 -2
Description:  Returns the tobacco basis from the actuarial info vector.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
2392350 -2 -2
Description:  Returns the product code from the actuarial info vector.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
23924c8 -2 -2
Description:  Returns the product effective date from the actuarial info vector.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
2392790 -2 -2
Description:  Returns the jusridiction from the actuarial info vector.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
2392910 -2 -2
Description:  Returns the age calculation type from the actuarial info vector.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
2392a90 -2 -2
Description:  Returns True (i.e. 1) if TableRatings are to be included in the mortality.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
2392d68 -2 -2
Description:  Returns True (i.e. 1) if TableRatings are to be included in the mortality.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
2392ee8 -2 -2
Description:  Returns the pay to duration.çä çäModification Log:çä03/31/2008 PA Phase 2 Illus001 Initial Calc
2393130 -2 -2
PUA Units per coverage vector : çä2-dimensional vectorçä çäFirst dimension is coverageIndexçäSecond Dimension consists of two fields: çäPremPUAUnits = number of units of PUA purchased with premiumsçäDivPUAUnits = number of units of PUA purchased with dividendsçä
2393228 -2 -2
Description : Returns the number of Premium purchased PUA Units for coverageIndexçä çäModification log:çä02/16/2010 DT pA1001 correctedçä02/01/2008 - Initial CSC function for Phase IIçä
2393518 -2 -2
Description : Returns the number of Dividend purchased PUA Units for coverageIndexçä çäModification log:çä02/16/2010 DT pA1001 correctedçä02/01/2008 - Initial CSC function for Phase IIçä
2393618 -2 -2
Description : Returns the total policy outstanding loan balanceçä çäModification log:çä04/16/2008 - DM - Updated to extract element from Loan Balance vectorçä02/01/2008 - Initial CSC function for Phase IIçä
6b0cdda -2 -2
Description : Returns 1 if loan information is passed in the vector; else returns 0çä çäModification log:çä
2393718 -2 -2
Description : Returns the total policy outstanding loan balanceçä çäModification log:çä02/01/2008 - Initial CSC function for Phase II
23938a0 -2 -2
Description : Returns the total policy outstanding loan balanceçä çäModification log:çä02/01/2008 - Initial CSC function for Phase II
23939b8 -2 -2
Description : Returns the Base Coverage Number of Unitsçädefined for WL Mix Face Amount Solvesçä çäModification log:çä03/04/2008 CSC Illustrations ILLUS001  
2393e38 -2 -2
// Returns premium amount for a specified year from the premiums vectorçä// Assume premiums of 0 after end of vector. So single premium needs only 1 element in the vector. 7-pays need 7, etc. çä// NEW : first element is level premium duration - second element is level premium, thereafter non-level premiums are specified.çä çä
2393f38 -2 -2
returns a vectorSolveParms from the premium passed inçäif periodicPremium is a vector (of varying premiums), use that insteadçä çäModification Log :çä11/06/2009 - PA1001 - NT - set the possibility that periodicPremium is a vector
2394188 -2 -2
Returns premium duration for the stream of premiums specified in vectorSolveParms
3215b02d -2 -2
Description : checks to see if premium is being passed in the solve parms vectorçä çäModification Log :çä12/29/2011 pA2113 CMC added check to make sure full premium portion is passed.çä10/07/2010 pA Regression CMC initial function
2394310 -2 -2
Returns withdrawal amount for a specified year from the Withdrawals vectorçäAssume withdrawals of 0 after end of vector. çä
2394410 -2 -2
returns a vectorSolveParms from the withdrawals passed in
767c7f38 -2 -2
Description : checks to see if withdrawals are being passed in the solve parms vectorçä çäModification Log :çä10/07/2010 pA Regression CMC initial functionçä
2394568 -2 -2
Returns face amount for a specified year from the face amounts vectorçäAssume face amount is level after end of vectorçä çäModification log:çä11/27/2009 - PAC006 - wdp - Modified face amount vector to be a vector of vectors, with each of these vectors containing the different face amounts by coverage
2394668 -2 -2
Modification log:çä05/28/2014 - PA1403 - rm - Minor revisions to comply with pA modeling standardsçä11/27/2009 - PAC006 - wdp - Modified face amount vector to be a vector of vectors, with each of these vectors containing the different face amounts by coverage
23949f8 -2 -2
Note only one amount is required for level face amounts currently assumed.çäNote also that doing this means constant face amount, which requires that number of coverages stay constant tooçä çäModification log:çä07/02/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/27/2009 - PAC006 - wdp - Modified face amount vector to be a vector of vectors, with each of these vectors containing the different face amounts by coverage
2394b68 -2 -2
Modification log:çä05/28/2014 - PA1403 - rm - Minor revisions to comply with pA modeling standardsçä07/02/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/27/2009 - PAC006 - wdp - Modified face amount vector to be a vector of vectors, with each of these vectors containing the different face amounts by coverage
2394c70 -2 -2
Returns loan amount for a specified year from the loans vectorçäAssume loan amount of 0 after end of vector. 
2394d70 -2 -2
Returns face amount for a specified year from the face amounts vectorçäAssume face amount is level after end of vector
2395008 -2 -2
Note only one amount is required for level face amounts currently assumed.
2395190 -2 -2
Description : Creates a blank solve parms vectorçä çäModification Log :çä10/07/2010 pA Regression CMC Updated to pick up entries in positions 2 and 3
23952a0 -2 -2
Returns loan amount for a specified year from the loans vectorçäAssume loan amount of 0 after end of vector. çä çäModification Log:çä04/15/2010 - Merge nbA into Staging - BT - Add && element 5 notalike "" in order to get rid of computesçä10/21/2009 NBA Integration CMC modified start year when not passed as a parm to 1 from 999.
2395398 -2 -2
Modification Log:çä çä10/22/2009 NBA Integration CMC created function to build the start year in the solve parms vector.
44ff4664 -2 -2
Description: Replaces the start year in the vectorçä çäModification Log: çä10/07/2010  pA regression CMC initial function
23954c0 -2 -2
Modification log:çä02/14/2013 - PAD1213 - JL - Use "Std Coverage is Inforce" instead of "Coverage is Inforce"çä12/29/2011 pA2113 CMC changed additional coverages to use the start year instead of year 1.çä07/02/2010 - PAC013 calcType - BT - Initially adding calcType parmçä05/26/2010 pA RegTest - JL - Only include cov amt if inforce at transeffdur - see GLP solve in ULTaxComplianceçä11/30/2009 - PAC006 - wdp - Corrected faceamount vector construction for only one coverageçä11/27/2009 - PAC006 - wdp - Modified face amount vector to be a vector of vectors, with each of these vectors containing the different face amounts by coverageçä
31fdd65a -2 -2
Description:âremoves items from the solve parms vector that are not used for charge calculations.çä çäModification Log:çä10/07/2010 pA Regression CMC updated to leave parm 4 aloneçä04/15/2010 - Merge nbA into Staging - BT - changed function per Curtis in order to resolve nbA compute errorsçä01/29/2010 Performance pa1001 CMC added function.
369b6535 -2 -2
Description : Returns the number of coverage stored in vectorSolveParms. Returns Number in year 1 if it's not present in the vectorçä çäModification Log :çä07/02/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/02/2009 - PA1001 - added function
3fd7f1ee -2 -2
Description : Checks whether there's a number of coverage added into the vectorSolveParmsçä çäModification Log :çä11/02/2009 - PA1001 - added function
128821da -2 -2
Description : Adds number of coverages to the vectorSolveParms vectorçä çäModification Log :çä11/02/2009 - PA1001 - added function
5aad1286 -2 -2
Description : Replaces the Face Amount, Death Benefit opiton and the start year in the vectorçä çäModification Log :çä10/07/2010 pA Regression CMC initial function
711b274f -2 -2
Modification log:çä02/14/2013 - PAD1213 - JL - Use "Std Coverage is Inforce" instead of "Coverage is Inforce"çä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä
2395b28 -2 -2
Description: Returns the vector used for rate model lookupsçä çäModification Log:çä02/08/2008 CSC Initial Calculation/Rule
2395c90 -2 -2
 âParameter #âParameter Descriptionçäâ0ââIssue Ageçäâ1ââMaturity Durationçäâ2ââInterest Rateçäâ3ââMortality Tableçäâ4ââGenderçäâ5ââUnderwriting Classçäâ6ââTobacco Basisçäâ7ââProduct Codeçäâ8ââProduct Effective Dateçäâ9ââJurisdictionçäâ10ââAge Calculation Typeçäâ11ââInclude TableRatingsçäâ12ââInclude FlatExtras
2395d60 -2 -2
Description:  Returns the issue age from the actuarial info vector.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
2396078 -2 -2
Description:  Returns the issue age from the actuarial info vector.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
2395ef0 -2 -2
Description:  Returns the maturity duration from the actuarial info vector.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
2396200 -2 -2
Description:  Returns the interest rate from the actuarial info vector.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
2396390 -2 -2
Description:  Returns the mortality table from the actuarial info vector.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
2396518 -2 -2
Description:  Returns the gender from the actuarial info vector.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
23966a0 -2 -2
Description:  Returns the underwriting class from the actuarial info vector.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
2396828 -2 -2
Description:  Returns the tobacco basis from the actuarial info vector.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
23969a8 -2 -2
Description:  Returns the product code from the actuarial info vector.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
2396b28 -2 -2
Description:  Returns the product effective date from the actuarial info vector.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
2396ca8 -2 -2
Description:  Returns the jusridiction from the actuarial info vector.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
2396e30 -2 -2
Description:  Returns the age calculation type from the actuarial info vector.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
2396fb0 -2 -2
Description:  Returns True (i.e. 1) if TableRatings are to be included in the mortality.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
2397130 -2 -2
Description:  Returns True (i.e. 1) if TableRatings are to be included in the mortality.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
1db69045 -2 -2
Description:  Returns the yearIndex applicable.çä çäModification Log:çä10/06/2014 - PAC038 - GWL - JL - Used element 13, but that is Duration. From the modePremium vector, yearIndex should be element 14. çä12/06/2010 - PAC013 - calcType - BT - this appeared to be pointing to the incorrect place?çä06/03/2009 - PA1013 - added function
23972b0 -2 -2
Description:  Returns the pay to duration.çä çäModification Log:çä03/31/2008 PA Phase 2 Illus001 Initial Calc
71270b86 -2 -2
Description:  Returns the number units applicable.çä çäModification Log:çä11/21/2012 PAD1091 CMC corrected vector length check.çä06/05/2009 - PA1277 - JL - Correct vector element positionçä05/21/2009 PA Phase 2 Illus001 Initial Calc
23975f8 -2 -2
Returns premium amount for a specified year from the premiums vectorçäAssume premiums of 0 after end of vector. So single premium needs only 1 element in the vector. 7-pays need 7, etc. çä çäModification Log:çä09/02/2011 pA1975 CMC Modified to reflect full vector solve parms being passed instead of just premium vector from solveparms vector
20db3926 -2 -2
Returns premium amount for a specified year from the premiums vectorçäAssume premiums of 0 after end of vector. So single premium needs only 1 element in the vector. 7-pays need 7, etc. çä çäModification Log:çä09/02/2011 pA1975 CMC Added Function
5bddffe -2 -2
Returns premium amount for a specified year from the premiums vectorçäAssume premiums of 0 after end of vector. So single premium needs only 1 element in the vector. 7-pays need 7, etc. çä çäModification Log:çä09/02/2011 pA1975 CMC Added Function
4fb5c619 -2 -2
Description : returns the loan amount from the vector for the yearIndex specified.çä çäModification log:çä11/24/2009 PAC002 DT added
75013e50 -2 -2
Description : Returns 1 if loan information is passed in the vector; else returns 0çä çäModification log:çä11/24/2009 PAC002 DT added
17786991 -2 -2
Description: Returns the Withdrawal from the AMI Vector, if there (else returns 0).çä çäModification Log:çä01/26/2010 - PAC02 - JL - Moved to submodel (from AMI)çä11/23/2009 - PAC02 - JL - Initial Calculationçä
226cef2 -2 -2
Description: Returns 1 if Withdrawal information is passed in the AMI vector; else returns 0.çä çäModification Log:çä01/26/2010 - PAC02 - JL - Moved to submodel (from AMI)çä11/23/2009 - PAC02 - JL - Initial Calculationçä
95b6bbd -2 -2
Description: Returns the Premium from the AMI Vector, if there (else returns 0).çä çäModification Log:çä01/26/2010 - PAC02 - JL - Moved to submodel (from AMI)çä11/23/2009 - PAC02 - JL - Initial Calculationçä
1f262a39 -2 -2
Description: Returns 1 if Premium information is passed in the AMI vector; else returns 0.çä çäModification Log:çä01/26/2010 - PAC02 - JL - Moved to submodel (from AMI)çä11/23/2009 - PAC02 - JL - Initial Calculationçä
64fbd48b -2 -2
çä çä01/26/2010 - PAC02 - JL - Moved to submodel (from AMI)
5305b006 -2 -2
Description: Returns 1 if Loan information is passed in the AMI vector; else returns 0.çä çäModification Log:çä01/26/2010 - PAC02 - JL - Moved to submodel (from AMI)çä11/23/2009 - PAC02 - JL - Initial Calculationçä
6aad96c -2 -2
Description: Returns the value from the bracketed "vectorPass" related to the passed yearIndexçä çäModification Log:çä01/26/2010 - PAC02 - JL - Moved to submodel (from AMI)çä11/23/2009 - PAC02 - JL - Initial Calculationçä
1febe61b -2 -2
Description: For a vector with bracketd values, returns the bracket in which the passed yearIndex falls.çä çäModification Log:çä01/26/2010 - PAC02 - JL - Moved to submodel (from AMI)çä11/23/2009 - PAC02 - JL - Initial Calculationçä
7351c4bf -2 -2
Description: Returns the Face Amount from the AMI Vector, if there (else returns 0).çä çäModification Log:çä01/26/2010 - PAC02 - JL - Moved to submodel (from AMI)çä11/23/2009 - PAC02 - JL - Initial Calculationçä
669e6b15 -2 -2
Description: Returns 1 if Face Amount information is passed in the AMI vector; else returns 0.çä çäModification Log:çä01/26/2010 - PAC02 - JL - Moved to submodel (from AMI)çä11/23/2009 - PAC02 - JL - Initial Calculationçä
502920d8 -2 -2
Description: Returns an AMI vector with replaced Face Amount for the passed coverageIndex, based on the passed AMI Vector.çä çäModification Log:çä01/26/2010 - PAC02 - JL - Moved to submodel (from AMI)çä11/23/2009 - PAC02 - JL - Initial Calculationçä
4223532a -2 -2
Description: Multiple Fund Supprtçä çäModifcation Log:çä10/26/2009 - PAC009 - JL - Initial Node Created
a22cf73 -2 -2
Description: Returns the fund cash value form the CV vector providedçä çäModifcation Log:çä01/26/2010 - PAC02 - JL - Moved to submodel (from AMI)çä10/26/2009 - PAC009 - JL - Initial Calculationçä
607513a3 -2 -2
Description: Removes the Grace Value CV frm the CV vectorçä çäModifcation Log:çä01/26/2010 - PAC02 - JL - Moved to submodel (from AMI)çä10/26/2009 - PAC009 - JL - Initial Calculationçä
6005c0eb -2 -2
Description: Returns the cv of the Grace fund from the CV vectorçä çäModifcation Log:çä01/26/2010 - PAC02 - JL - Moved to submodel (from AMI)çä10/26/2009 - PAC009 - JL - Initial Calculationçä
34fc9495 -2 -2
Description: Returns the interest rate from the projIntRate vectorçä çäModifcation Log:çä01/26/2010 - PAC02 - JL - Moved to submodel (from AMI)çä10/26/2009 - PAC009 - JL - Initial Calculationçä
5c9ec46e -2 -2
Description: Returns a requested value (searItem {'Constant PremiumInput', 'Constant FaceAmountInput', 'Constant WithdrawalAmountInput'}) from  vectorMecAvoid for a given yearIndex, if it exists in that vector, ELSE returns "N/A".çä çäModification Log:çä02/23/2015 - PAC031 MEC Avoidance - JL - Initial Calculation
2397930 -2 -2
Description:  BIR Vector Contentsçä çäBIR premiumçäBIR Cross Over YearçäBIR face amountçäBIR premium paying yearsçäBase number of unit (WL Mix Face Amt Solve)çä çäModification Log:çä03/04/2008
2397a10 -2 -2
Description : Returns BIR recommended Premiumçä çäModification log:çä03/04/2008 CSC Illustrations ILLUS001  
2397e40 -2 -2
Description : Returns BIR CrossOver Durationçä çäModification log:çä03/04/2008 CSC Illustrations ILLUS001  
2397f48 -2 -2
Description : Returns BIR Face Amountçä çäModification log:çä03/04/2008 CSC Illustrations ILLUS001  
2398058 -2 -2
Description : Returns BIR Premium Paying YearsçäModification log:çä03/04/2008 CSC Illustrations ILLUS001  
2398160 -2 -2
Description : Returns WL Mix Solves Base Unitsçä çäModification log:çä03/04/2008 CSC Illustrations ILLUS001  
2398348 -2 -2
Description : Returns BIR recommended Premium for given duration.  If duration is out of bounds,çäthe first value is used.çä çäModification log:çä07/02/2010 - PAC013 calcType - BT - Initially adding calcType parmçä02/03/2010 pA1001 DT instead of return 0 return 1st elementçä01/26/2010 - PAC02 - JL - Moved to submodel (from AMI)çä03/04/2008 CSC Illustrations ILLUS001  çä
2398438 -2 -2
Description : Returns BIR CrossOver Durationçä çäModification log:çä03/04/2008 CSC Illustrations ILLUS001  
2398540 -2 -2
Description : Returns BIR Face Amountçä çäModification log:çä03/04/2008 CSC Illustrations ILLUS001
2398650 -2 -2
Description : Returns BIR Premium Paying YearsçäModification log:çä03/04/2008 CSC Illustrations ILLUS001  
2398760 -2 -2
Description: Base face amount from WLFaceAmountSolves modelçä çäModification Log:çä02/26/2008 CSC Illustrations ILLUS001
50bc201a -2 -2
Description : Shortens vectorBIR to the length required by yearIndexçä çäModification Log :çä06/03/2009 - PA1277 - JL - Check BIRVector length to determine if there is BIRçä06/03/2009 - PA1277 - JL - If there is no BIR on the policy, and the vector is empty, return the empty vectorçä05/08/2009 - PA1013 - NT - created function
25637816 -2 -2
Description : Reduces the number / type of elements in vectorBIRsub (which is either premium or death benefit elements of vectorBIR) to bring it down to yearIndex. çä çäModification Log :çä01/12/2011 - PAC013 calcType - BT - Restructureçä05/08/2009 - PA1013 - NT - created functionçä06/10/2009 - PA1277 - JL - Correction to below; in V_Elements, let it run to yearIndex, not yearIndex - 1çä06/05/2009 - PA1277 - JL - vectorBIR for pA does not match that from where the retrofit code comes; modified to allow for no yearIndex in premium vector, etc.çä02/08/2010 - PA RegTest - JL - Use 0 not "" for yearIndex <=0
1c180898 -2 -2
Description : returns the number of years currently represented in vectorBIR. çä çäModification Log :çä05/08/2009 - PA1013 - NT - created function
2398a18 -2 -2
Description:  function returns vector of withdrawal amountsçä çäModification Log:çä09/30/2008 CSC added logic to check for null vector indicating no withdrawals input
6f94a187 -2 -2
Description : Shortens vectorWithdrwl to the length required by yearIndexçä - takes off the last years of vectorWithdrwl if appropriate - leaving it with a length of yearIndex çä çäModification Log :çä01/12/2011 - PAC013 calcType - BT - Restructureçä06/12/2009 - PA1277 - JL - pA needs the zero withdrawals, add back inçä05/08/2009 - PA1013 - NT - created function (commented out loans piece - not sure if that will be coming across)
76e15a6e -2 -2
Description : removes unnecessary zeroes from the end of vectorWithdrwlçä çäModification Log :çä05/08/2009 - PA1013 - NT - created function
2398c10 -2 -2
 This function tests if the parm is a vector or serialized string representation of a vectorçä If the parm is a serialized string, it is converted to a vectorçä else the vector parm is returned unchanged.
2399168 -2 -2
Description:  functions added to allow stand-alone compileçäModifications log:çä12/04/2008 CSC Initial function
2399240 -2 -2
çä07/02/2010 - PAC013 calcType - BT - Initially adding calcType parm
;Offset=00000000
