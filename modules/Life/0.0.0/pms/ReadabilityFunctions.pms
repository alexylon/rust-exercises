;1	08.12.2016 13:38:33	jlawrie2	
X0 235c19c 0 70fad14e 0 0 0 0

X1 70fad14e 235c19c 0 326dd4e1 0 0 2
PolicyStatus In ActiveStatuses(policy_status)
PolicyStatus In ActiveStatuses(8)
1
X1 326dd4e1 235c19c 0 0 0 0 2
PaymentMode is Applicable(payment_mode; monthIndex)
PaymentMode is Applicable(2;10)
0
O0 235c04c 0 0 0 0 0 0

E0 235c0bc 0 0 0 0 0 0

L0 235c12c 0 0 0 0 0 0

B0 235c2ec 0 0 0 0 0 0

P3 235c20c 0 235c8b0 0 0 0 2

--description
Common sub-model containing common readability functions used throughout the models.çä çäTable code values are translated with common functions and used within calculation logic to make it easier to read and understand.çä çäRELEASE LOG:çäRELEASE 1602 - PAC024 LTC ProductçäRELEASE 1501 - PAC031 MEC AvoidanceçäRELEASE 1501 - PAC039 DIAçäRELEASE 1301 - wmA-J DevelopmentçäRELEASE 1101 - PAC024 Policy Owner Annual Statement ProjectionsçäRELEASE wmA 1001 - ENH922çäRELEASE wmA 1001 - ENH1061çäRELEASE 1101 - PAC013 calcTypeçäRELEASE 1101 - PAC018 IRRçäRELEASE 1101 - PAC019 Rate Access via InputsçäRELEASE 1101 - PAC020 Back-dating SupportçäRELEASE 1101 - PAC017 FINRA Rule 2211
LICENSENAME
"CSC US internal use only - Workbench"
COMPILERVERSION
"4.6.1    "
P13 235c8b0 235c20c 0 0 0 0 2
ReadabilityFunctions Model
IncType
mandatory
IncRule

IncValue

OUTPUT Comment
"Model:   Readability model.çä Author:  John Heumannçä Date:     10/31/2007 çä Modification Log:çä Date              Modeler               Change Descriptionçä 10/31/2007     John Heumann     Created model.çä"
OUTPUT Runtime Version
"1.0.0"
OUTPUT Runtime Date
"12/12/2016"
OUTPUT Source Version Computer
"VPMS_SERVER"
OUTPUT Source Version File
"ReadabilityFunctions.pms"
OUTPUT Source Version Number
'GEN VersionInfo'
OUTPUT Source Version Date
"12/12/2016"
OUTPUT Source Version Author
"CSC"
OUTPUT Source Version Comment
"PA1603 Delivery"
OUTPUT Audit History Block
"12/12/2016 PA1603 Delivery"
F0 235c27c 0 d3b1591 0 0 0 0

F1 d3b1591 235c27c 52223fee 0 0 0 2
:READ
Funktion

F1 52223fee d3b1591 4f5293d4 6e3f4918 0 0 2
--Translation of rules to descriptive strings--
Funktion

F1 4f5293d4 52223fee 0 0 0 0 2
READ Premium CalcMethod(calcMethodUsed)
Funktion
CASE(calcMethodUsed;çä  "1";"1000500001" : "SUM_OF_CHARGES";çä  "2";"1000500002" : "RATE_FILE";çä  "3";"1000500003" : "ITERATIVE_SOLVE";çä  "4";"1000500004" : "PRESENT_VALUE_SOLVE";çä   : "UNKNOWN")çä //calcMethodUsed from 'ACCS TARGET CalcMethod Used'(calcType)ä
F1 6e3f4918 d3b1591 7be2e2f1 64ed0bd5 0 0 2
--Default functions--
Funktion

F1 7be2e2f1 6e3f4918 0 129af203 0 0 2
Illus Face Amt Solve DesignType(calcType)
Funktion
0
F1 129af203 6e3f4918 0 5a9727a6 0 0 2
Policy Coverage IndicatorCode(calcType; coverageIndex)
Funktion
0
F1 5a9727a6 6e3f4918 0 0 0 0 2
Policy Coverage LifeCovTypeCode(calcType; coverageIndex)
Funktion
0
F1 64ed0bd5 d3b1591 34e14155 6273360 0 0 2
--move--
Funktion

F1 34e14155 64ed0bd5 424300ca 5ba0d2f1 0 0 2
-- Dividend Type Indicators --
Funktion

F1 424300ca 34e14155 0 1bc16a0f 0 0 2
--Dividend Type Indicator Indicates PUAs(DivTypeIndicator)
Funktion
çäDivTypeIndicator EQUAL "P"
F1 1bc16a0f 34e14155 0 0 0 0 2
--Dividend Type Indicator Indicates RPU(DivTypeIndicator)
Funktion
çäDivTypeIndicator EQUAL "U"
F1 5ba0d2f1 64ed0bd5 597d9409 0 0 0 2
-- Reduced Paid Up--
Funktion

F1 597d9409 5ba0d2f1 0 6bd3c48 0 0 2
--Year is Greater Than or Equal To RPU Start Duration(yearIndex)
Funktion
çä 'Illus RPU Election'  çä  && yearIndex >= 'Illus RPU StartDuration'
F1 6bd3c48 5ba0d2f1 0 12956392 0 0 2
--Duration Equals RPU Start Duration(yearIndex)
Funktion
çäyearIndex EQUAL 'Illus RPU StartDuration'
F1 12956392 5ba0d2f1 19f3d165 7700838c 0 0 2
--Duration Is 1 Year Before the RPU Start Duration(calcType; yearIndex)
Funktion
çä'Illus RPU Election'        //RPU is on the policyçä&& 'Rate Assumption Is RPU'(calcType)  //RPU rateAssumption passedçä&& yearIndex EQUAL ('Illus RPU StartDuration' - 1)  //yearindex is equal to 1 year before RPU Start Duration
F1 19f3d165 12956392 0 0 0 0 2
--1 Year Before RPU Start Duration
Funktion
çä'Illus RPU StartDuration' - 1
F1 7700838c 5ba0d2f1 0 5f71c9e3 0 0 2
--RPU Rate Assumption Is Required(calcType; yearIndex)
Funktion
çä'Illus RPU Election'   //RPU is on the policyçä&& çä'Rate Assumption is Income'(calcType) //Income Rate Assumption is passedçä&& çäyearIndex >= 'Illus RPU StartDuration'çä
F1 5f71c9e3 5ba0d2f1 0 18f3e92 0 0 2
--Policy Has Gone to RPU(calcType; yearIndex)
Funktion
çä  'Illus RPU Election'çäâ&& 'Rate Assumption Is RPU'( calcType)çäââ&& yearIndex >= 'Illus RPU StartDuration'çäââ
F1 18f3e92 5ba0d2f1 2006935d 5fa7b069 0 0 2
--RPU Rate Assumption Should Not be Used(calcType; yearIndex)
Funktion
çä'RPU Rate Assumption Should Not be Used Because RPU Not Elected'(calcType)çä çä||çä çä'RPU Rate Assumption Should Not be Used Because Before RPU Start Duration'(calcType; yearIndex)
F1 2006935d 18f3e92 0 214dc6e6 0 0 2
--RPU Rate Assumption Should Not be Used Because RPU Not Elected(calcType)
Funktion
çä//RPU rateAssumption passed but RPU has not been electedçä('Rate Assumption Is RPU'(calcType) çä&& NOT('Illus RPU Election'))
F1 214dc6e6 18f3e92 0 0 0 0 2
--RPU Rate Assumption Should Not be Used Because Before RPU Start Duration(calcType; yearIndex)
Funktion
çä'Rate Assumption Is RPU'(calcType) //RPU Rate Assumption is Passedçä&&çä(çäNOT('Illus RPU Election')//RPU Not Electedçä|| çä(yearIndex < 'Illus RPU StartDuration')//but before RPU start durationçä)â
F1 5fa7b069 5ba0d2f1 0 0 0 0 2
--RPU Adjusted Rate Assumption( calcType; yearIndex)
Funktion
çä  IF(  'Illus RPU Election' çä            && 'Rate Assumption Is RPU'(calcType)çä                    && yearIndex < 'Illus RPU StartDuration';çä                    çä                                 "I"&RIGHT( calcType; 1);çä                                                                             çä                                            rateAssumptionçä                                            çä     )                                       çä      
F1 6273360 d3b1591 1ddd0790 58dbf6c7 0 0 2
-- Readability Rules --
Funktion

F1 1ddd0790 6273360 208246f2 216967f1 0 0 2
-- Long Term Care --
Funktion

F1 208246f2 1ddd0790 0 37cc9564 0 0 2
LTC Coverage Is LTC Related(calcType; coverageIndex; yearIndex)
Funktion
'LTC Coverage Exists'(calcType;yearIndex) && (coverageIndex = E_('LTC Find Indices vec'(calcType;yearIndex);0)) //IF(coverageIndex = E_('LTC Find Indices vec'(calcType; yearIndex),0);çä//â1;çä//â0çä//)çä
F1 37cc9564 1ddd0790 0 7fe16b7a 0 0 2
LTC CV Adjustment Is Non-Proportional(calcType; coverageIndex)
Funktion
'PI LTCDDCalcRules LTCClaimDBSurrAdjust'(calcType;'Policy Coverage ProductCode'(calcType;coverageIndex);'Policy EffDate') EQUAL "1000500002" || 'PI LTCDDCalcRules LTCClaimDBSurrAdjust'(calcType;'Policy Coverage ProductCode'(calcType;coverageIndex);'Policy EffDate') EQUAL "1000500005"
F1 7fe16b7a 1ddd0790 0 67c44261 0 0 2
LTC CV Adjustment Is Proportional(calcType; coverageIndex)
Funktion
'PI LTCDDCalcRules LTCClaimDBSurrAdjust'(calcType;'Policy Coverage ProductCode'(calcType;coverageIndex);'Policy EffDate') EQUAL "1000500001" || 'PI LTCDDCalcRules LTCClaimDBSurrAdjust'(calcType;'Policy Coverage ProductCode'(calcType;coverageIndex);'Policy EffDate') EQUAL "1000500004"
F1 67c44261 1ddd0790 0 1b3d9f40 0 0 2
LTC Rider is Coverage(objectType)
Funktion
'LTC ObjectType'(objectType) EQUAL "Coverage"
F1 1b3d9f40 1ddd0790 0 721933ba 0 0 2
LTC Rider is CovOption(objectType)
Funktion
'LTC ObjectType'(objectType) EQUAL "CovOption"
F1 721933ba 1ddd0790 0 cfc3510 0 0 2
LTC Rider is Rider(objectType)
Funktion
'LTC ObjectType'(objectType) EQUAL "Rider"
F1 cfc3510 1ddd0790 0 14bd6b7 0 0 2
LTC Type is CoverageReduction(calcType; coverageIndex)
Funktion
'PI LTCDDCalcRules LTCClaimDBSurrAdjust'(calcType;'Policy Coverage ProductCode'(calcType;coverageIndex);'Policy EffDate') EQUAL "1000500004" || 'PI LTCDDCalcRules LTCClaimDBSurrAdjust'(calcType;'Policy Coverage ProductCode'(calcType;coverageIndex);'Policy EffDate') EQUAL "1000500005" || 'PI LTCDDCalcRules LTCClaimDBSurrAdjust'(calcType;'Policy Coverage ProductCode'(calcType;coverageIndex);'Policy EffDate') EQUAL "1000500006"
F1 14bd6b7 1ddd0790 0 0 0 0 2
LTC Type is Lien(calcType; coverageIndex)
Funktion
'PI LTCDDCalcRules LTCClaimDBSurrAdjust'(calcType;'Policy Coverage ProductCode'(calcType;coverageIndex);'Policy EffDate') EQUAL "1000500001" || 'PI LTCDDCalcRules LTCClaimDBSurrAdjust'(calcType;'Policy Coverage ProductCode'(calcType;coverageIndex);'Policy EffDate') EQUAL "1000500002"
F1 216967f1 6273360 5f4abbb9 67e327f 0 0 2
-- Advanced Marketing Illustration Equates --
Funktion

F1 5f4abbb9 216967f1 64175763 2281974 0 0 2
-- Illustration Type Equates--
Funktion

F1 64175763 5f4abbb9 0 699e609c 0 0 2
Illustration Type is Basic(illusType)
Funktion
illusType ALIKE "BAS"
F1 699e609c 5f4abbb9 2efe7a45 79f84a97 0 0 2
Illustration Type is DeferredComp(illusType)
Funktion
'Illustration Type is DeferredComp SERP'(illusType) || 'Illustration Type is DeferredComp SalaryDeferral'(illusType)
F1 2efe7a45 699e609c 0 67844d58 0 0 2
Illustration Type is DeferredComp SERP(illusType)
Funktion
illusType ALIKE "SERP"
F1 67844d58 699e609c 0 0 0 0 2
Illustration Type is DeferredComp SalaryDeferral(illusType)
Funktion
illusType ALIKE "SDEF"
F1 79f84a97 5f4abbb9 0 5fa29d98 0 0 2
Illustration Type is ExecBonus(illusType)
Funktion
illusType ALIKE "EXB"
F1 5fa29d98 5f4abbb9 0 6f95878e 0 0 2
Illustration Type is KeyPerson(illusType)
Funktion
illusType ALIKE "KP"
F1 6f95878e 5f4abbb9 7b48627a 23543837 0 0 2
Illustration Type is SplitDollar(illusType)
Funktion
'Illustration Type is SplitDollar Endorsement'(illusType) || 'Illustration Type is SplitDollar Collateral'(illusType) || 'Illustration Type is ReverseSplitDollar'(illusType)
F1 7b48627a 6f95878e 0 63ce9697 0 0 2
Illustration Type is SplitDollar Endorsement(illusType)
Funktion
illusType ALIKE "SDE"
F1 63ce9697 6f95878e 0 24082ecb 0 0 2
Illustration Type is SplitDollar Collateral(illusType)
Funktion
illusType ALIKE "SDC"
F1 24082ecb 6f95878e 0 0 0 0 2
Illustration Type is ReverseSplitDollar(illusType)
Funktion
illusType ALIKE "RSD"
F1 23543837 5f4abbb9 0 0 0 0 2
Illustration Type is AggregateFunding(illusType)
Funktion
illusType ALIKE "AF"
F1 2281974 216967f1 3a4155ff 32eb24b9 0 0 2
-- Split Dollar Illustration Rollout Equates --
Funktion

F1 3a4155ff 2281974 0 7071f33 0 0 2
Illustration Rollout Option is Bonus(rolloutOption)
Funktion
rolloutOption = 1
F1 7071f33 2281974 0 744543af 0 0 2
Illustration Rollout Option is DoubleBonus(rolloutOption)
Funktion
rolloutOption = 2
F1 744543af 2281974 0 1441dc34 0 0 2
Illustration Rollout Option is Exec Pays(rolloutOption)
Funktion
rolloutOption = 4
F1 1441dc34 2281974 0 7259aec0 0 0 2
Illustration Rollout Option is Exec Repays Loan(rolloutOption)
Funktion
rolloutOption = 7
F1 7259aec0 2281974 0 4591546 0 0 2
Illustration Rollout Option is Loan Forgiveness(rolloutOption)
Funktion
rolloutOption = 6
F1 4591546 2281974 0 19754616 0 0 2
Illustration Rollout Option is Terminate Endorsement(rolloutOption)
Funktion
rolloutOption = 5
F1 19754616 2281974 0 14a35d43 0 0 2
Illustration Rollout Option is ZeroCost Bonus(rolloutOption)
Funktion
rolloutOption = 3
F1 14a35d43 2281974 0 5601f87 0 0 2
Illustration Rollout Type is Retirement Age(rolloutType)
Funktion
rolloutType = 3
F1 5601f87 2281974 0 17f055b4 0 0 2
Illustration Rollout Type is Specified Age(rolloutType)
Funktion
rolloutType = 2
F1 17f055b4 2281974 0 0 0 0 2
Illustration Rollout Type is Specified Year(rolloutType)
Funktion
rolloutType = 1
F1 32eb24b9 216967f1 0 7098b0ea 0 0 2
BenefitPeriodOption is Specified Duration(benefitPeriodOption)
Funktion
benefitPeriodOption EQUAL "1000500001"
F1 7098b0ea 216967f1 0 67a0fb6e 0 0 2
BenefitPeriodOption is Specified Age(benefitPeriodOption)
Funktion
benefitPeriodOption EQUAL "1000500002"
F1 67a0fb6e 216967f1 0 15777b7f 0 0 2
BenefitPeriodOption is Life(benefitPeriodOption)
Funktion
benefitPeriodOption EQUAL "1000500003"
F1 15777b7f 216967f1 0 677ca837 0 0 2
CostRecoveryOption is Total(costRecoveryOption)
Funktion
costRecoveryOption EQUAL "1000500001"
F1 677ca837 216967f1 0 1e88dc81 0 0 2
CostRecoveryOption is Benefits(costRecoveryOption)
Funktion
costRecoveryOption EQUAL "1000500002"
F1 1e88dc81 216967f1 0 28520ac0 0 0 2
CostRecoveryDurationOption is FundedMortality(costRecoveryDurationOption)
Funktion
costRecoveryDurationOption EQUAL "1000500001"
F1 28520ac0 216967f1 0 545da71a 0 0 2
CostRecoveryDurationOption is PreRetirement(costRecoveryDurationOption)
Funktion
costRecoveryDurationOption EQUAL "1000500002"
F1 545da71a 216967f1 0 4a56530e 0 0 2
CostRecoveryDurationOption is Retirement(costRecoveryDurationOption)
Funktion
costRecoveryDurationOption EQUAL "1000500003"
F1 4a56530e 216967f1 0 0 0 0 2
CostRecoveryDurationOption is All(costRecoveryDurationOption)
Funktion
costRecoveryDurationOption EQUAL "1000500004"
F1 67e327f 6273360 6b6097b 4cfed767 0 0 2
-- AnnuityProduct Equates --
Funktion

F1 6b6097b 67e327f 0 3ac8f078 0 0 2
AnnuityProduct is SPIA
Funktion
IF ('PI Use Attributes'("Premium Type") && 'PI Use Attributes'("Policy Payout PayoutType") ; çä   //Get from Inputsçä'INPUT Premium Type' = 1 && 'INPUT Policy Payout PayoutType' = 1 ; çä   //Otherwise get from product definitionçä'PI AnnuityProduct PremType'('Policy ProductCode';'Policy EffDate') = 1 && 'PI AnnuityProduct PayoutType'('Policy ProductCode';'Policy EffDate') = 1çä)
F1 3ac8f078 67e327f 0 5327ce2f 0 0 2
Annuity Payout LivesType is Single(livesType)
Funktion
livesType = 1
F1 5327ce2f 67e327f 576f971b 831dfca 0 0 2
Annuity Payout LivesType is Joint(livesType)
Funktion
livesType = 3 //2nd to dieçä || livesType = 2 //1st to dieä
F1 576f971b 5327ce2f 0 662a1ef2 0 0 2
Annuity Payout LivesType is Joint FirstToDie(livesType)
Funktion
livesType = 2
F1 662a1ef2 5327ce2f 0 0 0 0 2
Annuity Payout LivesType is Joint LastSurvivor(livesType)
Funktion
livesType = 3
F1 831dfca 67e327f 0 20939a93 0 0 2
Annuity Payout Option Is PeriodCertain(incomeOption)
Funktion
incomeOption = 3
F1 20939a93 67e327f 0 14f6167f 0 0 2
Annuity Payout Option Is CertainAndLife(incomeOption)
Funktion
incomeOption = 2
F1 14f6167f 67e327f 0 2eda6ef5 0 0 2
Annuity Payout Option Is TemporaryLife(incomeOption)
Funktion
incomeOption = 4
F1 2eda6ef5 67e327f 0 46978275 0 0 2
Annuity Payout Option Is InterestOnly(incomeOption)
Funktion
incomeOption = 16
F1 46978275 67e327f 0 15b1f1ed 0 0 2
Annuity Payout Option Is LifePlusLumpSum(incomeOption)
Funktion
incomeOption = 5
F1 15b1f1ed 67e327f 0 2955274b 0 0 2
Annuity Payout Option Is LifePlusInstallment(incomeOption)
Funktion
incomeOption = 9
F1 2955274b 67e327f 0 5f89b668 0 0 2
Annuity Mortality Assumption Is UDD(mortAssumptionCode)
Funktion
mortAssumptionCode = 0
F1 5f89b668 67e327f 0 d287601 0 0 2
Annuity Payout COLA Simple Interest(allowedPctType)
Funktion
allowedPctType = 1
F1 d287601 67e327f 0 375de0d9 0 0 2
Annuity Payout COLA Compound Interest(allowedPctType)
Funktion
allowedPctType = 2
F1 375de0d9 67e327f 0 2c26cbbf 0 0 2
Annuity Payout ProRata
Funktion
'Policy Payout AnnualExclusionAmtMethod' = 1
F1 2c26cbbf 67e327f 0 4eae61c8 0 0 2
Annuity Payout Front Loading
Funktion
'Policy Payout AnnualExclusionAmtMethod' = 2
F1 4eae61c8 67e327f f589752 69717fb5 0 0 2
---MVA Equates--
Funktion

F1 f589752 4eae61c8 0 45cc78c9 0 0 2
MVA Added to Death Benefit(mvaDBType)
Funktion
mvaDBtype EQUAL "1000500001"
F1 45cc78c9 4eae61c8 0 329e9935 0 0 2
MVA Added to Death Benefit If Greater Than Zero(mvaDBType)
Funktion
mvaDBtype EQUAL "1000500002"
F1 329e9935 4eae61c8 0 72e58f21 0 0 2
MVA Excluded From Death Benefit(mvaDBType)
Funktion
mvaDBtype EQUAL "1000500003"
F1 72e58f21 4eae61c8 0 3a0c4a0e 0 0 2
MVA Calc Method Is Pct of Cash Value(mvaMethod)
Funktion
mvaMethod EQUAL "1000500001"
F1 3a0c4a0e 4eae61c8 0 4948760e 0 0 2
MVA Reinvestment to Current Period(mvaReinv)
Funktion
mvaReinv EQUAL "1000500001"
F1 4948760e 4eae61c8 0 498527c1 0 0 2
MVA Reinvestment to One Year Guarantee Only(mvaReinv)
Funktion
mvaReinv EQUAL "1000500002"
F1 498527c1 4eae61c8 0 42419229 0 0 2
MVA Reinvestment Option Not Included(mvaReinv)
Funktion
mvaReinv EQUAL "1000500003"
F1 42419229 4eae61c8 0 45c31441 0 0 2
MVA Limited to Excess Interest(mvaLimit)
Funktion
mvaLimit EQUAL "1000500001"
F1 45c31441 4eae61c8 0 45f8750c 0 0 2
MVA Limited to Percent Of CV(mvaLimit)
Funktion
mvaLimit EQUAL "1000500002"
F1 45f8750c 4eae61c8 0 14eb282e 0 0 2
MVA Has No Limit(mvaLimit)
Funktion
mvaLimit EQUAL "1000500003"
F1 14eb282e 4eae61c8 0 648b562c 0 0 2
MVA Type Is Linear(interestCalcType)
Funktion
interestCalctype = 1
F1 648b562c 4eae61c8 0 55732cdd 0 0 2
MVA Type Is Geometric(interestCalcType)
Funktion
interestCalcType = 2
F1 55732cdd 4eae61c8 0 3773cafc 0 0 2
MVA Calculation Mode is Daily(compoundMode)
Funktion
compoundMode = 8
F1 3773cafc 4eae61c8 0 0 0 0 2
MVA Calculation Mode is Monthly(compoundMode)
Funktion
compoundMode = 4
F1 69717fb5 67e327f 0 4b48ece4 0 0 2
Annuity Mortality Assumption Is Balducci(mortAssumptionCode)
Funktion
mortAssumptionCode = 1
F1 4b48ece4 67e327f 0 793431ad 0 0 2
Annuity Mortality Assumption Is CDD(mortAssumptionCode)
Funktion
mortAssumptionCode = 2
F1 793431ad 67e327f 0 0 0 0 2
Annuity Mortality Assumption Is None(mortAssumptionCode)
Funktion
mortAssumptionCode = 3
F1 4cfed767 6273360 2e11476d 67d95a62 0 0 2
-- AccountDebitCreditType Equates --
Funktion

F1 2e11476d 4cfed767 0 26934893 0 0 2
AccountDebitCreditType is Credit(account_type)
Funktion
STRICMP(account_type;"1") = 0
F1 26934893 4cfed767 0 0 0 0 2
AccountDebitCreditType is Debit(account_type)
Funktion
STRICMP(account_type;"2") = 0
F1 67d95a62 6273360 ace8f89 6c023157 0 0 2
-- Additional Rider ClassIFication Equates --
Funktion

F1 ace8f89 67d95a62 0 7656a820 0 0 2
AdditionalRiderClassification RiderSubTypeCode is Greater Of(ridersubtypecode)
Funktion
ridersubtypecode EQUAL "1000500028"
F1 7656a820 67d95a62 0 4de4f57f 0 0 2
AdditionalRiderClassification RiderSubTypeCode is Growth(ridersubtypecode)
Funktion
ridersubtypecode EQUAL "1000500003"
F1 4de4f57f 67d95a62 0 0 0 0 2
AdditionalRiderClassification RiderSubTypeCode is Step up(ridersubtypecode)
Funktion
ridersubtypecode EQUAL "1000500004"
F1 6c023157 6273360 3452af88 10f558a0 0 0 2
-- AmountType Equates --
Funktion

F1 3452af88 6c023157 0 5f7206bc 0 0 2
AmountType Is Net(amt_type)
Funktion
amt_type = 1
F1 5f7206bc 6c023157 0 0 0 0 2
AmountType Is Gross(amt_type)
Funktion
amt_type = 2
F1 10f558a0 6273360 cdd1ffa 4eb1d3b9 0 0 2
-- ArrType Equates --
Funktion

F1 cdd1ffa 10f558a0 0 698a99a4 0 0 2
ArrType Is Transfer(arr_type)
Funktion
arr_type = 1
F1 698a99a4 10f558a0 72513c4 2d496007 0 0 2
ArrType Is Grouped Rebalance(arrType)
Funktion
'ArrType Is Rebalance'(arrtype) || 'ArrType Is Standing Allocation'(arrtype)
F1 72513c4 698a99a4 0 505bfdac 0 0 2
ArrType Is Rebalance(arr_type)
Funktion
arr_type = 3
F1 505bfdac 698a99a4 0 0 0 0 2
ArrType Is Standing Allocation(arr_type)
Funktion
arr_type = 37
F1 2d496007 10f558a0 0 e421db5 0 0 2
ArrType Is NetWithdrawal(arr_type)
Funktion
arr_type = 7
F1 e421db5 10f558a0 0 3b888d06 0 0 2
ArrType Is NetWithdrawal SurrChg Only(arr_type)
Funktion
arr_type EQUAL "1000500007"
F1 3b888d06 10f558a0 28d1cb6e 29d9a07a 0 0 2
ArrType is Grouped GrossWithdrawal(arr_Type)
Funktion
'ArrType is GrossWithdrawal'(arr_Type) || 'ArrType is FullSurrender'(arr_Type) || 'ArrType is FullAnnuitization'(arr_Type) || 'ArrType is PartialAnnuitization'(arr_Type)
F1 28d1cb6e 3b888d06 0 0 0 0 2
ArrType Desc is Grouped GrossWithdrawal(mappedArrType)
Funktion
mappedArrType ALIKE "FULL_SURRENDER" || mappedArrType ALIKE "PARTIAL_GROSS" || mappedArrType ALIKE "FULL_ANNUITIZATION" || mappedArrType ALIKE "PARTIAL_ANNUITIZATION" || mappedArrType ALIKE "DEATH_CLAIM"
F1 29d9a07a 10f558a0 0 6344cfa6 0 0 2
ArrType is Grouped Withdrawal(arr_Type)
Funktion
'ArrType is GrossWithdrawal'(arr_Type) || 'ArrType is NetWithdrawal'(arr_Type) || 'ArrType is FullSurrender'(arr_Type) || 'ArrType Is MaximumWithdrawal'(arr_type) || 'ArrType Is SurrenderFreeAmountWithdrawal'(arr_type) || 'ArrType Is Systematic Withdrawal'(arr_type) || 'ArrType Is One Time Withdrawal'(arr_type)
F1 6344cfa6 10f558a0 0 86b1e29 0 0 2
ArrType Is GrossWithdrawal(arr_type)
Funktion
arr_type = 8
F1 86b1e29 10f558a0 0 5ca3cbe7 0 0 2
ArrType Is MaximumWithdrawal(arr_type)
Funktion
arr_type = 17
F1 5ca3cbe7 10f558a0 0 57d37098 0 0 2
ArrType Is FullSurrender(arr_type)
Funktion
arr_type = 31
F1 57d37098 10f558a0 0 2a8f21d5 0 0 2
ArrType Is FullAnnuitization(arr_type)
Funktion
arr_type EQUAL "1000500007" //arr_type = 1000500008ä
F1 2a8f21d5 10f558a0 0 7385bb8e 0 0 2
ArrType Is PartialAnnuitization(arr_type)
Funktion
arr_type EQUAL "1000500001" //arr_type = 1000500009ä
F1 7385bb8e 10f558a0 0 b7d375b 0 0 2
ArrType Is Loans(arr_type)
Funktion
arr_type = 50
F1 b7d375b 10f558a0 0 36c5706b 0 0 2
ArrType Is Cancellation(arr_type)
Funktion
arr_type EQUAL "1000500003"
F1 36c5706b 10f558a0 0 7385038b 0 0 2
ArrType Is SurrenderFreeAmountWithdrawal(arr_type)
Funktion
arr_type = 9
F1 7385038b 10f558a0 0 753cdf66 0 0 2
ArrType Is Systematic Withdrawal(arr_type)
Funktion
arr_type = 38
F1 753cdf66 10f558a0 0 541a8713 0 0 2
ArrType Is One Time Withdrawal(arr_type)
Funktion
arr_type = 58
F1 541a8713 10f558a0 0 2234e8b 0 0 2
ArrType AmtQualifier is Net
Funktion
'Policy Arrangement AmountQualifier' = 1
F1 2234e8b 10f558a0 0 66ecd787 0 0 2
ArrType AmtQualifier is Gross(arr_type)
Funktion
'Policy Arrangement AmountQualifier' = 2 || 'ArrType is FullSurrender'(arr_type) || 'ArrType is FullAnnuitization'(arr_type) || 'ArrType is PartialAnnuitization'(arr_type)
F1 66ecd787 10f558a0 0 0 0 0 2
ArrType AmtQualifier is Net SurrChg Only
Funktion
'Policy Arrangement AmountQualifier' EQUAL "1000500006"
F1 4eb1d3b9 6273360 11496ea1 2043e6a5 0 0 2
-- AssetClass Functions --
Funktion

F1 11496ea1 4eb1d3b9 0 65ad0ea7 0 0 2
AssetClass Is Equity(asset_class)
Funktion
asset_class = 2
F1 65ad0ea7 4eb1d3b9 0 4ad1985 0 0 2
AssetClass Is Fixed(asset_class)
Funktion
asset_class = 1
F1 4ad1985 4eb1d3b9 0 0 0 0 2
AssetClass Is EquityIndexFund(asset_class)
Funktion
asset_class = 9
F1 2043e6a5 6273360 5269c771 dd5bdb4 0 0 2
-- Investment Types
Funktion

F1 5269c771 2043e6a5 0 2a6b264 0 0 2
Investment Rate Type Is Portfolio(investRateType)
Funktion
investRateType = 11
F1 2a6b264 2043e6a5 0 1ee4ca7b 0 0 2
Investment Rate Type Is InvestmentPeriod(investRateType)
Funktion
investRateType = 12
F1 1ee4ca7b 2043e6a5 0 256c0919 0 0 2
Investment Rate SubType Is CalendarPeriod(investRateSubType)
Funktion
investRateSubType EQUAL "1000500001"
F1 256c0919 2043e6a5 4d9d2c80 0 0 0 2
Investment Rate SubType Is Tiered(investRateSubType)
Funktion
'Investment Rate SubType Is TieredInterest'(investRateSubType) || 'Investment Rate SubType Is TieredDuration'(investRateSubType)
F1 4d9d2c80 256c0919 0 583b651 0 0 2
Investment Rate SubType Is TieredDuration(investRateSubType)
Funktion
investRateSubType EQUAL "1000500007"
F1 583b651 256c0919 0 0 0 0 2
Investment Rate SubType Is TieredInterest(investRateSubType)
Funktion
investRateSubType EQUAL "1000500010"
F1 dd5bdb4 6273360 16db329d 16c39a82 0 0 2
-- Coverage Type Functions --
Funktion

F1 16db329d dd5bdb4 0 a9b5c6b 0 0 2
Coverage Type is BIR(calcType; coverageIndex)
Funktion
'IndicatorCode is Integrated'('Policy Coverage IndicatorCode'(calcType;coverageIndex)) && 'LifeCovType is BIR'('PI CoverageProduct LifeCovTypeCode'(calcType;'Policy Coverage ProductCode'(calcType;coverageIndex);coverageIndex;TransEffDate))
F1 a9b5c6b dd5bdb4 0 3b7eae4c 0 0 2
Coverage Type is Term Rider(calcType; coverageIndex)
Funktion
'IndicatorCode is Rider'('Policy Coverage IndicatorCode'(calcType;coverageIndex)) && ('LifeCovType is CTR'('PI CoverageProduct LifeCovTypeCode'(calcType;'Policy Coverage ProductCode'(calcType;coverageIndex);coverageIndex;TransEffDate)) || 'LifeCovType is LevelTerm'('PI CoverageProduct LifeCovTypeCode'(calcType;'Policy Coverage ProductCode'(calcType;coverageIndex);coverageIndex;TransEffDate)) || 'LifeCovType is AIR'('PI CoverageProduct LifeCovTypeCode'(calcType;'Policy Coverage ProductCode'(calcType;coverageIndex);coverageIndex;TransEffDate)))
F1 3b7eae4c dd5bdb4 0 151a004c 0 0 2
Coverage Type is Child Term Rider(calcType; coverageIndex)
Funktion
'IndicatorCode is Rider'('Policy Coverage IndicatorCode'(calcType;coverageIndex)) && 'LifeCovType is CTR'('PI CoverageProduct LifeCovTypeCode'(calcType;'Policy Coverage ProductCode'(calcType;coverageIndex);coverageIndex;TransEffDate))
F1 151a004c dd5bdb4 0 0 0 0 2
Coverage Type is Whole Life(calcType; coverageIndex)
Funktion
'IndicatorCode is Base'('Policy Coverage IndicatorCode'(calcType;coverageIndex)) && 'LifeCovType is Whole Life'('PI CoverageProduct LifeCovTypeCode'(calcType;'Policy Coverage ProductCode'(calcType;coverageIndex);coverageIndex;TransEffDate))
F1 16c39a82 6273360 5776d43a 233bade5 0 0 2
-- DeathBenefitOptType Equates --
Funktion

F1 5776d43a 16c39a82 0 21e3c423 0 0 2
DeathBenefitOptType Is Level(db_opt)
Funktion
db_opt = 1
F1 21e3c423 16c39a82 0 34ace2fc 0 0 2
DeathBenefitOptType Is Increasing(db_opt)
Funktion
db_opt = 2
F1 34ace2fc 16c39a82 0 0 0 0 2
DeathBenefitOptType Is IncreasingROP(db_opt)
Funktion
db_opt = 3
F1 233bade5 6273360 dd5d73 3b694955 0 0 2
-- DefLifeInsMethod Equates --
Funktion

F1 dd5d73 233bade5 0 70ce0383 0 0 2
DefLifeInsMethod is CVAT(DefLifeInsMethod)
Funktion
DefLifeInsMethod = 2 || DefLifeInsMethod = 5
F1 70ce0383 233bade5 0 0 0 0 2
DefLifeInsMethod is Guideline(DefLifeInsMethod)
Funktion
DefLifeInsMethod = 1 || DefLifeInsMethod = 4
F1 3b694955 6273360 3bc02499 215a9699 0 0 2
-- Disbursement Solve Design Type Equates --
Funktion

F1 3bc02499 3b694955 0 1272938a 0 0 2
Disbursement Option is Solve for Level Amount(DisbSolveDesignType)
Funktion
DisbSolveDesignType EQUAL "1000500001"
F1 1272938a 3b694955 0 1a1165fb 0 0 2
Disbursement Option is Solve for Max Withdrawal(DisbSolveDesignType)
Funktion
DisbSolveDesignType EQUAL "1000500002"
F1 1a1165fb 3b694955 0 69183039 0 0 2
Disbursement Option is Max Pref Loan Amount(DisbSolveDesignType)
Funktion
DisbSolveDesignType EQUAL "1000500003"
F1 69183039 3b694955 0 6f733d87 0 0 2
Disbursement Option is Earnings Only Withdrawals(DisbSolveDesignType)
Funktion
DisbSolveDesignType EQUAL "1000500004"
F1 6f733d87 3b694955 0 348c4c68 0 0 2
Disbursement Option is Free Withdrawals(DisbSolveDesignType)
Funktion
DisbSolveDesignType EQUAL "1000500005"
F1 348c4c68 3b694955 0 0 0 0 2
Disbursement Option is None(DisbSolveDesignType)
Funktion
DisbSolveDesignType EQUAL "1000500006"
F1 215a9699 6273360 53fab47e 3c08d974 0 0 2
-- DividendOption Equates --
Funktion

F1 53fab47e 215a9699 0 3c11fc8f 0 0 2
DivOption is AccumAtInt(DivType)
Funktion
DivType = 5
F1 3c11fc8f 215a9699 0 77b313ba 0 0 2
DivOption is Cash(DivType)
Funktion
DivType = 2
F1 77b313ba 215a9699 0 254e1b5a 0 0 2
DivOption is PUA(DivType)
Funktion
DivType = 3
F1 254e1b5a 215a9699 0 2c4476db 0 0 2
DivOption is RedPrem(DivType)
Funktion
DivType = 4
F1 2c4476db 215a9699 0 45a71aaa 0 0 2
DivOption is RedLoan(DivType)
Funktion
DivType = 11
F1 45a71aaa 215a9699 0 6734527c 0 0 2
DivOption is RedLoanBaltoCash(DivType)
Funktion
DivType = 15
F1 6734527c 215a9699 0 4d1f41dc 0 0 2
DivOption is RedLoanBaltoAccum(DivType)
Funktion
DivType = 17
F1 4d1f41dc 215a9699 0 31c3df2a 0 0 2
DivOption is RedLoanBaltoPUA(DivType)
Funktion
DivType = 16
F1 31c3df2a 215a9699 0 56f2e99 0 0 2
DivOption is RedPremBaltoCash(DivType)
Funktion
DivType = 7
F1 56f2e99 215a9699 0 360f99e0 0 0 2
DivOption is RedPremBaltoAccum(DivType)
Funktion
DivType = 9
F1 360f99e0 215a9699 0 50ebc5e8 0 0 2
DivOption is RedPremBaltoPUA(DivType)
Funktion
DivType = 8
F1 50ebc5e8 215a9699 0 734c1d99 0 0 2
DivOption is FullOneYearTerm(DivType)
Funktion
DivType = 6
F1 734c1d99 215a9699 0 705ac515 0 0 2
DivOption is Combination(DivType)
Funktion
DivType = 25
F1 705ac515 215a9699 0 555b9d5 0 0 2
DivOption is Unknown(DivType)
Funktion
DivType = 0
F1 555b9d5 215a9699 0 15a16afb 0 0 2
DivOption is Other(DivType)
Funktion
DivType = 2147483647
F1 15a16afb 215a9699 0 39e245e5 0 0 2
DivOption is None(DivType)
Funktion
DivType = 1 //IF(DivType = 1 /*2147483647*/; 1; 0)çä//VJ 9/11/2008 tempä
F1 39e245e5 215a9699 0 47d35365 0 0 2
DivOption is OYTBaltoAccum(DivType)
Funktion
DivType EQUAL "1000500003"
F1 47d35365 215a9699 0 3218cba5 0 0 2
DivOption is OYTBaltoCash(DivType)
Funktion
DivType EQUAL "1000500002"
F1 3218cba5 215a9699 0 57eb612 0 0 2
DivOption is OYTBaltoPUA(DivType)
Funktion
DivType EQUAL "1000500004"
F1 57eb612 215a9699 0 0 0 0 2
DivOption is OYTBaltoRedLoan(DivType)
Funktion
DivType EQUAL "1000500009"
F1 3c08d974 6273360 4b5316a3 f2e4609 0 0 2
-- DivOYTOptType Equates --
Funktion

F1 4b5316a3 3c08d974 0 480ce677 0 0 2
DivOYTOptType is FullDiv(DivOYTOptType)
Funktion
DivOYTOptType = 4
F1 480ce677 3c08d974 0 0 0 0 2
DivOYTOptType is GCV(DivOYTOptType)
Funktion
DivOYTOptType = 2
F1 f2e4609 6273360 6abcd85a 3f3a503d 0 0 2
-- DivType Equates --
Funktion

F1 6abcd85a f2e4609 0 7f72f67f 0 0 2
DivType is Cash(DivType)
Funktion
DivType = 2
F1 7f72f67f f2e4609 0 641c185b 0 0 2
DivType is PUA(DivType)
Funktion
DivType = 3
F1 641c185b f2e4609 0 d1d4126 0 0 2
DivType is ReducePremium(DivType)
Funktion
DivType = 4
F1 d1d4126 f2e4609 0 5e922759 0 0 2
DivType is AccumulateAtInterest(DivType)
Funktion
DivType = 5
F1 5e922759 f2e4609 0 50fcc466 0 0 2
DivType is OYT(DivType)
Funktion
DivType = 6
F1 50fcc466 f2e4609 0 0 0 0 2
DivType is ReduceLoan(DivType)
Funktion
DivType = 11
F1 3f3a503d 6273360 4be4bd60 5740d041 0 0 2
-- Equity Index CalcMethod equates --
Funktion

F1 4be4bd60 3f3a503d 0 66852573 0 0 2
CalcMethod is Point(calcType)
Funktion
calcType EQUAL "1000500001"
F1 66852573 3f3a503d 0 5598b4b9 0 0 2
CalcMethod is Average(calcType)
Funktion
calcType EQUAL "1000500002"
F1 5598b4b9 3f3a503d 0 170d2f58 0 0 2
CalcMethod is HighWaterMark(calcType)
Funktion
calcType EQUAL "1000500003"
F1 170d2f58 3f3a503d 0 0 0 0 2
CalcMethod is LockIn(CalcType)
Funktion
calcType EQUAL "1000500004"
F1 5740d041 6273360 34287941 1adc2b68 0 0 2
-- Face Amount Design Type Equates --
Funktion

F1 34287941 5740d041 0 7f1c0485 0 0 2
Face Amount Design Type Is None(FaceAmtDesignType)
Funktion
FaceAmtDesignType EQUAL "1000500001"
F1 7f1c0485 5740d041 0 7b669661 0 0 2
Face Amount Design Type Is Base Plus Rider(FaceAmtDesignType)
Funktion
FaceAmtDesignType EQUAL "1000500002"
F1 7b669661 5740d041 0 5cc50ee2 0 0 2
Face Amount Design Type Is Base(FaceAmtDesignType)
Funktion
FaceAmtDesignType EQUAL "1000500003"
F1 5cc50ee2 5740d041 0 715f8880 0 0 2
FaceAmountSolve Design Type is None(calcType)
Funktion
'Illus Face Amt Solve DesignType'(calcType) EQUAL "0" || 'Illus Face Amt Solve DesignType'(calcType) EQUAL "1000500001"
F1 715f8880 5740d041 0 7383f373 0 0 2
FaceAmountSolve MoneyPurchase Optimise(calcType)
Funktion
'Illus Face Amt Solve DesignType'(calcType) EQUAL "1013200006"
F1 7383f373 5740d041 0 0 0 0 2
Face Amount Design Type Is Stream(FaceAmtDesignType)
Funktion
FaceAmtDesignType EQUAL "1000500003"
F1 1adc2b68 6273360 bfa142e 5d7566ee 0 0 2
-- FeeType Equates --
Funktion

F1 bfa142e 1adc2b68 0 b8dd273 0 0 2
FeeType is PolicyFee(feeType)
Funktion
feeType = 1
F1 b8dd273 1adc2b68 0 28a53c8e 0 0 2
FeeType is CollectionFee(feeType)
Funktion
feeType = 10
F1 28a53c8e 1adc2b68 0 6a854c16 0 0 2
FeeType is PartialSurrenderCharge(feeType)
Funktion
feeType = 15
F1 6a854c16 1adc2b68 0 60a7b9bb 0 0 2
FeeType is FullSurrenderCharge(feeType)
Funktion
feeType = 16
F1 60a7b9bb 1adc2b68 0 32206699 0 0 2
FeeType is OtherAssetBasedCharge(feeType)
Funktion
feeType = 6
F1 32206699 1adc2b68 0 60f68b83 0 0 2
FeeType is RiderBased Charge(feeType)
Funktion
feeType = 6 || feeType = 33 || feeType = 50
F1 60f68b83 1adc2b68 0 514bc2ab 0 0 2
FeeType is PremiumLoad(feeType)
Funktion
feeType = 22
F1 514bc2ab 1adc2b68 0 0 0 0 2
FeeType is PremTaxSurr(feeType)
Funktion
feeType = 17
F1 5d7566ee 6273360 7b7d713 3d9a1736 0 0 2
-- FinActivityType Functions --
Funktion

F1 7b7d713 5d7566ee 9579d37 593435c6 0 0 2
-- FinActivityType Test Functions --
Funktion
//âSource:âOLIFE.Holding.Policy.FinancialActivity.FinActivityTypeçä çä//âLookup:âDeclared typecode values from ACORD XMLIFE lookup table OLI_LU_FINACTTYPEçä
F1 9579d37 7b7d713 0 625e0567 0 0 2
FinActivityType is Premium Payment(activity_type)
Funktion
activity_type = 1
F1 625e0567 7b7d713 0 bd3c56c 0 0 2
FinActivityType is Loan Payment(activity_type)
Funktion
activity_type = 2
F1 bd3c56c 7b7d713 0 4ef3ab23 0 0 2
FinActivityType is Gross Loan(activity_type)
Funktion
activity_type = 3
F1 4ef3ab23 7b7d713 0 2812b45c 0 0 2
FinActivityType is Net Withdrawal(activity_type)
Funktion
activity_type = 6
F1 2812b45c 7b7d713 0 1994cf10 0 0 2
FinActivityType is Net Withdrawal of Charges Only(activity_type)
Funktion
'FinActivityType is Partial Surrender'(activity_type)
F1 1994cf10 7b7d713 0 7f5aa11 0 0 2
FinActivityType is Net Withdrawal of Charges and Tax(activity_type)
Funktion
'FinActivityType is Net Withdrawal'(activity_type)
F1 7f5aa11 7b7d713 0 5f3b3993 0 0 2
FinActivityType is Gross Withdrawal(activity_type)
Funktion
'FinActivityType is Full Surrender'(activity_type) || 'FinActivityType is Specified Dollar Amt Withdrawal'(activity_type)
F1 5f3b3993 7b7d713 0 79d3d9bb 0 0 2
FinActivityType is Initial Payment(activity_type)
Funktion
activity_type = 7
F1 79d3d9bb 7b7d713 0 613ace17 0 0 2
FinActivityType is Additional Payment SPP(activity_type)
Funktion
activity_type = 9
F1 613ace17 7b7d713 0 28eb2598 0 0 2
FinActivityType is Full Surrender(activity_type)
Funktion
activity_type = 10
F1 28eb2598 7b7d713 0 33519a40 0 0 2
FinActivityType is Partial Surrender(activity_type)
Funktion
activity_type = 11
F1 33519a40 7b7d713 0 4c45f2fd 0 0 2
FinActivityType is Minimum Distribution(activity_type)
Funktion
activity_type = 102
F1 4c45f2fd 7b7d713 0 784edef0 0 0 2
FinActivityType is External Rollover(activity_type)
Funktion
activity_type = 192
F1 784edef0 7b7d713 0 4c5fac23 0 0 2
FinActivityType is Internal Rollover(activity_type)
Funktion
activity_type = 193
F1 4c5fac23 7b7d713 0 56bbadbc 0 0 2
FinActivityType is External Rollover Tax Qual(activity_type)
Funktion
activity_type = 194
F1 56bbadbc 7b7d713 0 6c273ba4 0 0 2
FinActivityType is External Rollover to Roth IRA(activity_type)
Funktion
activity_type = 195
F1 6c273ba4 7b7d713 0 8d64fb2 0 0 2
FinActivityType is External 1035(activity_type)
Funktion
activity_type = 196
F1 8d64fb2 7b7d713 0 4db0cbdb 0 0 2
FinActivityType is External 1035 Additional(activity_type)
Funktion
activity_type = 197
F1 4db0cbdb 7b7d713 0 5b3eeb61 0 0 2
FinActivityType is Internal Rollover to Roth IRA(activity_type)
Funktion
activity_type = 198
F1 5b3eeb61 7b7d713 0 3e82b020 0 0 2
FinActivityType is Initial 1035(activity_type)
Funktion
activity_type = 210
F1 3e82b020 7b7d713 0 204fdc80 0 0 2
FinActivityType is Additional 1035(activity_type)
Funktion
activity_type = 211
F1 204fdc80 7b7d713 0 5367d6e8 0 0 2
FinActivityType is Specified Dollar Amt Withdrawal(activity_type)
Funktion
activity_type = 294
F1 5367d6e8 7b7d713 0 6c367ca8 0 0 2
FinActivityType is SurrenderFree Amt Withdrawal(activity_type)
Funktion
activity_type = 295
F1 6c367ca8 7b7d713 0 1ee41603 0 0 2
FinActivityType is Interest Only Net Withdrawal(activity_type)
Funktion
activity_type = 296
F1 1ee41603 7b7d713 0 2f17003 0 0 2
FinActivityType is Interest Only Gross Withdrawal(activity_type)
Funktion
activity_type = 297
F1 2f17003 7b7d713 0 67bdda0a 0 0 2
FinActivityType is Required Minimum Distribution Withdrawal(activity_type)
Funktion
activity_type = 298
F1 67bdda0a 7b7d713 0 6ace39bb 0 0 2
FinActivityType is Single and TopUp Premiums(activity_type)
Funktion
activity_type = 351
F1 6ace39bb 7b7d713 0 7ceb960 0 0 2
FinActivityType is Administration Fee(activity_type)
Funktion
activity_type = 14
F1 7ceb960 7b7d713 0 3e065dfe 0 0 2
FinActivityType is Loan Payment From Dividends(activity_type)
Funktion
activity_type = 246
F1 3e065dfe 7b7d713 0 25edcad4 0 0 2
FinActivityType is Accumulation Dividend Option(activity_type)
Funktion
activity_type = 244
F1 25edcad4 7b7d713 0 18e7a4b8 0 0 2
FinActivityType is Cash From Dividends(activity_type)
Funktion
activity_type = 241
F1 18e7a4b8 7b7d713 0 3b756af1 0 0 2
FinActivityType is Monthlycharge(activity_type)
Funktion
activity_type = 320
F1 3b756af1 7b7d713 0 1ee72181 0 0 2
FinActivityType is Claim Payment(activity_type)
Funktion
activity_type = 5
F1 1ee72181 7b7d713 0 6ba88ca5 0 0 2
FinActivityType is Dividends Purchase Paid Up Additions(activity_type)
Funktion
activity_type = 242
F1 6ba88ca5 7b7d713 0 2c140a69 0 0 2
FinActivityType is Pay Premium From Dividends(activity_type)
Funktion
activity_type = 243
F1 2c140a69 7b7d713 0 1b80d468 0 0 2
FinActivityType is Purchase Term Dividend Option(activity_type)
Funktion
activity_type = 245
F1 1b80d468 7b7d713 0 69ca7cde 0 0 2
FinActivityType is Tax on Surrenders(activity_type)
Funktion
activity_type = 360
F1 69ca7cde 7b7d713 0 73cd8559 0 0 2
FinActivityType is Annuitization Account Value Adjustment Increase(activity_type)
Funktion
activity_type EQUAL "1000500007" //IF(activity_type = 1000500007;çä//â1;â//Return "true"çä//â0â//Return "false"çä//)çä
F1 73cd8559 7b7d713 0 7bc790de 0 0 2
FinActivityType is Automatic Premium Loan(activity_type)
Funktion
activity_type = 301 //IF(activity_type = 301;çä//â1;â//Return "true"çä//â0â//Return "false"çä//)çä
F1 7bc790de 7b7d713 0 32701f3d 0 0 2
FinActivityType is Capitalized Advance Loan Interest(activity_type)
Funktion
activity_type = 306 //IF(activity_type = 306;çä//â1;â//Return "true"çä//â0â//Return "false"çä//)çä
F1 32701f3d 7b7d713 0 4f081cc4 0 0 2
FinActivityType is Capitalized Arrears Loan Interest(activity_type)
Funktion
activity_type = 307
F1 4f081cc4 7b7d713 0 58886938 0 0 2
FinActivityType is Conversion ETI(activity_type)
Funktion
activity_type = 267
F1 58886938 7b7d713 0 14d472d4 0 0 2
FinActivityType is Conversion Fully Paid Up(activity_type)
Funktion
activity_type = 336
F1 14d472d4 7b7d713 0 687b4ddb 0 0 2
FinActivityType is Conversion RPU(activity_type)
Funktion
activity_type = 269
F1 687b4ddb 7b7d713 0 336271ba 0 0 2
FinActivityType is Conversion Surrender(activity_type)
Funktion
activity_type = 283
F1 336271ba 7b7d713 0 199e33bc 0 0 2
FinActivityType is Current Value Adjust for Payments and Surrenders(activity_type)
Funktion
activity_type EQUAL "1000500006"
F1 199e33bc 7b7d713 0 3edc6d83 0 0 2
FinActivityType is Death Claim Other Insured(activity_type)
Funktion
activity_type EQUAL "1000500047"
F1 3edc6d83 7b7d713 0 593de0bf 0 0 2
FinActivityType is Earned Dividend Cash(activity_type)
Funktion
activity_type = 4
F1 593de0bf 7b7d713 0 41c964e3 0 0 2
FinActivityType is Earned Dividend Deposit(activity_type)
Funktion
activity_type = 244
F1 41c964e3 7b7d713 0 1df0b2e2 0 0 2
FinActivityType is Earned Dividend Loan Reduction(activity_type)
Funktion
activity_type = 246
F1 1df0b2e2 7b7d713 0 4f32b89e 0 0 2
FinActivityType is Earned Dividend RPU OYT(activity_type)
Funktion
activity_type EQUAL "1000500023"
F1 4f32b89e 7b7d713 0 5e1947e7 0 0 2
FinActivityType is Earned Dividend RPU PUA(activity_type)
Funktion
activity_type EQUAL "1000500022"
F1 5e1947e7 7b7d713 0 1501828f 0 0 2
FinActivityType is Expiry(activity_type)
Funktion
activity_type EQUAL "1000500049"
F1 1501828f 7b7d713 0 281a5d3f 0 0 2
FinActivityType is Initial Internal Rollover Premium(activity_type)
Funktion
activity_type EQUAL "1000500003"
F1 281a5d3f 7b7d713 0 4e7def5e 0 0 2
FinActivityType is Lapse Daily Cost(activity_type)
Funktion
activity_type = 270
F1 4e7def5e 7b7d713 0 f654701 0 0 2
FinActivityType is Lapse(activity_type)
Funktion
activity_type EQUAL "1000500048"
F1 f654701 7b7d713 0 65696089 0 0 2
FinActivityType is Loan Interest Payment(activity_type)
Funktion
activity_type = 254
F1 65696089 7b7d713 0 3d3eb8c3 0 0 2
FinActivityType is Payment by Premium Waiver(activity_type)
Funktion
activity_type = 378
F1 3d3eb8c3 7b7d713 0 75c40638 0 0 2
FinActivityType is Death Claim(activity_type)
Funktion
activity_type EQUAL "23"
F1 75c40638 7b7d713 0 27bd3e7c 0 0 2
FinActivityType is Discounted Premium Fund(activity_type)
Funktion
activity_type = 250
F1 27bd3e7c 7b7d713 0 7c77beca 0 0 2
FinActivityType is Dividend Payment(activity_type)
Funktion
activity_type = 259
F1 7c77beca 7b7d713 0 7c2772af 0 0 2
FinActivityType is Earned Dividend OYT Limited CV(activity_type)
Funktion
activity_type = 260
F1 7c2772af 7b7d713 0 5a468085 0 0 2
FinActivityType is Earned Dividend OYT(activity_type)
Funktion
activity_type = 245
F1 5a468085 7b7d713 0 23a793d3 0 0 2
FinActivityType is Earned Dividend PUA(activity_type)
Funktion
activity_type = 242
F1 23a793d3 7b7d713 0 78742927 0 0 2
FinActivityType is Earned Dividend Premium Reduction(activity_type)
Funktion
activity_type = 243
F1 78742927 7b7d713 0 48ac2d3b 0 0 2
FinActivityType is Earned Dividend RPU Deposit(activity_type)
Funktion
activity_type EQUAL "1000500021"
F1 48ac2d3b 7b7d713 0 4e73ff9e 0 0 2
FinActivityType is Earned Dividend RPU OYT Limited CV(activity_type)
Funktion
activity_type EQUAL "1000500024"
F1 4e73ff9e 7b7d713 0 6f6e48da 0 0 2
FinActivityType is Earned Other Cash(activity_type)
Funktion
activity_type EQUAL "1000500030"
F1 6f6e48da 7b7d713 0 7aef7f39 0 0 2
FinActivityType is Earned Other Deposit(activity_type)
Funktion
activity_type EQUAL "1000500032"
F1 7aef7f39 7b7d713 0 7b8fa7a5 0 0 2
FinActivityType is Earned Other OYT Limited CV(activity_type)
Funktion
activity_type EQUAL "1000500035"
F1 7b8fa7a5 7b7d713 0 16790ba1 0 0 2
FinActivityType is Earned Other OYT(activity_type)
Funktion
activity_type EQUAL "1000500034"
F1 16790ba1 7b7d713 0 3f1472a6 0 0 2
FinActivityType is Earned Other PUA(activity_type)
Funktion
activity_type EQUAL "1000500033"
F1 3f1472a6 7b7d713 0 16b137da 0 0 2
FinActivityType is Earned Other Premium Reduction(activity_type)
Funktion
activity_type EQUAL "1000500031"
F1 16b137da 7b7d713 0 2f294958 0 0 2
FinActivityType is Earned Other RPU Deposit(activity_type)
Funktion
activity_type EQUAL "1000500036"
F1 2f294958 7b7d713 0 6b29f3ec 0 0 2
FinActivityType is Excess Accumulation Payment(activity_type)
Funktion
activity_type EQUAL "1000500004"
F1 6b29f3ec 7b7d713 0 45030f08 0 0 2
FinActivityType is Loan Payoff(activity_type)
Funktion
activity_type = 251
F1 45030f08 7b7d713 0 33ae09d1 0 0 2
FinActivityType is Maturity(activity_type)
Funktion
activity_type = 268
F1 33ae09d1 7b7d713 0 6a6be09a 0 0 2
FinActivityType is TSA Home Loan(activity_type)
Funktion
activity_type = 302
F1 6a6be09a 7b7d713 0 2b1df684 0 0 2
FinActivityType is Max Loan(activity_type)
Funktion
activity_type = 305
F1 2b1df684 7b7d713 0 6e4bd08e 0 0 2
FinActivityType is Net Loan(activity_type)
Funktion
activity_type = 300
F1 6e4bd08e 7b7d713 0 55d2d1b5 0 0 2
FinActivityType is Preferred Loan(activity_type)
Funktion
activity_type = 299
F1 55d2d1b5 7b7d713 0 589deebc 0 0 2
FinActivityType is Premium Deposit Fund(activity_type)
Funktion
activity_type = 249
F1 589deebc 7b7d713 0 2c1aae6a 0 0 2
FinActivityType is Premium Payment by APL(activity_type)
Funktion
activity_type EQUAL "1000500082"
F1 2c1aae6a 7b7d713 0 460de3ac 0 0 2
FinActivityType is Premium Tax Calculation Payment(activity_type)
Funktion
activity_type EQUAL "1000500005"
F1 460de3ac 7b7d713 0 7ce54f41 0 0 2
FinActivityType is Reinstatement Premium(activity_type)
Funktion
activity_type = 248
F1 7ce54f41 7b7d713 0 4c10a1d6 0 0 2
FinActivityType is TSA Non Home Loan(activity_type)
Funktion
activity_type = 303
F1 4c10a1d6 7b7d713 0 1906d6c8 0 0 2
FinActivityType is Annual Fee(activity_type)
Funktion
activity_type = 15
F1 1906d6c8 7b7d713 0 33c174be 0 0 2
FinActivityType is CalYrExpharge(activity_type)
Funktion
activity_type = 322
F1 33c174be 7b7d713 0 c0d8062 0 0 2
FinActivityType is ChargeAdjustment(activity_type)
Funktion
activity_type = 319
F1 c0d8062 7b7d713 0 16e5ef19 0 0 2
FinActivityType is ChargeDeduction(activity_type)
Funktion
activity_type = 321
F1 16e5ef19 7b7d713 0 2e1dbf8a 0 0 2
FinActivityType is PremiumCharge(activity_type)
Funktion
activity_type = 359
F1 2e1dbf8a 7b7d713 0 31703cf8 0 0 2
FinActivityType is SurrenderCharge(activity_type)
Funktion
activity_type = 323
F1 31703cf8 7b7d713 0 14f2a551 0 0 2
FinActivityType is Systematic Withdrawal(activity_type)
Funktion
activity_type = 101
F1 14f2a551 7b7d713 0 2550fdca 0 0 2
FinActivityType is Cash with Application(activity_type)
Funktion
activity_type = 170
F1 2550fdca 7b7d713 0 0 0 0 2
FinActivityType is Annuitization(activity_type)
Funktion
activity_type = 100
F1 593435c6 5d7566ee 55521aa6 5818a4e0 0 0 2
--Readability SubAccounts
Funktion

F1 55521aa6 593435c6 0 0 0 0 2
--FinActivityType is Annuitization(fundIndex; financialActivityIndex)
Funktion
'Policy SubAccount FinancialActivity FinActivityType'(fundIndex; financialActivityIndex)=100çä
F1 5818a4e0 5d7566ee 505b7e80 229a4dc3 0 0 2
-- FinActivityType Grouped Test Functions --
Funktion

F1 505b7e80 5818a4e0 0 6604ceeb 0 0 2
FinActivityType is Grouped Premium Payment(activity_type)
Funktion
CASE(activity_type;çä  1;7;170;192..198;210;211;230 : 1;çä   : 0)çä
F1 6604ceeb 5818a4e0 0 3c0e62db 0 0 2
FinActivityType is Grouped Partial Surrender(activity_type)
Funktion
IF ('Std Calling System Is V1 or WMA' ; çä  CASE(activity_type;çä    6;11;101;102;287;289;294..298;327..330;333;343;367;368;369 : 1;çä     : 0)çä   ; çä  CASE(activity_type;çä    6;11;101;102;287;289;294..298;327..330;333;343;367;368 : 1;çä     : 0)çäçä)
F1 3c0e62db 5818a4e0 0 2b2e8a48 0 0 2
FinActivityType Is Grouped Loan(activity_type)
Funktion
CASE(activity_type;çä  3;229;299;300;301;302;303;305;306;307;2;226;246;251;254;316 : 1;çä   : 0)çä
F1 2b2e8a48 5818a4e0 0 68d4877b 0 0 2
FinActivityType is Loan Repayment(activity_type)
Funktion
CASE(activity_type;çä  2;226;246;251;254;316 : 1;çä   : 0)çä
F1 68d4877b 5818a4e0 0 39e42521 0 0 2
FinActivityType is Loan Taken(activity_type)
Funktion
CASE(activity_type;çä  3;229;299;300;301;305;306;307 : 1;çä   : 0)çä
F1 39e42521 5818a4e0 0 52c97fec 0 0 2
FinActivityType is Taxable Dividend Option(activity_type)
Funktion
CASE(activity_type;çä  241;244;246 : 1;çä   : 0)çä
F1 52c97fec 5818a4e0 0 112767b9 0 0 2
FinActivityType Is Grouped Earned Dividend RPU(activity_type)
Funktion
'FinActivityType is Earned Dividend RPU Deposit'(activity_type) /* 1000500021 */  || 'FinActivityType is Earned Dividend RPU PUA'(activity_type) /* 1000500022 */  || 'FinActivityType is Earned Dividend RPU OYT'(activity_type) /* 1000500023 */  || 'FinActivityType is Earned Dividend RPU OYT Limited CV'(activity_type) /* 1000500024 */ 
F1 112767b9 5818a4e0 0 6f0c33ed 0 0 2
FinActivityType Is Grouped Earned Dividend(activity_type)
Funktion
'FinActivityType is Earned Dividend Cash'(activity_type) //   4çä || 'FinActivityType is Earned Dividend Premium Reduction'(activity_type) // 243çä || 'FinActivityType is Earned Dividend Deposit'(activity_type) // 244çä || 'FinActivityType is Earned Dividend PUA'(activity_type) // 242çä || 'FinActivityType is Earned Dividend OYT'(activity_type) // 245çä || 'FinActivityType is Earned Dividend OYT Limited CV'(activity_type) // 260çä || 'FinActivityType is Earned Dividend Loan Reduction'(activity_type) // 246ä
F1 6f0c33ed 5818a4e0 0 31d723bb 0 0 2
FinActivityType Is Grouped Earned Other RPU(activity_type)
Funktion
'FinActivityType is Earned Other RPU Deposit'(activity_type) /* 1000500036 */ 
F1 31d723bb 5818a4e0 0 321cedad 0 0 2
FinActivityType Is Grouped Earned Other(activity_type)
Funktion
'FinActivityType is Earned Other Cash'(activity_type) /* 1000500030 */  || 'FinActivityType is Earned Other Premium Reduction'(activity_type) /* 1000500031 */  || 'FinActivityType is Earned Other Deposit'(activity_type) /* 1000500032 */  || 'FinActivityType is Earned Other PUA'(activity_type) /* 1000500033 */  || 'FinActivityType is Earned Other OYT'(activity_type) /* 1000500034 */  || 'FinActivityType is Earned Other OYT Limited CV'(activity_type) /* 1000500035 */ 
F1 321cedad 5818a4e0 0 3c748898 0 0 2
FinActivityType Is Grouped Termination(activity_type)
Funktion
'FinActivityType is Death Claim'(activity_type) /*         23 */  || 'FinActivityType is Conversion ETI'(activity_type) /*        267 */  || 'FinActivityType is Maturity'(activity_type) /*        268 */  || 'FinActivityType is Conversion RPU'(activity_type) /*        269 */  || 'FinActivityType is Lapse Daily Cost'(activity_type) /*        270 */  || 'FinActivityType is Death Claim Other Insured'(activity_type) /* 1000500047 */  || 'FinActivityType is Lapse'(activity_type) /* 1000500048 */  || 'FinActivityType is Expiry'(activity_type) /* 1000500049 */  || 'FinActivityType is Conversion Fully Paid Up'(activity_type) /*        336 */ 
F1 3c748898 5818a4e0 0 4ad041af 0 0 2
FinActivityType is Grouped All Premium Payment(activity_type)
Funktion
'FinActivityType is Premium Payment'(activity_type) //          1 //çä || 'FinActivityType is Initial Payment'(activity_type) //          7 //çä || 'FinActivityType is External Rollover'(activity_type) //        192 //çä || 'FinActivityType is Internal Rollover'(activity_type) //        193 //çä || 'FinActivityType is External Rollover Tax Qual'(activity_type) //        194 //çä || 'FinActivityType is External Rollover to Roth IRA'(activity_type) //        195 //çä || 'FinActivityType is External 1035'(activity_type) //        196 //çä || 'FinActivityType is External 1035 Additional'(activity_type) //        197 //çä || 'FinActivityType is Internal Rollover to Roth IRA'(activity_type) //        198 //çä || 'FinActivityType is Initial 1035'(activity_type) //        210 //çä || 'FinActivityType is Additional 1035'(activity_type) //        211 //çä || 'FinActivityType is Reinstatement Premium'(activity_type) //        248 //çä || 'FinActivityType is Premium Deposit Fund'(activity_type) //        249 //çä || 'FinActivityType is Discounted Premium Fund'(activity_type) //        250 //çä || 'FinActivityType is Initial Internal Rollover Premium'(activity_type) // 1000500003 //çä || 'FinActivityType is Dividend Payment'(activity_type) //        259 //çä || 'FinActivityType is Premium Payment By APL'(activity_type) // 1000500082 //çä || 'FinActivityType is Payment by Premium Waiver'(activity_type) //        378 //çä
F1 4ad041af 5818a4e0 0 24a8a916 0 0 2
FinActivityType Is Withdrawal(activity_type)
Funktion
'FinActivityType is Net Withdrawal'(activity_type) // activitytype = 6çä || 'FinActivityType is Full Surrender'(activity_type) // activitytype = 10çä || 'FinActivityType is Partial Surrender'(activity_type) // activitytype = 11çä || 'FinActivityType is Minimum Distribution'(activity_type) // activitytype = 102çä || 'FinActivityType is Specified Dollar Amt Withdrawal'(activity_type) // activitytype = 294çä || 'FinActivityType is SurrenderFree Amt Withdrawal'(activity_type) // activitytype = 295çä || 'FinActivityType is Interest Only Net Withdrawal'(activity_type) // activitytype = 296çä || 'FinActivityType is Interest Only Gross Withdrawal'(activity_type) // activitytype = 297çä || 'FinActivityType is Required Minimum Distribution Withdrawal'(activity_type) // activitytype = 298çä || 'FinActivityType is Systematic Withdrawal'(activity_type) // activitytype = 101çä || 'FinActivityType is Death Claim'(activity_type) //âactivitytype = 23 çä || 'FinActivityType is Annuitization'(activity_type) //   activitytype = 100ä
F1 24a8a916 5818a4e0 0 0 0 0 2
FinActivityType is Grouped All Charges(activity_type)
Funktion
'FinActivityType is Administration Fee'(activity_type) //14çä || 'FinActivityType is Annual Fee'(activity_type) //15çä || 'FinActivityType is ChargeAdjustment'(activity_type) //319çä || 'FinActivityType is Monthlycharge'(activity_type) //320çä || 'FinActivityType is ChargeDeduction'(activity_type) //321çä || 'FinActivityType is CalYrExpharge'(activity_type) //322çä || 'FinActivityType is SurrenderCharge'(activity_type) //323çä || 'FinActivityType is PremiumCharge'(activity_type) //359ä
F1 229a4dc3 5d7566ee 0 69b3cf45 0 0 2
FinActivityType is Annuity Rider Payment(activity_type)
Funktion
activity_type = 252
F1 69b3cf45 5d7566ee 0 2651f520 0 0 2
FinActivityType is Refund of Premium(activity_type)
Funktion
activity_type = 257
F1 2651f520 5d7566ee 0 5a229910 0 0 2
FinActType is Interest Credited on Death Claim(activity_type)
Funktion
activity_type EQUAL 312
F1 5a229910 5d7566ee 0 433e5c37 0 0 2
FinActivityType is Cancellation(activity_type)
Funktion
activity_type = 19
F1 433e5c37 5d7566ee 0 230c4d1c 0 0 2
FinActType is Accumulated Dividend Interest(activity_type)
Funktion
activity_type EQUAL 262
F1 230c4d1c 5d7566ee 0 346d540f 0 0 2
FinActType is ExchangeFrom(activity_type)
Funktion
activity_type EQUAL "1000500071"
F1 346d540f 5d7566ee 0 746e4661 0 0 2
FinActType is ExchangeTo(activity_type)
Funktion
activity_type EQUAL "1000500072"
F1 746e4661 5d7566ee 0 0 0 0 2
FinActType is PremiumBonus(activity_type)
Funktion
activity_type EQUAL "390"
F1 3d9a1736 6273360 1b5ab5ca 7e90947d 0 0 2
-- Gender --
Funktion

F1 1b5ab5ca 3d9a1736 0 75836ca2 0 0 2
Gender is Male(gender)
Funktion
gender = 1
F1 75836ca2 3d9a1736 0 0 0 0 2
Gender is Female(gender)
Funktion
gender = 2
F1 7e90947d 6273360 219a2583 49eed9d0 0 0 2
-- GracePeriodEntryType Equates --
Funktion

F1 219a2583 7e90947d 0 0 0 0 2
GracePeriodEntryType is SV LT Zero(GracePeriodEntryType)
Funktion
GracePeriodEntryType = 6
F1 49eed9d0 6273360 78dfacee 6afff753 0 0 2
-- HoldStat Equates --
Funktion

F1 78dfacee 49eed9d0 0 0 0 0 2
HoldStat Is Active(hold_stat)
Funktion
hold_stat = 1
F1 6afff753 6273360 7729023e 62c59859 0 0 2
-- Illustration Transaction Type Equates --
Funktion

F1 7729023e 6afff753 0 5d74f699 0 0 2
IllustrationTxn is PmtSchedule(IllusTxnPrimType)
Funktion
IllusTxnPrimType = 3
F1 5d74f699 6afff753 0 0 0 0 2
IllustrationTxn is DividendOption(IllusTxnPrimType)
Funktion
IllusTxnPrimType = 16
F1 62c59859 6273360 5df7ce84 7be69f75 0 0 2
-- Illustration Interest RateType
Funktion

F1 5df7ce84 62c59859 0 65d4afd0 0 0 2
Interest RateType is Hypothetical
Funktion
'Illus Interest RateType' = 0
F1 65d4afd0 62c59859 0 0 0 0 2
Interest RateType is Historic
Funktion
'Illus Interest RateType' = 1
F1 7be69f75 6273360 5976f6b0 354729f9 0 0 2
-- IncomeOption Equates --
Funktion

F1 5976f6b0 7be69f75 0 0 0 0 2
IncomeOption is Refund
Funktion
'Policy Payout IncomeOption' = 5 || 'Policy Payout IncomeOption' = 9
F1 354729f9 6273360 462c63d5 2b319f7 0 0 2
-- IndicatorCode Equates --
Funktion

F1 462c63d5 354729f9 0 3feebe31 0 0 2
IndicatorCode is Base(IndicatorCode)
Funktion
IndicatorCode = 1
F1 3feebe31 354729f9 0 2ae85908 0 0 2
IndicatorCode is Rider(IndicatorCode)
Funktion
IndicatorCode = 2
F1 2ae85908 354729f9 0 60818930 0 0 2
IndicatorCode is Integrated(IndicatorCode)
Funktion
IndicatorCode = 4
F1 60818930 354729f9 0 0 0 0 2
IndicatorCode is BaseIncrease(IndicatorCode)
Funktion
IndicatorCode = 3
F1 2b319f7 6273360 1d73061f 58aa962a 0 0 2
-- LifeCovOptType Equates
Funktion

F1 1d73061f 2b319f7 0 64db9055 0 0 2
LifeCovOptType is NLG(LifeCovOptType)
Funktion
LifeCovOptType = 9
F1 64db9055 2b319f7 0 3a6bd83d 0 0 2
LifeCovOptType is WMD(LifeCovOptType)
Funktion
LifeCovOptType = 16
F1 3a6bd83d 2b319f7 0 3056fcbe 0 0 2
LifeCovOptType is LTC(LifeCovOptType)
Funktion
LifeCovOptType = 30
F1 3056fcbe 2b319f7 0 0 0 0 2
LifeCovOptType is WPR(LifeCovOptType)
Funktion
LifeCovOptType = 17
F1 58aa962a 6273360 588a8e35 ab3e156 0 0 2
-- LifeCovType Equates --
Funktion

F1 588a8e35 58aa962a 0 301c07a6 0 0 2
LifeCovType is Endowment(LifeCovType)
Funktion
LifeCovType = 100
F1 301c07a6 58aa962a 0 6ca2af28 0 0 2
LifeCovType is Modified Whole Life(LifeCovType)
Funktion
LifeCovType = 2
F1 6ca2af28 58aa962a 0 5a9e3970 0 0 2
LifeCovType is Whole Life(LifeCovType)
Funktion
LifeCovType = 1 || LifeCovType = 2
F1 5a9e3970 58aa962a 0 38de04f8 0 0 2
LifeCovType is BIR(LifeCovType)
Funktion
LifeCovType = 1 //Flexible add-on insuranceçä
F1 38de04f8 58aa962a 0 749fb6d0 0 0 2
LifeCovType is PUAR(LifeCovType)
Funktion
LifeCovType = 18
F1 749fb6d0 58aa962a 0 4874fa4d 0 0 2
LifeCovType is PUA(LifeCovType)
Funktion
LifeCovType = 19
F1 4874fa4d 58aa962a 0 55abe0e3 0 0 2
LifeCovType is CTR(LifeCovType)
Funktion
LifeCovType = 116
F1 55abe0e3 58aa962a 0 34cff79e 0 0 2
LifeCovType is GIR(LifeCovType)
Funktion
LifeCovType = 102
F1 34cff79e 58aa962a 0 4f34bf3a 0 0 2
LifeCovType is RTR(LifeCovType)
Funktion
LifeCovType = "1013200002"
F1 4f34bf3a 58aa962a 0 67f6869 0 0 2
LifeCovType is YTPR(LifeCovType)
Funktion
LifeCovType = 1013200004
F1 67f6869 58aa962a 0 668d0365 0 0 2
LifeCovType is AIR(LifeCovType)
Funktion
LifeCovType = 24
F1 668d0365 58aa962a 0 1eedf351 0 0 2
LifeCovType is LevelTerm(LifeCovType)
Funktion
LifeCovType = 6
F1 1eedf351 58aa962a 0 0 0 0 2
LifeCovType is LTC(LifeCovType)
Funktion
LifeCovType = 16
F1 ab3e156 6273360 4741b355 25d0161b 0 0 2
-- LivesTypes Equates --
Funktion

F1 4741b355 ab3e156 0 20136678 0 0 2
LivesType SingleLife(lives_type)
Funktion
lives_type = 1
F1 20136678 ab3e156 0 7ffdcf2b 0 0 2
LivesType JointFirstToDie(lives_type)
Funktion
lives_type = 2
F1 7ffdcf2b ab3e156 0 0 0 0 2
LivesType JointLastToDie(lives_type)
Funktion
lives_type = 3
F1 25d0161b 6273360 1372ba3a 623191f7 0 0 2
-- Loans Exist --
Funktion

F1 1372ba3a 25d0161b 0 0 0 0 2
Specified Illus Loans Exist
Funktion
'Policy Number of Loan' > 0
F1 623191f7 6273360 6b66535 3ca6e4e1 0 0 2
-- MaturityCalcMethod Equates --
Funktion

F1 6b66535 623191f7 0 29d369c8 0 0 2
MaturityCalcMeth Is PolicyDuration(maturity_calc_meth)
Funktion
maturity_calc_meth EQUAL "1000500001"
F1 29d369c8 623191f7 0 234a5acc 0 0 2
MaturityCalcMeth Is GreaterDurAge(maturity_calc_meth)
Funktion
maturity_calc_meth EQUAL "1000500007"
F1 234a5acc 623191f7 0 0 0 0 2
MaturityCalcMeth Is LesserDurAge(maturity_calc_meth)
Funktion
maturity_calc_meth EQUAL "1000500008"
F1 3ca6e4e1 6273360 46681b5d 141d9713 0 0 2
-- NAR Monthly Charge Order --
Funktion

F1 46681b5d 3ca6e4e1 0 3138eccc 0 0 2
NAR Charges Use All NonNAR(chargeOrder)
Funktion
chargeOrder EQUAL "1000500001"
F1 3138eccc 3ca6e4e1 0 421ced73 0 0 2
NAR Charges Use No NonNAR(chargeOrder)
Funktion
chargeOrder EQUAL "1000500002"
F1 421ced73 3ca6e4e1 0 3f34aae9 0 0 2
NAR Charges Use Administrative NonNAR(chargeOrder)
Funktion
chargeOrder EQUAL "1000500003"
F1 3f34aae9 3ca6e4e1 0 0 0 0 2
NAR Charges Use Rider and Benefit NonNAR(chargeOrder)
Funktion
chargeOrder EQUAL "1000500004"
F1 141d9713 6273360 50ec570b 48337eb9 0 0 2
-- NAR Allocation Method --
Funktion

F1 50ec570b 141d9713 0 56e424be 0 0 2
NAR Allocation is LIFO(allocMethod)
Funktion
allocMethod EQUAL "1000500003"
F1 56e424be 141d9713 0 0 0 0 2
NAR Allocation is ProRata(allocMethod)
Funktion
allocMethod EQUAL "1000500004"
F1 48337eb9 6273360 12c380e2 776cfc9e 0 0 2
-- NecPrem Equates --
Funktion

F1 12c380e2 48337eb9 0 475ce56b 0 0 2
Necessary Prem Test Immediate Recognition of Material Change(DefLifeInsMethod; NecPremCalcRule)
Funktion
('DefLifeInsMethod is Guideline'(DefLifeInsMethod) && NOT('Necessary Prem Test Applies to GLP'(NecPremCalcRule))) || ('DefLifeInsMethod is CVAT'(DefLifeInsMethod) && NOT('Necessary Prem Test Applies to CVAT'(NecPremCalcRule)))
F1 475ce56b 48337eb9 0 4cee14a6 0 0 2
Necessary Prem Test Applies to GLP(NecPremCalcRule)
Funktion
NecPremCalcRule EQUAL "1000500001" //Applies to either GLP or CVAT optionsçä || NecPremCalcRule EQUAL "1000500002" //Applies to GLP onlyçä
F1 4cee14a6 48337eb9 0 0 0 0 2
Necessary Prem Test Applies to CVAT(NecPremCalcRule)
Funktion
NecPremCalcRule EQUAL "1000500003" //Applies to CVAT onlyçä || NecPremCalcRule EQUAL "1000500001" //Applies to either GLP or CVAT optionsçä
F1 776cfc9e 6273360 1af6faf6 3caba4bf 0 0 2
-- OptType Equates --
Funktion

F1 1af6faf6 776cfc9e 0 1fa62f76 0 0 2
OptType Is ADB(opt_type)
Funktion
opt_type = 2
F1 1fa62f76 776cfc9e 0 310bfb42 0 0 2
OptType Is GIO(opt_type)
Funktion
opt_type = 66
F1 310bfb42 776cfc9e 0 67e528b9 0 0 2
OptType Is WMD(opt_type)
Funktion
opt_type = 16
F1 67e528b9 776cfc9e 0 2472cc65 0 0 2
OptType Is WP(opt_type)
Funktion
opt_type = 17
F1 2472cc65 776cfc9e 0 6136b5ea 0 0 2
OptType Is PolicyProtectionGuarantee(opt_type)
Funktion
opt_type EQUAL "1000500001"
F1 6136b5ea 776cfc9e 0 36581655 0 0 2
OptType Is MNLP(opt_type)
Funktion
opt_type = 9
F1 36581655 776cfc9e 0 0 0 0 2
OptType Is ShadowAcct(opt_type)
Funktion
opt_type = 77
F1 3caba4bf 6273360 5e64224a 29efe688 0 0 2
-- OrgForm Functions --
Funktion

F1 5e64224a 3caba4bf 0 0 0 0 2
OrgForm is Corporation(org_form)
Funktion
org_form = 23
F1 29efe688 6273360 46aa12a8 74090615 0 0 2
-- ParticipantRoleCode Equates --
Funktion

F1 46aa12a8 29efe688 0 7e168984 0 0 2
ParticipantRoleCode is PrimaryInsured(ParticipantRoleCode)
Funktion
ParticipantRoleCode = 1
F1 7e168984 29efe688 0 2d3f4995 0 0 2
ParticipantRoleCode is JointInsured(ParticipantRoleCode)
Funktion
ParticipantRoleCode = 6
F1 2d3f4995 29efe688 0 0 0 0 2
ParticipantRoleCode is Annuitant(ParticipantRoleCode)
Funktion
ParticipantRoleCode = 27
F1 74090615 6273360 61feb7a9 8270d38 0 0 2
--ParticipantStatus Equates--
Funktion

F1 61feb7a9 74090615 0 5f61d374 0 0 2
ParticipantStatus is Active(participantStatus)
Funktion
participantStatus = 1
F1 5f61d374 74090615 0 7872be54 0 0 2
ParticipantStatus is Inactive(participantStatus)
Funktion
participantStatus = 2
F1 7872be54 74090615 0 232a6275 0 0 2
ParticipantStatus is Deceased(participantStatus)
Funktion
participantStatus = 3
F1 232a6275 74090615 0 712e0263 0 0 2
ParticipantStatus is Disabled(participantStatus)
Funktion
participantStatus = 4
F1 712e0263 74090615 0 735e470b 0 0 2
ParticipantStatus is Uninsurable(participantStatus)
Funktion
participantStatus = 5
F1 735e470b 74090615 0 0 0 0 2
ParticipantStatus is PartialRecovered(participantStatus)
Funktion
participantStatus EQUAL "1000500001"
F1 8270d38 6273360 19e83049 1ef72e5c 0 0 2
--DisabledStatus Equates--
Funktion

F1 19e83049 8270d38 0 9b5ca7f 0 0 2
DisabledStatus is Accident(disabledStatus)
Funktion
disabledStatus EQUAL "1000500001"
F1 9b5ca7f 8270d38 0 0 0 0 2
DisabledStatus is Sick(disabledStatus)
Funktion
disabledStatus EQUAL "1000500002"
F1 1ef72e5c 6273360 21538e28 399919a0 0 0 2
-- ParticipatingType Equates --
Funktion

F1 21538e28 1ef72e5c 0 0 0 0 2
ParticipatingType is Participating(ParticipatingType)
Funktion
ParticipatingType NOTEQUAL "" && ParticipatingType <= 6
F1 399919a0 6273360 28ea8a05 23efed3a 0 0 2
-- Payment Method Functions --
Funktion

F1 28ea8a05 399919a0 0 757ba36f 0 0 2
PaymentMethod is PDF(payment_method)
Funktion
payment_method = 12
F1 757ba36f 399919a0 0 0 0 0 2
PaymentMethod is DivOnDeposit(payment_method)
Funktion
payment_method = 17
F1 23efed3a 6273360 590ef08a 726dd619 0 0 2
-- PaymentMode Equates --
Funktion

F1 590ef08a 23efed3a 0 74d45379 0 0 2
PaymentMode is Annual(payment_mode)
Funktion
payment_mode = 1
F1 74d45379 23efed3a 0 171a92cf 0 0 2
PaymentMode is BiAnnual(payment_mode)
Funktion
payment_mode = 2
F1 171a92cf 23efed3a 0 74e4d5c0 0 0 2
PaymentMode is Quarterly(payment_mode)
Funktion
payment_mode = 3
F1 74e4d5c0 23efed3a 0 3bafb02 0 0 2
PaymentMode is Monthly(payment_mode)
Funktion
payment_mode = 4
F1 3bafb02 23efed3a 0 10b1daf3 0 0 2
PaymentMode is BiMonthly(payment_mode)
Funktion
payment_mode = 5
F1 10b1daf3 23efed3a 0 332d3dbe 0 0 2
PaymentMode is Weekly(payment_mode)
Funktion
payment_mode = 6
F1 332d3dbe 23efed3a 0 6bec4026 0 0 2
PaymentMode is BiWeekly(payment_mode)
Funktion
payment_mode = 7
F1 6bec4026 23efed3a 0 7fc8b03 0 0 2
PaymentMode is Monthly for 9 Months(payment_mode)
Funktion
payment_mode = 10
F1 7fc8b03 23efed3a 0 691d093c 0 0 2
PaymentMode is Every 4 Weeks(payment_mode)
Funktion
payment_mode = 12
F1 691d093c 23efed3a 0 50aac4c8 0 0 2
PaymentMode is Monthly for 10 Months(payment_mode)
Funktion
payment_mode = 13
F1 50aac4c8 23efed3a 0 0 0 0 2
PaymentMode is Applicable(payment_mode; monthIndex)
Funktion
CASE(payment_mode;çä  1 : (monthIndex = 1);çä  2 : (monthIndex = 1) || (monthIndex = 7);çä  3 : (monthIndex = 1) || (monthIndex = 5) || (monthIndex = 9);çä  4 : (monthIndex = 1) || (monthIndex = 4) || (monthIndex = 7) || (monthIndex = 10);çä   : 0)çä
F1 726dd619 6273360 6ca4daf6 2de9cbfb 0 0 2
-- PeriodMode Set Functions --
Funktion

F1 6ca4daf6 726dd619 0 692e1c65 0 0 2
PeriodMode set End of Investment
Funktion
1000500001
F1 692e1c65 726dd619 0 0 0 0 2
PeriodMode set Since Start of Investment
Funktion
2
F1 2de9cbfb 6273360 44da7538 2003059a 0 0 2
-- Policy CostBasis Functions --
Funktion

F1 44da7538 2de9cbfb 0 3e1dfe6c 0 0 2
Policy CostBasis is known(CB_Status)
Funktion
CB_Status EQUAL "1"
F1 3e1dfe6c 2de9cbfb 0 0 0 0 2
Policy CostBasis is unknown(CB_Status)
Funktion
CB_Status EQUAL "0"
F1 2003059a 6273360 1451c391 29d242a3 0 0 2
-- PolicyStatus Equates --
Funktion

F1 1451c391 2003059a 0 2fe15a06 0 0 2
PolicyStatus In ActiveStatuses(policy_status)
Funktion
CASE(policy_status;çä  1 : 1;çä   //Active (inforce).çä8 : 1;çä   //Pending Issue (application accepted to process).çä : 0 //All othersçä)çä
F1 2fe15a06 2003059a 0 7f3d6ad5 0 0 2
PolicyStatus is Active(policy_status)
Funktion
policy_status = 1
F1 7f3d6ad5 2003059a 0 69d247e3 0 0 2
PolicyStatus is Death Claim Pending(policy_status)
Funktion
policy_status = 10
F1 69d247e3 2003059a 0 6b677938 0 0 2
PolicyStatus is Paid Up(policy_status)
Funktion
policy_status = 3
F1 6b677938 2003059a 0 137a26a6 0 0 2
PolicyStatus is Lapsed(policy_status)
Funktion
policy_status = 4
F1 137a26a6 2003059a 0 151310c5 0 0 2
PolicyStatus is Surrendered(policy_status)
Funktion
policy_status = 6
F1 151310c5 2003059a 0 92fe5b5 0 0 2
PolicyStatus is Waiver(policy_status)
Funktion
policy_status = 9
F1 92fe5b5 2003059a 0 47dd9c52 0 0 2
PolicyStatus is Under Disability(policy_status)
Funktion
policy_status = 15
F1 47dd9c52 2003059a 0 3d9cc206 0 0 2
PolicyStatus is Expired(policy_status)
Funktion
policy_status = 17
F1 3d9cc206 2003059a 0 73ce554b 0 0 2
PolicyStatus is Extended Term(policy_status)
Funktion
policy_status = 18
F1 73ce554b 2003059a 0 24277fca 0 0 2
PolicyStatus is Reduced Paid Up(policy_status)
Funktion
policy_status = 20
F1 24277fca 2003059a 0 3fb79373 0 0 2
PolicyStatus is Issued Not Paid(policy_status)
Funktion
policy_status = 25
F1 3fb79373 2003059a 0 17f7892a 0 0 2
PolicyStatus is Not Taken(policy_status)
Funktion
policy_status = 7
F1 17f7892a 2003059a 0 4d9ccc65 0 0 2
PolicyStatus is Matured(policy_status)
Funktion
policy_status = 40
F1 4d9ccc65 2003059a 0 475fd47a 0 0 2
PolicyStatus is Free Look Surrender(policy_status)
Funktion
policy_status = 50
F1 475fd47a 2003059a 0 42568ab5 0 0 2
PolicyStatus is Back Billed(policy_status)
Funktion
policy_status = 32
F1 42568ab5 2003059a 0 51e72f6c 0 0 2
PolicyStatus is Payor Death(policy_status)
Funktion
policy_status EQUAL "1000500001"
F1 51e72f6c 2003059a 0 242d54ed 0 0 2
PolicyStatus is COI and Disability Waiver(policy_status)
Funktion
policy_status EQUAL "1000500002"
F1 242d54ed 2003059a 0 41c141b7 0 0 2
PolicyStatus is Single Premium(policy_status)
Funktion
policy_status EQUAL "1000500009"
F1 41c141b7 2003059a 0 7ad96ab0 0 0 2
PolicyStatus is Fully Paid Up(policy_status)
Funktion
policy_status = 47
F1 7ad96ab0 2003059a 0 614dd000 0 0 2
PolicyStatus is Pending Reinstatement(policy_status)
Funktion
policy_status = 38
F1 614dd000 2003059a 0 0 0 0 2
PolicyStatus is Pending(policy_status)
Funktion
policy_status = 8
F1 29d242a3 6273360 543c7ba8 148ee5e8 0 0 2
-- PolStat Equates ---
Funktion

F1 543c7ba8 29d242a3 0 40ff138a 0 0 2
PolStat is active(pol_stat)
Funktion
pol_stat = 1
F1 40ff138a 29d242a3 0 0 0 0 2
PolStat is pending(pol_stat)
Funktion
pol_stat = 8
F1 148ee5e8 6273360 5b1216b1 73b7b1c7 0 0 2
-- ProductCode Functions --
Funktion

F1 5b1216b1 148ee5e8 5e010f08 0 0 0 2
-- ProductCode Test Functions --
Funktion

F1 5e010f08 5b1216b1 0 3d8f5e0e 0 0 2
ProductCode GMDB Fee Allowed(productcode)
Funktion
NOT(productcode ALIKE "VAUB1PA")
F1 3d8f5e0e 5b1216b1 0 72b960ea 0 0 2
ProductCode GMIB Fee Allowed(productcode)
Funktion
NOT(productcode ALIKE "VAUB1PA")
F1 72b960ea 5b1216b1 0 0 0 0 2
ProductCode GMWB Fee Allowed(productcode)
Funktion
NOT(productcode ALIKE "VAUB1PA")
F1 73b7b1c7 6273360 6eef5f4b 2f37d0bc 0 0 2
-- ProductType Functions --
Funktion

F1 6eef5f4b 73b7b1c7 51c03cd7 40856d86 0 0 2
-- ProductType Test Functions --
Funktion

F1 51c03cd7 6eef5f4b 0 4829eabe 0 0 2
ProductType is Whole Life(product_type)
Funktion
product_type = 1
F1 4829eabe 6eef5f4b 0 6a54a274 0 0 2
ProductType is Term(product_type)
Funktion
product_type = 2
F1 6a54a274 6eef5f4b 0 1caf7a60 0 0 2
ProductType is Interest Sensitive LIFe(product_type)
Funktion
product_type = 6
F1 1caf7a60 6eef5f4b 0 2e8cf43d 0 0 2
ProductType is Excess Interest LIFe(product_type)
Funktion
product_type = 7
F1 2e8cf43d 6eef5f4b 0 64fd271 0 0 2
ProductType is Term With Cash Value(product_type)
Funktion
product_type = 26
F1 64fd271 6eef5f4b 0 7f41f427 0 0 2
ProductType Is Indeterminate Premium(product_type)
Funktion
product_type = 41
F1 7f41f427 6eef5f4b 0 719d6535 0 0 2
ProductType is Universal Life(product_type)
Funktion
product_type = 3
F1 719d6535 6eef5f4b 0 199fac89 0 0 2
ProductType is Fixed Annuity(product_type)
Funktion
product_type = 9
F1 199fac89 6eef5f4b 0 2dc16372 0 0 2
ProductType is Variable Annuity(product_type)
Funktion
product_type = 10
F1 2dc16372 6eef5f4b 0 80596b0 0 0 2
ProductType is Indexed Annuity(product_type)
Funktion
product_type = 11
F1 80596b0 6eef5f4b 0 122b47bf 0 0 2
ProductType is Retirement Annuity(product_type)
Funktion
product_type = 301
F1 122b47bf 6eef5f4b 0 68e9295a 0 0 2
ProductType is Buyout(product_type)
Funktion
product_type = 24
F1 68e9295a 6eef5f4b 0 46cd27cb 0 0 2
ProductType is Cancer(product_type)
Funktion
product_type = 21
F1 46cd27cb 6eef5f4b 0 37b9606a 0 0 2
ProductType is Dread Disease(product_type)
Funktion
product_type = 16
F1 37b9606a 6eef5f4b 0 9b9a6e5 0 0 2
ProductType is Hospital Indemnity(product_type)
Funktion
product_type = 14
F1 9b9a6e5 6eef5f4b 0 5d229f22 0 0 2
ProductType is Hospital or Surgical(product_type)
Funktion
product_type = 19
F1 5d229f22 6eef5f4b 0 3402c2f3 0 0 2
ProductType is Income Replacement Duration Unspecified(product_type)
Funktion
product_type = 12
F1 3402c2f3 6eef5f4b 0 23a5b635 0 0 2
ProductType is Major Medical(product_type)
Funktion
product_type = 13
F1 23a5b635 6eef5f4b 0 531bdbca 0 0 2
ProductType is Medical Expense(product_type)
Funktion
product_type = 20
F1 531bdbca 6eef5f4b 0 10f5c01a 0 0 2
ProductType is Medicare Supplement(product_type)
Funktion
product_type = 15
F1 10f5c01a 6eef5f4b 0 32be37f0 0 0 2
ProductType is Nursing Home(product_type)
Funktion
product_type = 18
F1 32be37f0 6eef5f4b 0 512516e 0 0 2
ProductType is Overhead Expense(product_type)
Funktion
product_type = 23
F1 512516e 6eef5f4b 0 37a9ff3d 0 0 2
ProductType is Travel Accident(product_type)
Funktion
product_type = 22
F1 37a9ff3d 6eef5f4b 0 26b1eb1d 0 0 2
ProductType is Indexed Universal Life(product_type)
Funktion
product_type = 5
F1 26b1eb1d 6eef5f4b 0 6488cd5 0 0 2
ProductType is Variable Universal Life(product_type)
Funktion
product_type = 4
F1 6488cd5 6eef5f4b 0 0 0 0 2
ProductType is Long Term Care(product_type)
Funktion
product_type = 17 || product_type = 12
F1 40856d86 73b7b1c7 352d09d0 34c3dbda 0 0 2
-- ProductType Grouped Test Functions --
Funktion

F1 352d09d0 40856d86 0 66fbb17a 0 0 2
ProductType is Life Product(product_type)
Funktion
'ProductType Is ULType Product'(product_type) || 'ProductType is Term Product'(product_type) || 'ProductType is WholeLife Product'(product_type)
F1 66fbb17a 40856d86 0 45a15128 0 0 2
ProductType is WholeLife Product(product_type)
Funktion
CASE(product_type;çä  1;6;8 : 1;çä   : 0)çä
F1 45a15128 40856d86 0 5335b12f 0 0 2
ProductType Is ULType Product(product_type)
Funktion
CASE(product_type;çä  3;4;5 : 1;çä   : 0)çä
F1 5335b12f 40856d86 0 2f7f2f83 0 0 2
ProductType is Fixed Premium(product_type)
Funktion
CASE(product_type;çä  1;2;6;26;105;109 : 1;çä   : 0)çä
F1 2f7f2f83 40856d86 0 118d3ad2 0 0 2
ProductType is Flexible Premium(product_type)
Funktion
CASE(product_type;çä  9;11;5;301;3;10;4 : 1;çä   : 0)çä
F1 118d3ad2 40856d86 0 570221fc 0 0 2
ProductType is Annuity(product_type)
Funktion
CASE(product_type;çä  9;10;11;301 : 1;çä   : 0)çä
F1 570221fc 40856d86 0 3f11b7e 0 0 2
ProductType is Term Product(product_type)
Funktion
'ProductType is Term'(product_type) || 'ProductType is Term With Cash Value'(product_type) || 'ProductType Is Indeterminate Premium'(product_type)
F1 3f11b7e 40856d86 0 0 0 0 2
ProductType is Disability Health(product_type)
Funktion
'ProductType is Buyout'(product_type) || 'ProductType is Cancer'(product_type) || 'ProductType is Dread Disease'(product_type) || 'ProductType is Hospital Indemnity'(product_type) || 'ProductType is Hospital or Surgical'(product_type) || 'ProductType is Income Replacement Duration Unspecified'(product_type) || 'ProductType is Major Medical'(product_type) || 'ProductType is Medical Expense'(product_type) || 'ProductType is Medicare Supplement'(product_type) || 'ProductType is Nursing Home'(product_type) || 'ProductType is Overhead Expense'(product_type) || 'ProductType is Travel Accident'(product_type)
F1 34c3dbda 73b7b1c7 18ec5f2 0 0 0 2
-- ProductType Set Functions --
Funktion

F1 18ec5f2 34c3dbda 0 75a0e5a0 0 0 2
ProductType set Whole LIFe
Funktion
1
F1 75a0e5a0 34c3dbda 0 548d1c1c 0 0 2
ProductType set Term
Funktion
2
F1 548d1c1c 34c3dbda 0 34fa948c 0 0 2
ProductType set Interest Sensitive LIFe
Funktion
6
F1 34fa948c 34c3dbda 0 1a3b2a3f 0 0 2
ProductType set Excess Interest LIFe
Funktion
7
F1 1a3b2a3f 34c3dbda 0 a1fc7f8 0 0 2
ProductType set Term With Cash Value
Funktion
26
F1 a1fc7f8 34c3dbda 0 4a458780 0 0 2
ProductType set Indeterminate Premium
Funktion
41
F1 4a458780 34c3dbda 0 1e785054 0 0 2
ProductType set Universal LIFe
Funktion
3
F1 1e785054 34c3dbda 0 f7e33ec 0 0 2
ProductType set Variable Universal LIFe
Funktion
4
F1 f7e33ec 34c3dbda 0 c467eef 0 0 2
ProductType set Indexed Universal LIFe
Funktion
5
F1 c467eef 34c3dbda 0 2ff191a5 0 0 2
ProductType set Fixed Annuity
Funktion
9
F1 2ff191a5 34c3dbda 0 5003a5b2 0 0 2
ProductType set Variable Annuity
Funktion
10
F1 5003a5b2 34c3dbda 0 2ff768ef 0 0 2
ProductType set Indexed Annuity
Funktion
11
F1 2ff768ef 34c3dbda 0 0 0 0 2
ProductType set Retirement Annuity
Funktion
301
F1 2f37d0bc 6273360 6ff0d0fd 4286d2d5 0 0 2
-- Qualified Plan equates--
Funktion

F1 6ff0d0fd 2f37d0bc 0 151d52a6 0 0 2
Plan Is NonQualified
Funktion
1
F1 151d52a6 2f37d0bc 0 fd60372 0 0 2
Plan Is Qualified
Funktion
0
F1 fd60372 2f37d0bc 0 3871f4a5 0 0 2
QualPlanType is 401_k(qualplantype)
Funktion
qualplantype = 2
F1 3871f4a5 2f37d0bc 0 547f8f5c 0 0 2
QualPlanType is Traditional IRA(qualplantype)
Funktion
qualplantype = 5
F1 547f8f5c 2f37d0bc 0 669fb1cb 0 0 2
QualPlanType is ROTH IRA(qualplantype)
Funktion
qualplantype = 6
F1 669fb1cb 2f37d0bc 0 4fe68cd 0 0 2
QualPlanType is 408_k SEP(qualplantype)
Funktion
qualplantype = 8
F1 4fe68cd 2f37d0bc 0 3bac549c 0 0 2
QualPlanType is IRA Roth Conversion(qualplantype)
Funktion
qualplantype = 29
F1 3bac549c 2f37d0bc 0 eae12d8 0 0 2
QualPlanType is SIMPLE Qualified Plan 408_b(qualplantype)
Funktion
qualplantype = 30
F1 eae12d8 2f37d0bc 0 51e06fc 0 0 2
QualPlanType is Pension Trust Plan(qualplantype)
Funktion
qualplantype = 31
F1 51e06fc 2f37d0bc 0 1f61eb03 0 0 2
QualPlanType is 403_a(qualplantype)
Funktion
qualplantype = 42
F1 1f61eb03 2f37d0bc 0 6c9cc99c 0 0 2
QualPlanType is Non Transferable Qualified Annuity(qualplantype)
Funktion
qualplantype = 43
F1 6c9cc99c 2f37d0bc 0 de5dca9 0 0 2
QualPlanType is 401_a(qualplantype)
Funktion
qualplantype = 44
F1 de5dca9 2f37d0bc 0 31b87fad 0 0 2
QualPlanType is Qualified_Unspecified(qualplantype)
Funktion
qualplantype = 45
F1 31b87fad 2f37d0bc 0 12b5ae68 0 0 2
QualPlanType is 415M(qualplantype)
Funktion
qualplantype = 49
F1 12b5ae68 2f37d0bc 0 3c13ee47 0 0 2
QualPlanType is 414_h(qualplantype)
Funktion
qualplantype = 67
F1 3c13ee47 2f37d0bc 0 6d7607ec 0 0 2
QualPlanType is SIMPLE Qualified Plan 401_k(qualplantype)
Funktion
qualplantype = 68
F1 6d7607ec 2f37d0bc 0 1d22cd8e 0 0 2
QualPlanType is 412_i(qualplantype)
Funktion
qualplantype = 69
F1 1d22cd8e 2f37d0bc 0 1186bd50 0 0 2
QualPlanType is Non Qualified Annuity(qualplantype)
Funktion
qualplantype = 1
F1 1186bd50 2f37d0bc 0 0 0 0 2
QualPlanType is Grouped Qualified Annuity(qualplantype)
Funktion
CASE(qualplantype;çä  2;5;6;8;29;30;31;42;43;44;45;49;67;68;69 : 1;çä   : 0)çä
F1 4286d2d5 6273360 16652075 2223989b 0 0 2
-- QualifiedCode Functions --
Funktion

F1 16652075 4286d2d5 0 3df841e6 0 0 2
Qualified Code is NotQualified(qualified_code)
Funktion
qualified_code = 1
F1 3df841e6 4286d2d5 0 0 0 0 2
Qualified Code is Qualified(qualified_code)
Funktion
qualified_code = 2
F1 2223989b 6273360 dfc4881 6a526084 0 0 2
-- RatCommRul Equates --
Funktion

F1 dfc4881 2223989b 0 0 0 0 2
RatCommRul Is CommissionsNotPaid(rating_commissions_rule)
Funktion
rating_commissions_rule = 1
F1 6a526084 6273360 7526968f 4e148ea4 0 0 2
-- Rate Based On Equates --
Funktion

F1 7526968f 6a526084 0 d03bcca 0 0 2
READ RateBasedOn Is PctOfTotalMonthlyDed(RateBasedOnType)
Funktion
RateBasedOnType EQUAL "1000500001"
F1 d03bcca 6a526084 0 0 0 0 2
READ RateBasedOn Is PctOfPremForPolicyYr(RateBasedOnType)
Funktion
RateBasedOnType EQUAL "1000500031"
F1 4e148ea4 6273360 18651f81 3c5cc11b 0 0 2
-- Rate equates --
Funktion

F1 18651f81 4e148ea4 0 35bdef39 0 0 2
Rate Type is Curr(calcType; rateType)
Funktion
LEFT(rateType;1) ALIKE 'CalcType Current'(calcType)
F1 35bdef39 4e148ea4 0 0 0 0 2
Rate Type is Guar(calcType; rateType)
Funktion
LEFT(rateType;1) ALIKE 'CalcType Guaranteed'(calcType)
F1 3c5cc11b 6273360 4d90616d 448a721f 0 0 2
-- RatingCommissionRuleEquates --
Funktion

F1 4d90616d 3c5cc11b 0 0 0 0 2
RatingCommissionRule CommissionsPaid(rating_commission_rule)
Funktion
rating_commission_rule = 2
F1 448a721f 6273360 3a305d18 20d7a071 0 0 2
-- ReserveFunction Equates --
Funktion

F1 3a305d18 448a721f 0 0 0 0 2
ReserveFunction Is Continuous(reserve_function)
Funktion
reserve_function <> 4
F1 20d7a071 6273360 7496df28 6faa3d50 0 0 2
-- RiderType Equates --
Funktion

F1 7496df28 20d7a071 0 4b9ce28e 0 0 2
RiderType is COLA(RiderTypeCode)
Funktion
IF (STRICMP(LEFT(RiderTypeCode;5);"ERROR") = 0 ; çä   /*Then*/ 0 ; çä   /*Else*/ RiderTypeCode = 1çä)
F1 4b9ce28e 20d7a071 0 7776015d 0 0 2
RiderType is ROP(RiderTypeCode)
Funktion
IF (STRICMP(LEFT(RiderTypeCode;5);"ERROR") = 0 ; çä   /*Then*/ 0 ; çä   /*Else*/ RiderTypeCode = 69çä)
F1 7776015d 20d7a071 0 4a75b10b 0 0 2
RiderType is WP(RiderTypeCode)
Funktion
IF (STRICMP(LEFT(RiderTypeCode;5);"ERROR") = 0 ; çä   /*Then*/ 0 ; çä   /*Else*/ RiderTypeCode = 87çä)
F1 4a75b10b 20d7a071 0 4c6cb8cc 0 0 2
RiderType is GMIB(RiderTypeCode)
Funktion
IF (STRICMP(LEFT(RiderTypeCode;5);"ERROR") = 0 ; çä   /*Then*/ 0 ; çä   /*Else*/ RiderTypeCode = 204çä)
F1 4c6cb8cc 20d7a071 0 4c919348 0 0 2
RiderType is GMWB(RiderTypeCode)
Funktion
IF (STRICMP(LEFT(RiderTypeCode;5);"ERROR") = 0 ; çä   /*Then*/ 0 ; çä   /*Else*/ RiderTypeCode = 336çä)
F1 4c919348 20d7a071 0 7798c564 0 0 2
RiderType is GMDB(RiderTypeCode)
Funktion
IF (STRICMP(LEFT(RiderTypeCode;5);"ERROR") = 0 ; çä   /*Then*/ 0 ; çä   /*Else*/ RiderTypeCode = 206çä)
F1 7798c564 20d7a071 0 2f7396ab 0 0 2
RiderType is GMAB(RiderTypeCode)
Funktion
IF (STRICMP(LEFT(RiderTypeCode;5);"ERROR") = 0 ; çä   /*Then*/ 0 ; çä   /*Else*/ RiderTypeCode = 211çä)
F1 2f7396ab 20d7a071 0 43b3b270 0 0 2
RiderType is EEB(RiderTypeCode)
Funktion
IF (STRICMP(LEFT(RiderTypeCode;5);"ERROR") = 0 ; çä   /*Then*/ 0 ; çä   /*Else*/ RiderTypeCode = 205çä)
F1 43b3b270 20d7a071 0 3e72f953 0 0 2
RiderType is LTC(RiderTypeCode)
Funktion
RiderTypeCode = 17
F1 3e72f953 20d7a071 0 0 0 0 2
RiderType is ASCR(RiderTypeCode)
Funktion
RiderTypeCode = 202 || RiderTypeCode = 207 //if(RiderTypeCode = 207 || RiderTypeCode = 202;çä//â1;çä//â0çä//â)ä
F1 6faa3d50 6273360 19cacefc 2bf0ede7 0 0 2
-- Target DB equates --
Funktion

F1 19cacefc 6faa3d50 0 209f9939 0 0 2
SourceOfFund is Premium(sourceOfFundsTC)
Funktion
sourceOfFundsTC = 1
F1 209f9939 6faa3d50 0 38c9404f 0 0 2
SourceOfFund is Dividend(sourceOfFundsTC)
Funktion
sourceOfFundsTC = 9
F1 38c9404f 6faa3d50 0 0 0 0 2
SourceOfFund is PaidUpAdditions(sourceOfFundsTC)
Funktion
sourceOfFundsTC = 20
F1 2bf0ede7 6273360 4de20b4d 66193110 0 0 2
-- Transfer Types --
Funktion

F1 4de20b4d 2bf0ede7 0 2597e6ec 0 0 2
TransferType is Units(transferType)
Funktion
transferType = 1
F1 2597e6ec 2bf0ede7 0 3a469cc1 0 0 2
TransferType is Amount(transferType)
Funktion
transferType = 2
F1 3a469cc1 2bf0ede7 0 0 0 0 2
TransferType is Percent(transferType)
Funktion
transferType = 3
F1 66193110 6273360 6042a255 8a679e9 0 0 2
-- TobaccoPremiumBasis Equates --
Funktion

F1 6042a255 66193110 0 6579be57 0 0 2
TobaccoPremiumBasis is NonSmoker(TobaccoPremiumBasis)
Funktion
TobaccoPremiumBasis = 1
F1 6579be57 66193110 0 0 0 0 2
TobaccoPremiumBasis is Smoker(TobaccoPremiumBasis)
Funktion
TobaccoPremiumBasis = 2
F1 8a679e9 6273360 5748e44f 686a23f7 0 0 2
-- Underwritingclass Equates --
Funktion

F1 5748e44f 8a679e9 0 5ad9a4a9 0 0 2
UnderwritingClass is Preferred(UnderwritingClass)
Funktion
UnderwritingClass = 1
F1 5ad9a4a9 8a679e9 0 50ad75a6 0 0 2
UnderwritingClass is Standard(UnderwritingClass)
Funktion
UnderwritingClass = 1
F1 50ad75a6 8a679e9 0 0 0 0 2
UnderwritingClass is UltraPreferred(UnderwritingClass)
Funktion
UnderwritingClass = 4
F1 686a23f7 6273360 6f4b2bef 43c1d8f3 0 0 2
-- ValuesInfo Equates --
Funktion

F1 6f4b2bef 686a23f7 0 9b067df 0 0 2
ValuesInfo is Step up(ridersubtypecode)
Funktion
'Std Calling System Is V1 or WMA' || 'Std Calling System Is wmaJ' || ridersubtypecode EQUAL "1000500004" //IF('Std Calling System Is V1 or WMA'çä//â||çä//âridersubtypecode =1000500004;çä//âçä//â1;çä//âçä//â0çä//âçä//)ä
F1 9b067df 686a23f7 0 0 0 0 2
ValuesInfo is Growth(ridersubtypecode)
Funktion
'Std Calling System Is V1 or WMA' || 'Std Calling System Is wmaJ' || ridersubtypecode EQUAL "1000500003" //IF('Std Calling System Is V1 or WMA'çä//â||çä//âridersubtypecode = 1000500003;çä//âçä//â1;çä//âçä//â0çä//âçä//)ä
F1 43c1d8f3 6273360 30ea268f 12b37483 0 0 2
-- Withdrawal Design Type Equates --
Funktion

F1 30ea268f 43c1d8f3 0 4c7d8e11 0 0 2
Withdrawal Design Type is None(WdlDesignType)
Funktion
WdlDesignType EQUAL "1000500001"
F1 4c7d8e11 43c1d8f3 0 0 0 0 2
Withdrawal Design Type is Withdrawal Switch to Loan(WdlDesignType)
Funktion
WdlDesignType EQUAL "1000500004"
F1 12b37483 6273360 1b6d8705 353e445e 0 0 2
-- Withdrawal Order Equates --
Funktion

F1 1b6d8705 12b37483 0 1d1766c8 0 0 2
Withdrawal Order Is LIFO(WdlOrder)
Funktion
WdlOrder EQUAL "1"
F1 1d1766c8 12b37483 0 0 0 0 2
Withdrawal Order Is FIFO(WdlOrder)
Funktion
WdlOrder EQUAL "5"
F1 353e445e 6273360 145ab6f2 6e1e699 0 0 2
-- WithdrawalRule Equates --
Funktion

F1 145ab6f2 353e445e 0 404355b6 0 0 2
WithdrawalRule is Proportional(withdrawal_rule)
Funktion
withdrawal_rule EQUAL "1000500001"
F1 404355b6 353e445e 0 773851cc 0 0 2
WithdrawalRule is Dollar For Dollar(withdrawal_rule)
Funktion
withdrawal_rule EQUAL "1000500002"
F1 773851cc 353e445e 0 0 0 0 2
WithdrawalRule is Combination(withdrawal_rule)
Funktion
withdrawal_rule EQUAL "1000500003"
F1 6e1e699 6273360 30e2e677 43301ca3 0 0 2
--Disbursement Options (non-solves)--
Funktion
/* These readability functions are for disbursement optionsçä   that are not solves, where the disbursement amounts are enteredçä*/
F1 30e2e677 6e1e699 0 21f82a13 0 0 2
Disbursement Option is Withdrawals Switch to Loans(DisbDesignType)
Funktion
DisbDesignType EQUAL "1000500004"
F1 21f82a13 6e1e699 0 7942c863 0 0 2
Disbursement Option is Withdrawals(DisbDesignType)
Funktion
DisbDesignType EQUAL "1000500002"
F1 7942c863 6e1e699 0 0 0 0 2
Disbursement Option is Loans(DisbDesignType)
Funktion
DisbDesignType EQUAL "1000500003"
F1 43301ca3 6273360 3f73a7e 7a7a4675 0 0 2
-- Back-dating Equates --
Funktion

F1 3f73a7e 43301ca3 0 3cdd37dc 0 0 2
BackDate Elected(backDateType)
Funktion
'BackDateType is Save Date'(backDateType)
F1 3cdd37dc 43301ca3 0 0 0 0 2
BackDateType is Save Date(backDateType)
Funktion
backDateType = 1
F1 7a7a4675 6273360 8ee2802 2e248c6c 0 0 2
-- Internal Rate of Return Equates --
Funktion

F1 8ee2802 7a7a4675 0 26c833ee 0 0 2
IRR is DB(DBorCV)
Funktion
DBorCV ALIKE "DB"
F1 26c833ee 7a7a4675 0 0 0 0 2
IRR is CV(DBorCV)
Funktion
DBorCV ALIKE "CV"
F1 2e248c6c 6273360 2edbd8d6 7027e54e 0 0 2
-- Compensation Equates --
Funktion

F1 2edbd8d6 2e248c6c 0 0 0 0 2
Commission is ABC(commissionType)
Funktion
commissionType ALIKE "ABC"
F1 7027e54e 6273360 3c3b3379 1fb230bd 0 0 2
-- RiderStatus Equates --
Funktion

F1 3c3b3379 7027e54e 0 0 0 0 2
RiderStatus is Pending(riderStatus)
Funktion
riderStatus = 8
F1 1fb230bd 6273360 1d6b9557 4b4ca134 0 0 2
-- MECInd Equates --
Funktion

F1 1d6b9557 1fb230bd 0 51d61833 0 0 2
Contract Is MEC(MECInd)
Funktion
MECInd = 1
F1 51d61833 1fb230bd 0 0 0 0 2
Contract Is Not MEC(MECInd)
Funktion
MECInd = 0
F1 4b4ca134 6273360 616f2d3 49e550d1 0 0 2
-- Multiple Funds --
Funktion

F1 616f2d3 4b4ca134 0 18af8f35 0 0 2
Expense Average is Arithmetic
Funktion
'STD Policy Expense Average Type' = 0
F1 18af8f35 4b4ca134 0 0 0 0 2
Expense Average is Weighted
Funktion
'STD Policy Expense Average Type' = 1
F1 49e550d1 6273360 3a4b8696 63ff0ead 0 0 2
-- Fee ChargeBasedOn Equates --
Funktion

F1 3a4b8696 49e550d1 0 573b0295 0 0 2
Fee ChargeBasedOn is ContributionBonus(chargeBasedOn)
Funktion
chargeBasedOn EQUAL "1000500029"
F1 573b0295 49e550d1 0 0 0 0 2
Fee ChargeBasedOn is FlatAmount(chargeBasedOn)
Funktion
chargeBasedOn EQUAL "1000500030"
F1 63ff0ead 6273360 284e9f5d 2281bccd 0 0 2
-- Interest Crediting Days --
Funktion

F1 284e9f5d 63ff0ead 0 3679ad54 0 0 2
InterestCreditDaysType is 1-12th(interestCreditDaysType)
Funktion
interestCreditDaysType EQUAL "1000500003"
F1 3679ad54 63ff0ead 0 39ac109a 0 0 2
InterestCreditDaysType is 365(interestCreditDaysType)
Funktion
interestCreditDaysType EQUAL "1000500001"
F1 39ac109a 63ff0ead 0 0 0 0 2
InterestCreditDaysType is 366(interestCreditDaysType)
Funktion
interestCreditDaysType EQUAL "1000500002"
F1 2281bccd 6273360 60956e5e 4a1cfb84 0 0 2
-- TaxWithholding Functions --
Funktion

F1 60956e5e 2281bccd 3683312c 1ef3a4e6 0 0 2
-- TaxWithholding TaxOwnershipType Functions
Funktion

F1 3683312c 60956e5e 0 3a3e3f12 0 0 2
TaxWithholding TaxOwnershipType is Individual(Owner_Type)
Funktion
Owner_Type EQUAL "1000500001"
F1 3a3e3f12 60956e5e 0 9b60cbe 0 0 2
TaxWithholding TaxOwnershipType is RevocableTrust(Owner_Type)
Funktion
Owner_Type EQUAL "1000500002"
F1 9b60cbe 60956e5e 0 31fd3b86 0 0 2
TaxWithholding TaxOwnershipType is IrrevocableGrantorTrust(Owner_Type)
Funktion
Owner_Type EQUAL "1000500003"
F1 31fd3b86 60956e5e 0 2b9b44b5 0 0 2
TaxWithholding TaxOwnershipType is IrrevocableNonGrantorTrust(Owner_Type)
Funktion
Owner_Type EQUAL "1000500004"
F1 2b9b44b5 60956e5e 0 4aaff9eb 0 0 2
TaxWithholding TaxOwnershipType is QualifiedPension(Owner_Type)
Funktion
Owner_Type EQUAL "1000500005"
F1 4aaff9eb 60956e5e 0 215910e 0 0 2
TaxWithholding TaxOwnershipType is Corporation(Owner_Type)
Funktion
Owner_Type EQUAL "1000500006"
F1 215910e 60956e5e 0 77d05834 0 0 2
TaxWithholding TaxOwnershipType is Partnership(Owner_Type)
Funktion
Owner_Type EQUAL "1000500007"
F1 77d05834 60956e5e 0 64315c91 0 0 2
TaxWithholding TaxOwnershipType is SplitDollarIndividual(Owner_Type)
Funktion
Owner_Type EQUAL "1000500008"
F1 64315c91 60956e5e 0 410a57b1 0 0 2
TaxWithholding TaxOwnershipType is SplitDollarCorporate(Owner_Type)
Funktion
Owner_Type EQUAL "1000500009"
F1 410a57b1 60956e5e 0 12da93e0 0 0 2
TaxWithholding TaxOwnershipType is ParticipantOwnedKeogh(Owner_Type)
Funktion
Owner_Type EQUAL "1000500010"
F1 12da93e0 60956e5e 0 7faf71d2 0 0 2
TaxWithholding TaxOwnershipType is TrustOwnedKeogh(Owner_Type)
Funktion
Owner_Type EQUAL "1000500011"
F1 7faf71d2 60956e5e 0 0 0 0 2
TaxWithholding TaxOwnershipType is TaxExemptOrganization(Owner_Type)
Funktion
Owner_Type EQUAL "1000500012"
F1 1ef3a4e6 2281bccd 59ca82e3 35329f73 0 0 2
-- TaxWithholding Type Functions
Funktion

F1 59ca82e3 1ef3a4e6 0 1401762a 0 0 2
TaxWithholding TaxWithholding Type is Standard(Withholding_Type)
Funktion
Withholding_Type EQUAL "1"
F1 1401762a 1ef3a4e6 0 1fa22833 0 0 2
TaxWithholding TaxWithholding Type is DoNotWithholdTaxes(Withholding_Type)
Funktion
Withholding_Type EQUAL 4
F1 1fa22833 1ef3a4e6 0 5c719cc9 0 0 2
TaxWithholding TaxWithholding Type is SpecifiedPercentage(Withholding_Type)
Funktion
Withholding_Type EQUAL 6
F1 5c719cc9 1ef3a4e6 0 7092ecfc 0 0 2
TaxWithholding TaxWithholding Type is FlatDollar(Withholding_Type)
Funktion
Withholding_Type EQUAL 8
F1 7092ecfc 1ef3a4e6 0 6b93f776 0 0 2
TaxWithholding TaxWithholding Type is Unknown(Withholding_Type)
Funktion
Withholding_Type EQUAL "0"
F1 6b93f776 1ef3a4e6 0 0 0 0 2
TaxWithholding TaxWithholding Type is Combine Both Pct and Flat Dollar(Withholding_Type)
Funktion
Withholding_Type EQUAL 9
F1 35329f73 2281bccd 307bcdb7 26fa209 0 0 2
-- TaxWithholding Payment PayeeRelationRoleCode Functions
Funktion

F1 307bcdb7 35329f73 0 415c2a70 0 0 2
TaxWithholding Payment PayeeRelationRoleCode is Owner(RelationRoleCode)
Funktion
RelationRoleCode EQUAL "18"
F1 415c2a70 35329f73 0 4923f6a0 0 0 2
TaxWithholding Payment PayeeRelationRoleCode is PrimaryInsured(RelationRoleCode)
Funktion
RelationRoleCode EQUAL "1"
F1 4923f6a0 35329f73 0 12af096e 0 0 2
TaxWithholding Payment PayeeRelationRoleCode is DistributionPaidToInsuredAsAnERD(RelationRoleCode)
Funktion
RelationRoleCode EQUAL "1000500001"
F1 12af096e 35329f73 0 11e3ba4 0 0 2
TaxWithholding Payment PayeeRelationRoleCode is DistributionIsPaidToInsuredAsANonERD(RelationRoleCode)
Funktion
RelationRoleCode EQUAL "1000500002"
F1 11e3ba4 35329f73 0 2e59ed9b 0 0 2
TaxWithholding Payment PayeeRelationRoleCode is DirectRolloverToInsuredAsSameTypeOfPlan(RelationRoleCode)
Funktion
RelationRoleCode EQUAL "1000500003"
F1 2e59ed9b 35329f73 0 5e0730 0 0 2
TaxWithholding Payment PayeeRelationRoleCode is DirectRolloverToInsuredAsDifferentTypeOfPlan(RelationRoleCode)
Funktion
RelationRoleCode EQUAL "1000500004"
F1 5e0730 35329f73 0 629014ad 0 0 2
TaxWithholding Payment PayeeRelationRoleCode is DistributionPaidAsQDROAsADirectRollover(RelationRoleCode)
Funktion
RelationRoleCode EQUAL "1000500005"
F1 629014ad 35329f73 0 55abd72c 0 0 2
TaxWithholding Payment PayeeRelationRoleCode is DistributionPaidAsQDROButNotAsADirectRollover(RelationRoleCode)
Funktion
RelationRoleCode EQUAL "1000500006"
F1 55abd72c 35329f73 0 7fd19e32 0 0 2
TaxWithholding Payment PayeeRelationRoleCode is DistributionPaidToOwnerOrSpouseAsAnERD(RelationRoleCode)
Funktion
RelationRoleCode EQUAL "1000500007"
F1 7fd19e32 35329f73 0 4e763c56 0 0 2
TaxWithholding Payment PayeeRelationRoleCode is DistributionPaidToOwnerOrSpouseAsANonERD(RelationRoleCode)
Funktion
RelationRoleCode EQUAL "1000500008"
F1 4e763c56 35329f73 0 992a79a 0 0 2
TaxWithholding Payment PayeeRelationRoleCode is DirectRolloverToOwnerOrSpouseAsSameTypeOfPlan(RelationRoleCode)
Funktion
RelationRoleCode EQUAL "1000500009"
F1 992a79a 35329f73 0 0 0 0 2
TaxWithholding Payment PayeeRelationRoleCode is DirectRolloverToOwnerOrSpouseAsDifferentTypeOfPlan(RelationRoleCode)
Funktion
RelationRoleCode EQUAL "1000500010"
F1 26fa209 2281bccd 6f57c498 0 0 0 2
-- TaxWithholding TaxDisburseType Functions
Funktion

F1 6f57c498 26fa209 0 14eba3cc 0 0 2
TaxWithholding TaxDisburseType is Excess Contrib Before Filing Date(tax_disburse_type)
Funktion
tax_disburse_type = 5
F1 14eba3cc 26fa209 0 1701f1c8 0 0 2
TaxWithholding TaxDisburseType is Annuitant Purchases Primary Residence(tax_disburse_type)
Funktion
tax_disburse_type = 9
F1 1701f1c8 26fa209 0 54215549 0 0 2
TaxWithholding TaxDisburseType is Disability(tax_disburse_type)
Funktion
tax_disburse_type = 7
F1 54215549 26fa209 0 59e6b33e 0 0 2
TaxWithholding TaxDisburseType is Medical Disability(tax_disburse_type)
Funktion
tax_disburse_type = 15
F1 59e6b33e 26fa209 0 0 0 0 2
TaxWithholding TaxDisburseType is Withdrawal for Rollover_IRS 1099 for 1035 Exchange(tax_disburse_type)
Funktion
tax_disburse_type = 11
F1 4a1cfb84 6273360 1945e36a 778ac2 0 0 2
-- TaxWithholding CalcType --
Funktion

F1 1945e36a 4a1cfb84 0 0 0 0 2
CalcType is Qualified(calcType)
Funktion
calcType ALIKE "Q"
F1 778ac2 6273360 54754fe 2f8e3610 0 0 2
-- Posting Order Functions --
Funktion

F1 54754fe 778ac2 0 39316c67 0 0 2
PostingOrder is LIFO
Funktion
'PI FeatureOptProduct PostingOrder'('Policy ProductCode'; /*'Policy Arrangement ArrType'*/ "WD";'Policy EffDate') = 1
F1 39316c67 778ac2 0 0 0 0 2
PostingOrder is FIFO
Funktion
'PI FeatureOptProduct PostingOrder'('Policy ProductCode'; /*'Policy Arrangement ArrType'*/ "WD";'Policy EffDate') = 5
F1 2f8e3610 6273360 8564747 0 0 0 2
-- Fee FeeWaiverBasedOn Equates --
Funktion

F1 8564747 2f8e3610 0 0 0 0 2
FeeWaiverBasedOn is TransactionYear(feeWaiverBasedOn)
Funktion
feeWaiverBasedOn EQUAL "1000500054"
F1 58dbf6c7 d3b1591 1cf13d12 21e49584 0 0 2
-- Debug Functions --
Funktion

F1 1cf13d12 58dbf6c7 ac11e7c 457d9acb 0 0 2
VPMS Debug Message(FunctionDefinition; ParmListValues; result)
Funktion
IF (NOT('VPMS Debug On') ; çä  result ; çä  'VPMS Result and Send Message'(MESSAGE('VPMS Function Name'(FunctionDefinition) & " called" & CHR(10) & 'VPMS Debug Message Rec'('VPMS Parm List Name Vector'(FunctionDefinition);ParmListValues) & " result=" & IF (V_LENGTH(result) > 0 ; çä    V_STRINGX(result) ; çä    resultçä  );"");result //result moved outside of message functionçä)çä)
F1 ac11e7c 1cf13d12 0 51fb44b2 0 0 2
VPMS Function Name(Def)
Funktion
MID(Def;1;IF (INSTR(Def;"(") > 0 ; çä  INSTR(Def;"(") - 1 ; çä  LENGTH(Def)çä))
F1 51fb44b2 1cf13d12 62293ac4 3c1958ed 0 0 2
VPMS Parm List Name Vector(Def)
Funktion
IF (INSTR(Def;"(") > 0 ; çä  'VPMS tokens'(SUBST(SUBST(MID(Def;INSTR(Def;"(") + 1);",";";");")";"")) ; çä  V_("")çä)
F1 62293ac4 51fb44b2 0 0 0 0 2
VPMS tokens(Def)
Funktion
IF (LENGTH(Def) > 0 ; çä  IF (INSTR(Def;";") > 0 ; çä    V_CONCAT(V_(LEFT(Def;INSTR(Def;";") - 1));'VPMS tokens'(MID(Def;INSTR(Def;";") + 1))) ; çä    LEFT(Def;LENGTH(Def))çä  ) ; çä""çä)
F1 3c1958ed 1cf13d12 0 0 0 0 2
VPMS Result and Send Message(message; result)
Funktion
IF (ISNUMBER(message) ; çä  result ; çä  resultçä)
F1 457d9acb 58dbf6c7 0 63572dc7 0 0 2
VPMS Debug On
Funktion
IF (vpmcompute('ACCS Rate Location Model Name';"$DEBUG") = 0 ; çä  0 ; çä   //debug offçä1 //debug onçäçä)
F1 63572dc7 58dbf6c7 0 1e869ea9 0 0 2
VPMS IFO On
Funktion
0 /*IF(vpmcompute('ACCS Rate Location Model Name';"$IFO_ACTIVE") = 0;çäâ0;  //IFO offçäâ1  //IFO onçä)çäâä*/ 
F1 1e869ea9 58dbf6c7 0 6414d25f 0 0 2
VPMS Debug Message Rec(ParmListNames;  ParmListValues)
Funktion
CASE(V_LENGTH(ParmListNames);çä  0 : "";çä  1 : E_(ParmListNames;0) & "=" & IF (V_LENGTH(E_(ParmListValues;0)) > 0 ; çä    V_STRINGX(E_(ParmListValues;0)) ; çä    E_(ParmListValues;0)çä  ) & CHR(10);çä : E_(ParmListNames;0) & "=" & IF (V_LENGTH(E_(ParmListValues;0)) > 0 ; çä  V_STRINGX(E_(ParmListValues;0)) ; çä  E_(ParmListValues;0)çä) & " " & 'VPMS Debug Message Rec'(V_REST(ParmListNames);V_REST(ParmListValues)))çä
F1 6414d25f 58dbf6c7 0 41aafde2 0 0 2
VPMS Debug Message with UTV Rec(ParmListValues)
Funktion
CASE(V_LENGTH(ParmListValues);çä  0 : "";çä  1 : QUOTE(IF (V_LENGTH(E_(ParmListValues;0)) > 0 ; çä    V_STRINGX(E_(ParmListValues;0)) ; çä    E_(ParmListValues;0)çä  ));çä : QUOTE(IF (V_LENGTH(E_(ParmListValues;0)) > 0 ; çä  V_STRINGX(E_(ParmListValues;0)) ; çä  E_(ParmListValues;0)çä)) & ";" & 'VPMS Debug Message with UTV Rec'(V_REST(ParmListValues)))çä
F1 41aafde2 58dbf6c7 0 4419ac61 0 0 2
VPMS Debug Message with UTV(FunctionDefinition;  ParmListValues; result)
Funktion
IF (NOT('VPMS Debug On') ; çä  result ; çä  IF (MESSAGE('VPMS Function Name'(FunctionDefinition) & " called" & CHR(10) & 'VPMS Debug Message Rec'('VPMS Parm List Name Vector'(FunctionDefinition);ParmListValues) //lists parms and values passed to functionçä & "UTV=?*" & 'VPMS Function Name'(FunctionDefinition) & "(" & 'VPMS Debug Message with UTV Rec'(ParmListValues) & ")=" & IF (V_LENGTH(result) > 0 ; çä    V_STRINGX(result) ; çä    resultçä  ) & CHR(10) & " result=" & IF (V_LENGTH(result) > 0 ; çä  V_STRINGX(result) ; çä  resultçä) & CHR(10);1) = 1 ; çäresult ; çäresultçä)çä)
F1 4419ac61 58dbf6c7 0 12a212b3 0 0 2
VPMS Runtime Version
Funktion
VPMCOMPUTE('ACCS Rate Location Model Name';"$version")
F1 12a212b3 58dbf6c7 0 79a9bf50 0 0 2
VPMS Solve Debug Switch(SolveMethod)
Funktion
IF ('VPMS Debug On' ; çä  SolveMethod + 100 ; çä   //debug onçäSolveMethod //debug offçäçä)
F1 79a9bf50 58dbf6c7 0 0 0 0 2
--VPMS Debug Message Old(FunctionName; ParmListNames;  ParmListValues; result)
Funktion
IF( NOT('VPMS Debug On');çäâresult;çäâMESSAGE(FunctionName&" called"&CHR(10)çäââ&â'VPMS Debug Message Rec'(ParmListNames;  ParmListValues)çäââ&" result="& IF(V_LENGTH(result)>0; V_STRINGX(result); result);çäâçäââ  result)çä)ââ  âçä çäâ
F1 21e49584 d3b1591 3a75f8e4 717ef45b 0 0 2
-- pA 1001 PAC009 New Rules (To be Moved) --
Funktion

F1 3a75f8e4 21e49584 0 6895ac60 0 0 2
Allocation is As Premium(allocationType)
Funktion
allocationType = 1
F1 6895ac60 21e49584 0 333bac79 0 0 2
Allocation is Evenly(allocationType)
Funktion
allocationType = 4
F1 333bac79 21e49584 0 67c1f70a 0 0 2
Allocation is Percentage in Account(allocationType)
Funktion
allocationType = 3
F1 67c1f70a 21e49584 0 7961be0d 0 0 2
Allocation is Proportional(allocationType)
Funktion
allocationType = 2
F1 7961be0d 21e49584 0 1d447200 0 0 2
Allocation is Specified Fund(allocationType)
Funktion
allocationType EQUAL "1000500001"
F1 1d447200 21e49584 0 3fa30ff5 0 0 2
Allocation is Unknown(allocationType)
Funktion
allocationType = 0
F1 3fa30ff5 21e49584 0 0 0 0 2
Calculation is for Multiple Funds
Funktion
'Policy Number of SubAccount' > 1
F1 717ef45b d3b1591 6b45a256 d342549 0 0 2
-- NULL & NORES & BLANK --
Funktion

F1 6b45a256 717ef45b 0 3b13233f 0 0 2
NORES is Returned(var)
Funktion
var ALIKE "#NORES"
F1 3b13233f 717ef45b 0 3a82fb2 0 0 2
NORES is Not Returned(var)
Funktion
var NOTALIKE "#NORES"
F1 3a82fb2 717ef45b 0 317a8d53 0 0 2
Blank is Not Returned(var)
Funktion
var NOTALIKE ""
F1 317a8d53 717ef45b 0 1a397a7b 0 0 2
None is Returned(var)
Funktion
var ALIKE "None"
F1 1a397a7b 717ef45b 0 0 0 0 2
Is Blank(var)
Funktion
var ALIKE ""
F1 d342549 d3b1591 152c60bb 5ac6e665 0 0 2
-- PAC013 - calcType
Funktion

F1 152c60bb d342549 2aa2674d 0 0 0 2
-- Variable Illustrations --
Funktion

F1 2aa2674d 152c60bb 0 b3c44ce 0 0 2
CalcType Is VarIllCurrAssumed Identifier(calcType)
Funktion
calcType ALIKE 'CalcType VarIllCurrAssumed Identifier'
F1 b3c44ce 152c60bb 0 79f0049a 0 0 2
CalcType Is VarIllCurrMid Identifier(calcType)
Funktion
calcType ALIKE 'CalcType VarIllCurrMid Identifier'
F1 79f0049a 152c60bb 0 9c6b76c 0 0 2
CalcType Is VarIllGuarAssumed Identifier(calcType)
Funktion
calcType ALIKE 'CalcType VarIllGuarAssumed Identifier'
F1 9c6b76c 152c60bb 0 6ac4a1db 0 0 2
CalcType Is VarIllCurrZero Identifier(calcType)
Funktion
calcType ALIKE 'CalcType VarIllCurrZero Identifier'
F1 6ac4a1db 152c60bb 0 3497be46 0 0 2
CalcType Is VarIllGuarZero Identifier(calcType)
Funktion
calcType ALIKE 'CalcType VarIllGuarZero Identifier'
F1 3497be46 152c60bb 0 0 0 0 2
CalcType Is VarIllGuarMid Identifier(calcType)
Funktion
calcType ALIKE 'CalcType VarIllGuarMid Identifier'
F1 5ac6e665 d3b1591 98bcd5b 0 0 0 2
--PAC024 - Annual Statement Projections
Funktion

F1 98bcd5b 5ac6e665 48f2a24d 0 0 0 2
-- Premium --
Funktion

F1 48f2a24d 98bcd5b 0 2601370e 0 0 2
Calculate AS Projections with Alternative Premium(calcType)
Funktion
calcType ALIKE 'CalcType AS ALTPRM Identifier'
F1 2601370e 98bcd5b 0 7acd4b21 0 0 2
Calculate AS Projections with No Premium(calcType)
Funktion
calcType ALIKE 'CalcType AS NOPRM Identifier'
F1 7acd4b21 98bcd5b 0 16898a25 0 0 2
Calculate AS Projections with Planned Premium(calcType)
Funktion
calcType ALIKE 'CalcType AS PLANPRM Identifier'
F1 16898a25 98bcd5b 0 0 0 0 2
Calculate AS Projections with Shadow Premium(calcType)
Funktion
calcType ALIKE 'CalcType AS SHADOWPRM Identifier'
A0 235c35c 0 0 0 0 0 0

T0 235c3cc 0 0 0 0 0 0

I0 235c43c 0 23508a0 0 0 0 0

I0 23508a0 235c43c 0 0 0 0 0
GeneralFunctions.pms
-
O0
E0
L0
B0
P1
235c8b0
F1
d3b1591
A0
T0
!519
4f5293d4 -2 -2
Description:  Maps calc method to string value description to allow for strings to be used in case statements, thus eliminating hard-coded ACORD values from calcualtion functions.çä çä10/03/2014 - PA1403 - rm - Initial functionçä
7be2e2f1 -2 -2
çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parm
129af203 -2 -2
çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parm
5a9727a6 -2 -2
çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parm
12956392 -2 -2
çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parm
7700838c -2 -2
çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parm
5f71c9e3 -2 -2
çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parm
18f3e92 -2 -2
çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parm
2006935d -2 -2
çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parm
214dc6e6 -2 -2
çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parm
5fa7b069 -2 -2
çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parm
208246f2 -2 -2
Description: Checks whether the coverage is LTC or contains an LTC optionçä çäModification log:çä10/29/2011 - rm - Simplified Boolean logicçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçäPAC001 - 08/28/2009 - wdp - CSC Initial FunctionçäPAC001 - 12/15/2009 - vm - moved from LongTermCareCalcs mod to Readability mod
37cc9564 -2 -2
Description: Determines whether CV adjustments due to LTC is amounts rather than proportionsçä çäModification Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä08/31/2009 - PAC001 - wdp - CSC Initial FunctionçäPAC001 - 12/15/2009 - vm - moved from LongTermCareCalcs mod to Readability mod
7fe16b7a -2 -2
Description: Determines whether CV adjustments due to LTC is proportions rather than amountsçä çäModification Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä08/31/2009 - PAC001 - wdp - CSC Initial FunctionçäPAC001 - 12/15/2009 - vm - moved from LongTermCareCalcs mod to Readability mod
67c44261 -2 -2
Description : Returns true if LTC rider is a coverage based on a life productçä çäModification Log :çäPAC001 - 8/6/2009 - NT - CSC Initial FunctionçäPAC001 - 12/15/2009 - vm - moved from LongTermCareCalcs mod to Readability mod
1b3d9f40 -2 -2
Description : Returns true if LTC rider is a coverage option based on a life productçä çäModification Log :çäPAC001 - 8/6/2009 - NT - CSC Initial FunctionçäPAC001 - 12/15/2009 - vm - moved from LongTermCareCalcs mod to Readability mod
721933ba -2 -2
Description : Returns true if LTC rider is based on Annuity productçä çäModification Log :çäPAC001 - 8/6/2009 - NT - CSC Initial FunctionçäPAC001 - 12/15/2009 - vm - moved from LongTermCareCalcs mod to Readability mod
cfc3510 -2 -2
Description: Determines whether the LTC coverage(option) is a Coverage Reduction Type, based on LTCClaimDBSurrAdjustçä çäModification log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä08/31/2009 - PAC001 - wdp - CSC Initial FunctionçäPAC001 - 12/15/2009 - vm - moved from LongTermCareCalcs mod to Readability mod
14bd6b7 -2 -2
Description: Determines whether the LTC coverage(option) is a Lien Type, based on LTCClaimDBSurrAdjustçä çäModification log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä08/31/2009 - PAC001 - wdp - CSC Initial FunctionçäPAC001 - 12/15/2009 - vm - moved from LongTermCareCalcs mod to Readability mod
64175763 -2 -2
Description: Returns TRUE for basic illustration typesçä çäModification Log:çä10/27/2009 âPAC002ârm âInitial function
699e609c -2 -2
Description: Returns true for Deferred Compensation advanced marketing illustration typesçä çäModification Log:çä10/27/2009 âPAC002ârm âInitial function
2efe7a45 -2 -2
Description: Returns true for Deferred Comp - SERP advanced marketing illustration typesçä çäModification Log:çä10/27/2009 âPAC002ârm âInitial function
67844d58 -2 -2
Description: Returns true for Deferred Comp - Salary Deferral advanced marketing illustration typesçä çäModification Log:çä10/27/2009 âPAC002ârm âInitial function
79f84a97 -2 -2
Description: Returns true for Executive Bonus advanced marketing illustration typesçä çäModification Log:çä10/27/2009 âPAC002ârm âInitial function
5fa29d98 -2 -2
Description: Returns true for Key Person advanced marketing illustration typesçä çäModification Log:çä10/27/2009 âPAC002ârm âInitial function
6f95878e -2 -2
Description: Returns true for Split Dollar advanced marketing illustration typesçä çäModification Log:çä10/27/2009 âPAC002ârm âInitial function
7b48627a -2 -2
Description: Returns true for Split Dollar Endorsement advanced marketing illustration typesçä çäModification Log:çä10/27/2009 âPAC002ârm âInitial function
63ce9697 -2 -2
Description: Returns true for Split Dollar Collateral Assignment advanced marketing illustration typesçä çäModification Log:çä10/27/2009 âPAC002ârm âInitial function
24082ecb -2 -2
Description: Returns true for Reverse Split Dollar advanced marketing illustration typesçä çäModification Log:çä10/27/2009 âPAC002ârm âInitial function
23543837 -2 -2
Description: Returns true for Aggregate Funding advanced marketing illustration typesçä çäModification Log:çä01/26/2011 âPAC002âWA âInitial function
3a4155ff -2 -2
Description: Returns TRUE for advanced marketing illustration rollout option is Corp interest bonused to execçäâSplit Dollar Endorsement Assignment Onlyçä çäModification Log:çä12/10/2009 âPAC002ârm âInitial function
7071f33 -2 -2
Description: Returns TRUE for advanced marketing illustration rollout option is Corp interest double-bonused to execçä çäModification Log:çä12/10/2009 âPAC002ârm âInitial function
744543af -2 -2
Description: Returns TRUE for advanced marketing illustration rollout option is Exec reimburses Corpçä çäModification Log:çä12/10/2009 âPAC002ârm âInitial function
1441dc34 -2 -2
Description: Returns TRUE for advanced marketing illustration rollout option is Executive Repays Loan to CorpçäâSplit Dollar Collateral Assignment Onlyçä çäModification Log:çä12/15/2009 âPAC002ârm âInitial function
7259aec0 -2 -2
Description: Returns TRUE for advanced marketing illustration rollout option is Corp forgives loan to ExecçäâSplit Dollar Collateral Assignment Onlyçä çäModification Log:çä12/10/2009 âPAC002ârm âInitial function
4591546 -2 -2
Description: Returns TRUE for advanced marketing illustration rollout option is Corp terminates endorsement and retains policyçäâSplit Dollar Endorsement Assignment Onlyçä çäModification Log:çä12/10/2009 âPAC002ârm âInitial function
19754616 -2 -2
Description: Returns TRUE for advanced marketing illustration rollout option is Corp pays out zero cost bonus to execçäâSplit Dollar Endorsement Assignment Onlyçä çäModification Log:çä12/10/2009 âPAC002ârm âInitial function
14a35d43 -2 -2
Description: Returns TRUE for advanced marketing illustration rollout type for age at retirementçä çäModification Log:çä10/27/2009 âPAC002ârm âInitial function
5601f87 -2 -2
Description: Returns TRUE for advanced marketing illustration rollout type for specified attained ageçä çäModification Log:çä10/27/2009 âPAC002ârm âInitial function
17f055b4 -2 -2
Description: Returns TRUE for advanced marketing illustration rollout type for specified policy yearçä çäModification Log:çä10/27/2009 âPAC002ârm âInitial function
32eb24b9 -2 -2
Description: Returns 1 if the benefit period option is "specified duration"; else 0.çä çäModification Log:çä10/06/09 - PAC02 - JL - Initial Calculationçä11/23/09 - PAC02 - JL - Renamed, reparametrized.çä01/26/10 - PAC02 - JL - Moved to submodel (from AMI)
7098b0ea -2 -2
Description: Returns 1 if the benefit period option is "specified age"; else 0.çä çäModification Log:çä10/06/09 - PAC02 - JL - Initial Calculationçä11/23/09 - PAC02 - JL - Renamed, reparametrized.çä01/26/10 - PAC02 - JL - Moved to submodel (from AMI)
67a0fb6e -2 -2
Description: Returns 1 if the benefit period option is "life"; else 0.çä çäModification Log:çä10/06/09 - PAC02 - JL - Initial Calculationçä11/23/09 - PAC02 - JL - Renamed, reparametrized.çä01/26/10 - PAC02 - JL - Moved to submodel (from AMI)
15777b7f -2 -2
Description: Returns 1 if the Cost Recovery Option is Totalçä çäModification Log:çä11/23/09 - PAC02 - JL - Initial Calculationçä01/26/10 - PAC02 - JL - Moved to submodel (from AMI)
677ca837 -2 -2
Description: Returns 1 if the Cost Recovery Option is Benefits Onlyçä çäModification Log:çä11/23/09 - PAC02 - JL - Initial Calculationçä01/26/10 - PAC02 - JL - Moved to submodel (from AMI)
1e88dc81 -2 -2
Description: Returns 1 the cost recovery duration option is "funded mortality"çä çäModification Log:çä11/25/09 - PAC02 - JL - Initial Functionçä01/26/10 - PAC02 - JL - Moved to submodel (from AMI)
28520ac0 -2 -2
Description: Returns 1 the cost recovery duration option is "pre-retirement"çä çäModification Log:çä11/25/09 - PAC02 - JL - Initial Functionçä01/26/10 - PAC02 - JL - Moved to submodel (from AMI)
545da71a -2 -2
Description: Returns 1 the cost recovery duration option is "retirement"çä çäModification Log:çä11/25/09 - PAC02 - JL - Initial Functionçä01/26/10 - PAC02 - JL - Moved to submodel (from AMI)
4a56530e -2 -2
Description: Returns 1 the cost recovery duration option is "all years"çä çäModification Log:çä11/25/09 - PAC02 - JL - Initial Functionçä01/26/10 - PAC02 - JL - Moved to submodel (from AMI)
6b6097b -2 -2
Description: If the AnnuityProduct is a single premium immediate annuity return a 1, else 0.çä çäModification log:çä08/6/2010 - PAC019 - Rate Access Var - BT - added parm to 'PI Use Attributes'çänba Merge into Staging - 4/20/2010 - BT - add option to get from inputs and remove coverageIndex from product definition functionsçä10/21/2009 PAC005 DT added
3ac8f078 -2 -2
Description: Returns True IF the lives type is Single Lifeçä çäModification Log:çä09/23/2010 rm - Initial function
5327ce2f -2 -2
Description: Returns True IF the lives type is Joint Lifeçä çäModification Log:çä10/15/2010 rm - Initial function
576f971b -2 -2
Description: Returns True IF the lives type is Joint Life - First to dieçä çäModification Log:çä09/23/2010 rm - Initial function
662a1ef2 -2 -2
Description: Returns True IF the lives type is Joint Life - Last survivorçä çäModification Log:çä09/23/2010 rm - Initial function
831dfca -2 -2
Description: Returns True IF the payout income option is period certainçä çäModification Log:çä10/19/2010 rm - Initial function
20939a93 -2 -2
Description: Returns True IF the payout income option is greater of period certain & lifeçä çäModification Log:çä10/19/2010 rm - Initial function
14f6167f -2 -2
Description: Returns True IF the payout income option is lesser of life and period certainçä çäModification Log:çä10/19/2010 rm - Initial function
14f6167f 0 1

2eda6ef5 -2 -2
Description: Returns True IF the payout income option is for interest onlyçä çäModification Log:çä10/19/2010 rm - Initial function
46978275 -2 -2
Description: Returns True IF the payout income option is Life Plus Lump Sum (AKA Lump Sum Refund)çä çäModification Log:çä10/19/2012 rm - Initial function
46978275 0 1

15b1f1ed -2 -2
Description: Returns True IF the payout income option is Life Plus Installment Refundçä çäModification Log:çä10/19/2012 rm - Initial function
15b1f1ed 0 1

2955274b -2 -2
Description: Returns True IF the mortality assumption within the year is UDD (Universal Distribution of Deaths)çä çäModification Log:çä10/14/2010 rm - Initial function
375de0d9 -2 -2
Description: describes the distribution method of the annual exclusion amount.çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä11.18.2010 - PAC 010 - VM - Initial calculation.
2c26cbbf -2 -2
Description: describes the distribution method of the annual exclusion amount.çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä11.18.2010 - PAC 010 - VM - Initial calculation.
55732cdd 0 1

3773cafc 0 1

69717fb5 -2 -2
Description: Returns True IF the mortality assumption within the year is Balducciçä çäModification Log:çä05/08/2014 PA1403 PAC039 DIA JL Initial function
4b48ece4 -2 -2
Description: Returns True IF the mortality assumption within the year is CDD (Constant Force of Death)çä çäModification Log:çä05/08/2014 PA1403 PAC039 DIA JL Initial function
793431ad -2 -2
Description: Returns True IF the mortality assumption within the year is None (No Smoothing)çä çäModification Log:çä05/08/2014 PA1403 PAC039 DIA JL Initial function
2e11476d -2 -2
Description: Returns True IF the account type is credit (based on OLI_ACCTDBCRTYPE)çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
26934893 -2 -2
Description: Returns True IF the account type is debit (based on OLI_ACCTDBCRTYPE)çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
ace8f89 -2 -2
Description: Returns True IF the rider subtype code is Greater of Growth or Step Upçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
7656a820 -2 -2
Description: Returns True IF the rider subtype code is Growthçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
4de4f57f -2 -2
Description: Returns True IF the rider subtype code is Step Upçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
3452af88 -2 -2
Description: Returns True IF the amount type is Netçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
5f7206bc -2 -2
Description: Returns True IF the amount type is Grossçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
cdd1ffa -2 -2
Description:  Returns TRUE if arrangement type is Transferçä çäModification Log:çä06/20/2013 WMAJ1301-1000 rm  Initial Function
698a99a4 -2 -2
Description:  Returns TRUE if arrangement type is Rebalanceçä çäModification Log:çä07/16/2013 WMAJ1301-1206 rm  Initial Function
72513c4 -2 -2
Description:  Returns TRUE if arrangement type is Rebalanceçä çäModification Log:çä07/16/2013 WMAJ1301-1206 rm  Initial Function
505bfdac -2 -2
Description:  Returns TRUE if arrangement type is Rebalanceçä çäModification Log:çä07/16/2013 WMAJ1301-1206 rm  Initial Function
2d496007 -2 -2
Description:  Returns true IF arrangement type is Net Withdrawalçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
e421db5 -2 -2
Description:  Returns true IF arrangement type is Net Withdrawalçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
3b888d06 -2 -2
Description:  Returns true IF arrangement type is full surrender or gross partial surrenderçä çäModification Log:çä1/30/2013 wmA-J 1301 Release 2 Sprint 9 Jira 765 update for check for full and partial annuitizations.çä10/31/2007 CSC Initial Calculation/Rule
28d1cb6e -2 -2
Description:  Maps arrangement typesçä çä01/06/2015 wmA-J 1501 Sprint 12 JvdM Death Claim added.çä10/22/2013 - WMAJ1301-1392 - rm - Initial function
29d9a07a -2 -2
Description:  Returns true IF arrangement type is full surrender or gross partial surrenderçä çäModification Log:çä1/30/2013 wmA-J 1301 Release 2 Sprint 9 Jira 765 update for check for full and partial annuitizations.çä10/31/2007 CSC Initial Calculation/Rule
6344cfa6 -2 -2
Description:  Returns true IF arrangement type is Gross Withdrawalçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
86b1e29 -2 -2
Description:  Returns true IF arrangement type is Max Withdrawalçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
5ca3cbe7 -2 -2
Description:  Returns true IF arrangement type is Full Surrenderçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
57d37098 -2 -2
Description:  Returns true IF arrangement type is Full Surrenderçä çäModification Log:çä06/13/2013 wmA-J 1401 Release 1 Sprint 1 JvdM Changed to 1000500007.çä1/30/2013 wmA-J 1301 Release 2 Sprint 9 Jira 765 initial calc
2a8f21d5 -2 -2
Description:  Returns true IF arrangement type is Full Surrenderçä çäModification Log:çä06/13/2013 wmA-J 1401 Release 1 Sprint 1 JvdM Changed to 1000500001.çä1/30/2013 wmA-J 1301 Release 2 Sprint 9 Jira 765 initial calc
7385bb8e -2 -2
Description:  Returns true IF arrangement type is Full Surrenderçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
b7d375b -2 -2
Description:  Returns true IF arrangement type is Cancellationçä çäModification Log:çä
36c5706b -2 -2
Description:  Returns true IF arrangement type is Cancellationçä çäModification Log:çä10/11/2012 wmA-J 1301 Release 2 Sprint 5 CMC Initial Calc
7385038b -2 -2
Description:  Returns true IF arrangement type is Cancellationçä çäModification Log:çä10/11/2012 wmA-J 1301 Release 2 Sprint 5 CMC Initial Calc
753cdf66 -2 -2
Description:  Returns true IF arrangement type is Cancellationçä çäModification Log:çä10/11/2012 wmA-J 1301 Release 2 Sprint 5 CMC Initial Calc
541a8713 -2 -2
Description: Returns true IF arrangement type is Net Withdrawalçä çäModification log:çä05/10/2013 wmA-J Release 4 Sprint 13 JvdM Initial Calc
2234e8b -2 -2
Description: Returns true IF arrangement type is full surrender or gross partial surrenderçä çäModification log:çä05/10/2013 wmA-J Release 4 Sprint 13 JvdM Initial Calc
66ecd787 -2 -2
Description: Returns true IF arrangement type is Net Withdrawal (Only net of surrender charges)çä çäModification log:çä05/14/2013 wmA-J Release 4 Sprint 13 JvdM Changed to extension 1000500006, as provided by Brian Brockel.çä05/10/2013 wmA-J Release 4 Sprint 13 JvdM Initial Calcçä
11496ea1 -2 -2
Description:  Returns true IF asset class is Equityçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
65ad0ea7 -2 -2
Description:  Returns true IF asset class is Fixedçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
4ad1985 -2 -2
Description:  Returns true IF asset class is equity index fundçä çäModification Log:çä11/12/2013 - WMAJ1301-1337 - rm - Initial Calculation/Rule
16db329d -2 -2
Modification log:çä çä07/15/2010 CMC wmA Integration EHN1011 Update Policy Coverage LifeCovTypeCode to PI CoverageProduct LifeCovTypeCodeçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä09/17/2009 - PAC006 - wdp - Changed BIR check to 'Coverage Type is BIR'(coverageIndex) to avoid confusion with AIR
a9b5c6b -2 -2
Description: Returns 1 if coverage is a Term Rider, 0 otherwiseçä çä07/15/2010 CMC wmA Integration EHN1011 Update Policy Coverage LifeCovTypeCode to PI CoverageProduct LifeCovTypeCodeçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/17/2009 - PAC001 - wdp - CSC Initial function.
3b7eae4c -2 -2
Description: Returns 1 if coverage is a Term Rider, 0 otherwiseçä çä04/06/2011 CMC wmA Integration merge regression Update Policy Coverage LifeCovTypeCode to PI CoverageProduct LifeCovTypeCodeçä07/15/2010 CMC wmA Integration EHN1011 Update Policy Coverage LifeCovTypeCode to PI CoverageProduct LifeCovTypeCodeçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/17/2009 - PAC001 - wdp - CSC Initial function.
151a004c -2 -2
çä07/15/2010 CMC wmA Integration EHN1011 Update Policy Coverage LifeCovTypeCode to PI CoverageProduct LifeCovTypeCodeçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parm
5776d43a -2 -2
Description: Returns True IF the db option is Levelçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
21e3c423 -2 -2
Description: Returns True IF the db option is Increasingçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
34ace2fc -2 -2
Description: Returns True IF the db option is Increasing with return of premiumçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
dd5d73 -2 -2
Description: Returns True IF the DefLifeInsMethod is CVATçä çäModification Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä10/31/2007 CSC Initial Calculation/Ruleçä06/2/2010 - rm - Added method 5 (DEFRA cash value accumulation test)
70ce0383 -2 -2
Description: Returns True IF the DefLifeInsMethod is Guideline Premiumçä çäModification Log:çä12/1/2008 CSC Initial Calculation/Ruleçä06/2/2010 - rm - Added method 4 (DEFRA guideline premium test)
348c4c68 -2 -2
Description - Code for No Disbursement Solves.çä çäModification log:çä8/22/2011 - pA1975 - CMC -Initial rule/calculation
15a16afb -2 -2
Modification log:çä9/30/2008 -vj- initial function
4be4bd60 -2 -2
Description: Returns True IF the calc type is Pointçä çäModification Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä10/31/2007 CSC Initial Calculation/Rule
66852573 -2 -2
Description: Returns True IF the calc type is Averageçä çäModification Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä10/31/2007 CSC Initial Calculation/Rule
5598b4b9 -2 -2
Description: Returns True IF the calc type is HighWaterMarkçä çäModification log:çä11/06/2012 wmA-J 1301 Release 2 Sprint 6 JvdM Initial Calc
170d2f58 -2 -2
Description: Returns True IF the calc type is HighWaterMarkçä çäModification log:çä11/06/2012 wmA-J 1301 Release 2 Sprint 6 JvdM Initial Calc
5cc50ee2 -2 -2
çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parm
715f8880 -2 -2
çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parm
7383f373 -2 -2
Description: Checks if FaceAmtDesignType is Streamçä çä09/14/2009 - PAC006 - wdp - CSC Initial Function
bfa142e -2 -2
Description: Returns True IF the FeeType is PolicyFeeçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
b8dd273 -2 -2
Description: Returns True IF the FeeType is Collection Feeçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
28a53c8e -2 -2
Description: Returns True IF the FeeType is Partial Surrender Chargeçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
6a854c16 -2 -2
Description: Returns True IF the FeeType is Full Surrender Chargeçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
60a7b9bb -2 -2
Description: Returns True IF the FeeType is Other Asset Based Chargeçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
60f68b83 -2 -2
Description: Returns True IF the FeeType is Premium Loadçä çäModification Log:çä06/28/2010 wmA_ENH992_merge JL Merge wmA changes to Staging
60f68b83 0 1

514bc2ab -2 -2
Description: Returns True IF the FeeType is Premium Tax on Surrenderçä çäModification Log:çä03/08/2012 wmA-JâCMC Initial Calculation/Rule
9579d37 -2 -2
Description: Returns true ifçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for Premium Payment = "1"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
625e0567 -2 -2
Description: Returns true ifçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for Loan Payment = "2"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
bd3c56c -2 -2
Description: Returns true ifçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for Gross Loan = "3"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
4ef3ab23 -2 -2
Description: Returns true ifçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for Net Withdrawal = "6"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
2812b45c -2 -2
Description: Returns true if financial activity type is net withdrawal (Surrender Charges Only)çä çäModification Log:çä08/15/2012 - wmAJ - BP - Release 2 Sprint 2 -  Initial Calculation/Rule
1994cf10 -2 -2
Description: Returns true if financial activity type is net withdrawal (Surrender Charges, Fees and Tax)çä çäModification Log:çä08/15/2012 - wmAJ - BP - Release 2 Sprint 2 -  Initial Calculation/Rule
7f5aa11 -2 -2
Description: Returns true if financial activity type is net withdrawal (Surrender Charges, Fees and Tax)çä çäModification Log:çä08/15/2012 - wmAJ - BP - Release 2 Sprint 2 -  Initial Calculation/Rule
5f3b3993 -2 -2
Description: Returns true ifçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for Initial Payment = "7"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
79d3d9bb -2 -2
Description: Returns true ifçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for Additional Payment into a Single Premium Policy = "9"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
613ace17 -2 -2
Description: Returns true ifçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for Full Surrender = "10"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
28eb2598 -2 -2
Description: Returns true ifçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for Partial Surrender = "11"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
33519a40 -2 -2
Description: Returns true ifçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for Minimum Distribution = "102"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
4c45f2fd -2 -2
Description: Returns true ifçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for External Rollover = "192"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
784edef0 -2 -2
Description: Returns true ifçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for Internal Rollover = "193"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
4c5fac23 -2 -2
Description: Returns true ifçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for External Rollover from Tax QualIFied Source = "194"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
56bbadbc -2 -2
Description: Returns true ifçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for External Rollover to Roth IRA= "195"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
6c273ba4 -2 -2
Description: Returns true ifçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for External 1035 = "196"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
8d64fb2 -2 -2
Description: Returns true ifçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for External 1035 Additional = "197"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
4db0cbdb -2 -2
Description: Returns true ifçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for Internal Rollover to Roth IRA= "198"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
5b3eeb61 -2 -2
Description: Returns true ifçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for Initial 1035 Payment = "210"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
3e82b020 -2 -2
Description: Returns true ifçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for Additional 1035 Payment = "211"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
204fdc80 -2 -2
Description: Returns true ifçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for Specified Dollar Amt Withdrawal  = "294"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
5367d6e8 -2 -2
Description: Returns true ifçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for Surrender Free Amount Withdrawal  = "295"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
6c367ca8 -2 -2
Description: Returns true ifçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for Interest Only Withdrawal (Net)  = "296"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
1ee41603 -2 -2
Description: Returns true ifçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for Interest Only Withdrawal (Gross)  = "297"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
2f17003 -2 -2
Description: Returns true ifçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for Required Minimum Distribution Withdrawal  = "298"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
67bdda0a -2 -2
Description: Returns true ifçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for Single and Top Up Premiums = "351"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
6ace39bb -2 -2
Description: Returns true ifçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for Administration Fee = "14"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
7ceb960 -2 -2
Description: Returns true ifçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for Loan Payment From Dividends = "246"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
3e065dfe -2 -2
Description: Returns true ifçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for Accumulation Dividend Option = "244"çä çäModification Log:çä11/23/2009 - PAC004 - MO - initial calculation/rule
25edcad4 -2 -2
Description: Returns true ifçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for Cash From Dividends = "241"çä çäModification Log:çä11/23/2009 - PAC004 - MO - initial calculation/rule
18e7a4b8 -2 -2
Description: gives a monthly charge by policy coverageçä çäModification Log:çä10/13/2011 - rm - Simplified Boolean logicçä12/11/2009- PAC004-tt-Initial Calculation/Rule
3b756af1 -2 -2
Description: Retruns true if FinActivityType is a Claim Paymentçä çäModification log: çäPAC001 - 8/17/2009 - wdp - Initial Function
1ee72181 -2 -2
Description: Returns true ifçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for Dividends Purchase Paid Up Additions = "242"çä çäModification Log:çä11/23/2009 - PAC004 - MO - initial calculation/rule
6ba88ca5 -2 -2
Description: Returns true ifçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for Pay Premium From Dividends = "243"çä çäModification Log:çä11/23/2009 - PAC004 - MO - initial calculation/rule
2c140a69 -2 -2
Description: Returns true ifçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for Purchase Term Dividend Option = "245"çä çäModification Log:çä11/23/2009 - PAC004 - MO - initial calculation/rule
1b80d468 -2 -2
Description: Returns true if financial activity is tax on surrendersçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for Tax on Surrenders = "360"çä çäModification Log:çä10/07/2010 - PAC018 - JL - initial calculation/rule
69ca7cde -2 -2
Description: Returns true IF activity_type is "Annuitization Account Value Adjustment Increase"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030 CSC Initial Calculation/Rule
73cd8559 -2 -2
Description: Returns true if activity_type matchesçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value forAutomatic Premium Loan = "301"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030 CSC Initial Calculation/Rule
7bc790de -2 -2
Description: Returns true if activity_type matchesçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for Capitalized Advance Loan Interest = "306"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030 CSC Initial Calculation/Rule
32701f3d -2 -2
Description: Returns true if activity_type matchesçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for Capitalized Arrears Loan Interest = "307"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030 CSC Initial Calculation/Rule
4f081cc4 -2 -2
Description: Returns true IF activity_type is "Conversion ETI"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030 CSC Initial Calculation/Rule
58886938 -2 -2
Description: Returns true IF activity_type is "Conversion Fully Paid Up"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030 CSC Initial Calculation/Rule
14d472d4 -2 -2
Description: Returns true IF activity_type is "Conversion RPU"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030 CSC Initial Calculation/Rule
687b4ddb -2 -2
Description: Returns true IF activity_type is "Conversion Surrender"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030âCSC Initial Calculation/Rule
336271ba -2 -2
Description: Returns true IF activity_type is "Current Value Adjust for Payments and Surrenders"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030 CSC Initial Calculation/Rule
199e33bc -2 -2
Description: Returns true IF activity_type is "Death Claim Other Insured"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030 CSC Initial Calculation/Rule
3edc6d83 -2 -2
Description: Returns true IF activity_type is "Earned Dividend Cash"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030âCSC Initial Calculation/Rule
593de0bf -2 -2
Description: Returns true IF activity_type is "Earned Dividend Deposit"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030âCSC Initial Calculation/Rule
41c964e3 -2 -2
Description: Returns true IF activity_type is "Earned Dividend Loan Reduction"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030âCSC Initial Calculation/Rule
1df0b2e2 -2 -2
Description: Returns true IF activity_type is "Earned Dividend RPU OYT"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030âCSC Initial Calculation/Rule
4f32b89e -2 -2
Description: Returns true IF activity_type is "Earned Dividend RPU PUA"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030âCSC Initial Calculation/Rule
5e1947e7 -2 -2
Description: Returns true IF activity_type is "Expiry"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030 CSC Initial Calculation/Rule
1501828f -2 -2
Description: Returns true IF activity_type is "Initial Internal Rollover Premium"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030 CSC Initial Calculation/Rule
281a5d3f -2 -2
Description: Returns true IF activity_type is "Lapse Daily Cost"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030 CSC Initial Calculation/Rule
4e7def5e -2 -2
Description: Returns true IF activity_type is "Lapse"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030 CSC Initial Calculation/Rule
f654701 -2 -2
Description: Returns true IF activity_type is "Loan Interest Payment"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030 CSC Initial Calculation/Rule
65696089 -2 -2
Description: Returns true IF activity_type is "Payment by Premium Waiver"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030 CSC Initial Calculation/Rule
3d3eb8c3 -2 -2
Description: Returns true IF activity_type is "Death Cliam"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030 CSC Initial Calculation/Rule
75c40638 -2 -2
Description: Returns true IF activity_type is "Discounted Premium Fund"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030 CSC Initial Calculation/Rule
27bd3e7c -2 -2
Description: Returns true IF activity_type is "Dividend Payment"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030 CSC Initial Calculation/Rule
7c77beca -2 -2
Description: Returns true IF activity_type is "Earned Dividend OYT Limited CV"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030âCSC Initial Calculation/Rule
7c2772af -2 -2
Description: Returns true IF activity_type is "Earned Dividend OYT"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030âCSC Initial Calculation/Rule
5a468085 -2 -2
Description: Returns true IF activity_type is "Earned Dividend PUA"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030âCSC Initial Calculation/Rule
23a793d3 -2 -2
Description: Returns true IF activity_type is "Earned Dividend Premium Reduction"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030âCSC Initial Calculation/Rule
78742927 -2 -2
Description: Returns true IF activity_type is "Earned Dividend RPU Deposit"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030âCSC Initial Calculation/Rule
48ac2d3b -2 -2
Description: Returns true IF activity_type is "Earned Dividend RPU OYT Limited CV"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030âCSC Initial Calculation/Rule
4e73ff9e -2 -2
Description: Returns true IF activity_type is "Earned Other Cash"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030âCSC Initial Calculation/Rule
6f6e48da -2 -2
Description: Returns true IF activity_type is "Earned Other Deposit"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030âCSC Initial Calculation/Rule
7aef7f39 -2 -2
Description: Returns true IF activity_type is "Earned Other OYT Limited CV"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030âCSC Initial Calculation/Rule
7b8fa7a5 -2 -2
Description: Returns true IF activity_type is "Earned Other OYT"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030âCSC Initial Calculation/Rule
16790ba1 -2 -2
Description: Returns true IF activity_type is "Earned Other PUA"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030âCSC Initial Calculation/Rule
3f1472a6 -2 -2
Description: Returns true IF activity_type is "Earned Other Premium Reduction"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030âCSC Initial Calculation/Rule
16b137da -2 -2
Description: Returns true IF activity_type is "Earned Other RPU Deposit"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030âCSC Initial Calculation/Rule
2f294958 -2 -2
Description: Returns true IF activity_type is "Excess Accumulation Payment"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030 CSC Initial Calculation/Rule
6b29f3ec -2 -2
Description: Returns true IF activity_type is "Loan Payoff"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030 CSC Initial Calculation/Rule
45030f08 -2 -2
Description: Returns true IF activity_type is "Maturity"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030 CSC Initial Calculation/Rule
33ae09d1 -2 -2
Description: Returns true if activity_type matchesçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value forTSA Home Loan = "302"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030 CSC Initial Calculation/Rule
6a6be09a -2 -2
Description: Returns true if activity_type matchesçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for Max Loan = "305"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030 CSC Initial Calculation/Rule
2b1df684 -2 -2
Description: Returns true if activity_type matchesçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for Net Loan = "300"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030 CSC Initial Calculation/Rule
6e4bd08e -2 -2
Description: Returns true if activity_type matchesçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for Preferred Loan = "299"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030 CSC Initial Calculation/Rule
55d2d1b5 -2 -2
Description: Returns true IF activity_type is "Premium Deposit Fund"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030 CSC Initial Calculation/Rule
589deebc -2 -2
Description: Returns true IF activity_type is "Premium Payment by APL"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030 CSC Initial Calculation/Rule
2c1aae6a -2 -2
Description: Returns true IF activity_type is "Premium Tax Calculation Payment"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030 CSC Initial Calculation/Rule
460de3ac -2 -2
Description: Returns true IF activity_type is "Reinstatement Premium"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030 CSC Initial Calculation/Rule
7ce54f41 -2 -2
Description: Returns true if activity_type matchesçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value forTSA Non Home Loan = "303"çä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030 CSC Initial Calculation/Rule
4c10a1d6 -2 -2
Description: Returns true ifçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for Annual Fee = "15"çä çäModification Log:çä02/27/2012 wmA-J Sprint 18 - CMC - Valuation Calcs
1906d6c8 -2 -2
Description: Returns true if activity_type matchesçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for calendar year expense charge = "322"çä çäModification Log:çä02/13/2012 CSC Initial Calculation/Rule
33c174be -2 -2
Description: Returns true if activity_type matchesçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for charge adjustment = "319"çä çäModification Log:çä02/13/2012 CSC Initial Calculation/Rule
c0d8062 -2 -2
Description: Returns true if activity_type matchesçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for charge deduction = "321"çä çäModification Log:çä02/13/2012 CSC Initial Calculation/Rule
16e5ef19 -2 -2
Description: Returns true if activity_type matchesçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for surrender charge = "359"çä çäModification Log:çä03/07/2012 CSC Initial Calculation/Rule
2e1dbf8a -2 -2
Description: Returns true if activity_type matchesçäNote: XMLIFE <FinActivityType> lookup table OLI_LU_FINACTTYPE value for surrender charge = "323"çä çäModification Log:çä02/13/2012 CSC Initial Calculation/Rule
31703cf8 -2 -2
Modification Log:çä05/26/2014 wmA-J 1501 Release 1 Sprint 2 JvdM Initial Calc.
14f2a551 -2 -2
Modification Log:çä5/4/2015 wmA-J 1501 Sprint 0 Intial Calc
2550fdca -2 -2
Modification Logçä4/29/2015 wmA-J 1501 Sprint 0 Intial Calc
55521aa6 -2 -2
Modification Logçä4/29/2015 wmA-J 1501 Sprint 0 Intial Calc
505b7e80 -2 -2
Description: Returns True IF the financial activity type is a premium payment (based on OLI_LU_FINACTTYPE).çä çäModification Log:çä5/4/2015 wmA-J 1501 Sprint JSC 0 Added 170 Cash with Applicationçä12/8/2010 ENH1061 CMC added 230 (Dump in/ additional premium)çä10/31/2007 CSC Initial Calculation/Rule
6604ceeb -2 -2
Description: Returns True IF the financial activity type is a partial surrender (based on OLI_LU_FINACTTYPE).çä çäModification Log:çä09/20/2013 pA 1401 wmA Integration CMC added 369 but made it specific to wmA and V1çä10/31/2007 CSC Initial Calculation/Rule
3c0e62db -2 -2
Description: Returns True IF the financial activity type is the amount of Loan Takençä çäModification Log:çä03/01/2010 VPM030âCSC Updates for addtional Loan Typesçä12/09/2009 - PAC004 - tt - initial calculation/rule
2b2e8a48 -2 -2
Description: Returns True IF the financial activity type is the amount of Loan Repaymentçä çäModification Log:çä12/09/2009 - PAC004 - MO - initial calculation/rule
68d4877b -2 -2
Description: Returns True IF the financial activity type is the amount of Loan Takençä çäModification Log:çä12/09/2009 - PAC004 - MO - initial calculation/rule
39e42521 -2 -2
Description: Returns True IF the financial activity type is a Dividend Option that is Taxable.çä çäModification Log:çä11/23/2009 - PAC004 - MO - initial calculation/rule
52c97fec -2 -2
Description: Returns true IF activity_type is a Earned Dividend RPUçä çäModification Log:çä03/01/2010 VPM030âCSC Initial Calculation/Rule
112767b9 -2 -2
Description: Returns true IF activity_type is a Earned Dividendçä çäModification Log:çä03/01/2010 VPM030âCSC Initial Calculation/Rule
6f0c33ed -2 -2
Description: Returns true IF activity_type is a Earned Other RPUçä çäModification Log:çä03/01/2010 VPM030âCSC Initial Calculation/Rule
31d723bb -2 -2
Description: Returns true IF activity_type is a Earned Otherçä çäModification Log:çä03/01/2010 VPM030âCSC Initial Calculation/Rule
321cedad -2 -2
Description: Returns true IF activity_type is a Terminationçä çäModification Log:çä03/01/2010 VPM030âCSC Initial Calculation/Rule
3c748898 -2 -2
Description: Returns True IF the financial activity type is a premium payment (based on OLI_LU_FINACTTYPE).çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
4ad041af -2 -2
Description: Returns true IF activity_type is a withdrawalçä çäModification Log:çä4/29/2015 wmA-J 1501 Sprint 0 JSC  Added Annuitizationçä01/06/2015 wmA-J 1501 Sprint 12 JvdM Death Claim added.çä05/26/2014 wmA-J 1501 Release 1 Sprint 2 JvdM Added systematic withdrawal.çä9/22/2011 wma-JâCMC renamed withdrawal readability functionçä10/31/2007 CSC Initial Calculation/Rule
24a8a916 -2 -2
Description: Returns True IF the financial activity type is a charge (based on OLI_LU_FINACTTYPE).çä çäModification Log:çä03/07/2012 CMC wmA-J Added premium chargeçä02/13/2012 CSC Initial Calculation/Rule
229a4dc3 -2 -2
Description: Returns True IF activity_type is Annuity Rider Payment.çä çäModification:çäwmA-J - 2/14/2012 - MC - U15-US333 - Initial Calculation/Rule.
69b3cf45 -2 -2
Description: Returns True IF activity_type is Refund of Premium.çä çäModification:çäwmA-J - 5/9/2012 - MC - U15-US333 - Initial Calculation/Rule.
2651f520 -2 -2
Description: Returns 1 if transaction type is interest credited on death claim.çä çäModification Log:çäwmA-J - 1/11/2012 - MC - B27-3-US225 - Initial Calculation/Rule.
5a229910 -2 -2
Description: Returns 1 if activity_type is a cancellation otherwise returns 0.çä çäModification Log:çäwmA-J - 02/03/2012 - B27-3-US225- MC - Initial Calculation/Rule.
433e5c37 -2 -2
Description: Returns 1 if transaction type is accumulated dividend interest.çä çäModification Log:çäwmA-J - 1/11/2012 - MC - B27-3-US225 - Initial Calculation/Rule.
230c4d1c -2 -2
Description: Returns 1 if transaction type is Exchange (transfer) From fundçä çäModification Log:çä06/20/2013 WMAJ1301-1000 rm  Initial Function
346d540f -2 -2
Description: Returns 1 if transaction type is Exchange (transfer) To fundçä çäModification Log:çä06/20/2013 WMAJ1301-1000 rm  Initial Function
746e4661 -2 -2
Description:   Returns 1 if transaction type is premium bonusçä çäModification Log:çä08/30/2013 - WMAJ - rm - Initial Function
219a2583 -2 -2
Description: Returns True IF the GracePeriodEntryType is surrender value less than 0çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
78dfacee -2 -2
Description: Returns True IF the hold status is activeçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
5df7ce84 -2 -2
Description: There is a single assumed rate.çä çäModificatin Log:çä03/01/2011 - PAC017 - VM - Initial calculation/ rule
65d4afd0 -2 -2
Description: Multiple assumed rates are being used.çä çäModificatin Log:çä03/01/2011 - PAC017 - VM - Initial calculation/ rule
5976f6b0 -2 -2
Description: Retruns true if IncomeOption is 5 or 9 ie. Installment or Cash Refundçä çäModificatin Log:çä09/29/2009 PAC005 DT added
462c63d5 -2 -2
Description: Returns True IF the indicator code is Baseçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
3feebe31 -2 -2
Description: Returns True IF the indicator code is Riderçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
2ae85908 -2 -2
Description: Returns True IF the indicator code is Integratedçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
60818930 -2 -2
Description: Returns True IF the indicator code is Base Increaseçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
1d73061f -2 -2
Description: Returns True IF the LifeCovOptType is NLGçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
64db9055 -2 -2
Description: Returns True IF the LifeCovOptType is WMDçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
3a6bd83d -2 -2
Description: Returns True IF the LifeCovOptType is LTCçä çäModification Log:çäPAC001 - 8/18/2009 - wdp - Initial function
3056fcbe -2 -2
Description: Returns True IF the LifeCovOptType is Waiver of Premium (WPR)çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
588a8e35 -2 -2
Description: Returns True IF the LifeCovType is Endowmentçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
301c07a6 -2 -2
Description: Returns True IF the LifeCovType is Endowmentçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
6ca2af28 -2 -2
Description: Returns True IF the LifeCovType is Endowmentçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
5a9e3970 -2 -2
Description: Returns True IF the LifeCovType is Endowmentçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Ruleçä09/17/2009 - PAC006 - wdp - Changed LiveCovType to 1, as 24 now refers to AIR
38de04f8 -2 -2
Description: Returns True IF the LifeCovType is Endowmentçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
749fb6d0 -2 -2
Description: Returns True IF the LifeCovType is Endowmentçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
4874fa4d -2 -2
Description: Returns True IF the LifeCovType is CTRçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
67f6869 -2 -2
Description: Returns True IF the LifeCovType is Additional Insured Riderçä çäModification Log:çä07/21/2009 - PAC006 - wdp - Initial function. 
668d0365 -2 -2
Description: Returns True IF the LifeCovType is Level Term Death Benefitçä çäModification Log:çä07/10/2009 - PA1277 - wdp - Added function to use as check to avoid a loop. 
1eedf351 -2 -2
Description: Retruns true if LifeCovType is LTCçä çäModification log: çäPAC001 - 8/17/2009 - wdp - Initial Function
4741b355 -2 -2
Description: Returns True IF the LivesType is single lifeçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
20136678 -2 -2
Description: Returns True IF the LivesType is Joint first to dieçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
7ffdcf2b -2 -2
Description: Returns True IF the LivesType is Joint last to dieçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
1372ba3a -2 -2
Description: Returns True if the number of loans is given to be more than 0çä çäModification Log:çä06/17/2010 CSC Initial Calculation/Rule
6b66535 -2 -2
Description: Returns True IF the MaturityCalcMeth is PolicyDurationçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
29d369c8 -2 -2
Description: Returns True IF the MaturityCalcMeth is greater of age and durationçä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä11/23/2009 nbA Integration CMC Initial Calculation/Rule
234a5acc -2 -2
Description: Returns True IF the MaturityCalcMeth is lesser of age and durationçä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä11/23/2009 nbA Integration CMC Initial Calculation/Rule
3ca6e4e1 -2 -2
Added for PAC015
46681b5d -2 -2
Description: Returns True if chargeOrder to deduct all Non-NAR charges before NAR is determinedçä çäModification Log:çä5/11/2011 PAC015 - rm - Initial Calculation
3138eccc -2 -2
Description: Returns True if chargeOrder to deduct none of the Non-NAR charges before NAR is determinedçä çäModification Log:çä5/11/2011 PAC015 - rm - Initial Calculation
421ced73 -2 -2
Description: Returns True if chargeOrder to deduct administrative charges only before NAR is determinedçä çäModification Log:çä5/11/2011 PAC015 - rm - Initial Calculation
3f34aae9 -2 -2
Description: Returns True if chargeOrder to deduct Non-NAR rider and benefit charges only before NAR is determinedçä çäModification Log:çä5/11/2011 PAC015 - rm - Initial Calculation
141d9713 -2 -2
Added for PAC015
50ec570b -2 -2
Description: Returns True if CV allocation method is last in - first out basisçä çäModification Log:çä5/11/2011 PAC015 - rm - Initial Calculationçä
56e424be -2 -2
Description: Returns True if CV allocation method is on a pro rata basisçä çäModification Log:çä5/11/2011 PAC015 - rm - Initial Calculationçä
12c380e2 -2 -2
Description: Returns True if immediate recognition of material changes apply for 7-pay premium calculations çä çäModification Log:çä6/19/2014 PAC875 - rm - Initial Calculation
475ce56b -2 -2
Description: Returns True if necessary premium test rule applies to policies subject to the guideline premium optionçä çäModification Log:çä6/19/2014 PAC875 - rm - Initial Calculation
4cee14a6 -2 -2
Description: Returns True if necessary premium test rule applies to policies subject to the CVAT optionçä çäModification Log:çä6/19/2014 PAC875 - rm - Initial Calculation
1af6faf6 -2 -2
Description: Returns True IF the coverage option type is ADBçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
1fa62f76 -2 -2
Description: Returns True IF the coverage option type is GIOçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
310bfb42 -2 -2
Description: Returns True IF the coverage option type is WMDçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
67e528b9 -2 -2
Description: Returns True IF the coverage option type is WPçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
2472cc65 -2 -2
Description: Returns True IF the coverage option type is PolicyProtectionGuaranteeçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
6136b5ea -2 -2
Description: Returns True IF the coverage option type is MNLPçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
36581655 -2 -2
Description: Returns True IF the coverage option type is Shadow Accountçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
5e64224a -2 -2
Description: Returns True IF org_form is corporationçä çäModification Log:çäwmA-J - 2/14/2012 - MC - U15-US333 - Initial Calculation/Rule.
46aa12a8 -2 -2
Description: Returns True IF the ParticipantRoleCode is Primaryçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
7e168984 -2 -2
Description: Returns True IF the ParticipantRoleCode is Jointçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
2d3f4995 -2 -2
Description: Returns True IF the ParticipantRoleCode is Jointçä çäModification Log:çä9/30/2013 CSC Initial Calculation/Rule
61feb7a9 -2 -2
Description: Returns True IF the ParticipantStatus is Activeçä çäModification Log:çä07/18/2011 PAC022 DI JL - Initial Calculation
5f61d374 -2 -2
Description: Returns True IF the ParticipantStatus is Inactiveçä çäModification Log:çä07/18/2011 PAC022 DI JL - Initial Calculation
7872be54 -2 -2
Description: Returns True IF the ParticipantStatus is Deceasedçä çäModification Log:çä07/18/2011 PAC022 DI JL - Initial Calculation
232a6275 -2 -2
Description: Returns True IF the ParticipantStatus is Disabledçä çäModification Log:çä07/18/2011 PAC022 DI JL - Initial Calculation
712e0263 -2 -2
Description: Returns True IF the ParticipantStatus is Uninsurableçä çäModification Log:çä07/18/2011 PAC022 DI JL - Initial Calculation
735e470b -2 -2
Description: Returns True IF the ParticipantStatus is PartialRecoveredçä çäModification Log:çä07/18/2011 PAC022 DI JL - Initial Calculation
19e83049 -2 -2
Description: Returns True IF the DisabledStatus is Accidentçä çäModification Log:çä07/18/2011 PAC022 DI JL - Initial Calculation
9b5ca7f -2 -2
Description: Returns True IF the DisabledStatus is Sickçä çäModification Log:çä07/18/2011 PAC022 DI JL - Initial Calculation
21538e28 -2 -2
Description: Returns 1 if ParticipatingType is Participating (any option)çä çäModification Log:çä02/01/2008 CSC Initial Calculation/Rule
28ea8a05 -2 -2
Description: Returns True IF payment method is PDF(value =  "12")çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
757ba36f -2 -2
Description: Returns True IF payment method is Dividends on Deposit (value =  "17")çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
23efed3a -2 -2
Source:âOLIFE.Holding.Policy.PaymentModeçäâOLIFE.Holding.FinancialActivity.PaymentModeçäâOLIFE.Holding.Policy.Coverage.PaymentModeçä çäLookup:âDeclared typecode values from ACORD XMLIFE lookup table OLI_LU_PAYMODEçä
590ef08a -2 -2
Description: Returns True IF payment mode is Annual(OLI_LU_PAYMODE value =  "1")çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
74d45379 -2 -2
Description: Returns True IF payment mode is Bi-Annual(OLI_LU_PAYMODE value =  "2")çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
171a92cf -2 -2
Description: Returns True IF payment mode is Quarterly(OLI_LU_PAYMODE value =  "3")çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
74e4d5c0 -2 -2
Description: Returns True IF payment mode is Monthly(OLI_LU_PAYMODE value =  "4")çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Ruleçä
3bafb02 -2 -2
Description: Returns True IF payment mode is BiMonthly(OLI_LU_PAYMODE value =  "5")çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
10b1daf3 -2 -2
Description: Returns True IF payment mode is Weekly(OLI_LU_PAYMODE value =  "6")çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
332d3dbe -2 -2
Description: Returns True IF payment mode is BiWeekly(OLI_LU_PAYMODE value =  "7")çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
6bec4026 -2 -2
Description: Returns True IF payment mode is Monthly for 9 Mths(OLI_LU_PAYMODE value =  "10")çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
7fc8b03 -2 -2
Description: Returns True IF payment mode is Every 4 Weeks(OLI_LU_PAYMODE value =  "12")çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
691d093c -2 -2
Description: Returns True IF payment mode is Monthly for 10 Mths(OLI_LU_PAYMODE value =  "13")çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
50aac4c8 -2 -2
Description: Returns True IF payment mode is applicable upon referencing month index.çä çäModification Log:çä04/28/2010 CSC Initial Calculation/Rule
44da7538 -2 -2
Description: Returns 1 if policy cost basis is known.çä çäModification Log:çäwmA-J - 1/11/2012 - MC - B27-3-US225 - Initial Calculation/Rule.
3e1dfe6c -2 -2
Description: Returns 1 if policy cost basis is unknown.çä çäModification Log:çä10/29/2014 - PA1501 - rm - Added quotes around 0 since EQUAL is a string compareçä01/11/2012 - wmA-J - MC - B27-3-US225 - Initial Calculation/Rule.
1451c391 -2 -2
Description: Returns True IF policy_status is one of the statuses indicating an active status.çäNote:  Need to determine the other statuses that are considered active.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Ruleçä çäVPM028â2008/07/30âModified to expand the applicable status values to include the ACORD "Pending" value "8".  Also changed decisioning to use the CASE statement.
2fe15a06 -2 -2
Description: Returns True IF policy_status is Active (OLI_LU_POLSTAT value for Active = "1")çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
7f3d6ad5 -2 -2
Description: Returns True IF policy_status is Death Claim Pending (OLI_LU_POLSTAT value = "10")çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
69d247e3 -2 -2
Description: Returns True IF policy_status is Paid-up (OLI_LU_POLSTAT value = "3")çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
6b677938 -2 -2
Description: Returns True IF policy_status is for Lapsed (OLI_LU_POLSTAT value = "4")çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
137a26a6 -2 -2
Description: Returns True IF policy_status is Surrendered(OLI_LU_POLSTAT value = "6")çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
151310c5 -2 -2
Description: Returns True IF policy_status is Waiver (OLI_LU_POLSTAT value = "9")çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
92fe5b5 -2 -2
Description: Returns True IF policy_status is Under Disability (OLI_LU_POLSTAT value = "15")çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
47dd9c52 -2 -2
Description: Returns True IF policy_status is Expired (OLI_LU_POLSTAT value = "17")çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
3d9cc206 -2 -2
Description: Returns True IF policy_status is Extended Term (OLI_LU_POLSTAT value = "18")çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
73ce554b -2 -2
Description: Returns True IF policy_status is Reduced Paid Up (OLI_LU_POLSTAT value = "20")çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
24277fca -2 -2
Description: Returns True IF policy_status is Issued Not Paid (OLI_LU_POLSTAT value = "25")çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
3fb79373 -2 -2
Description: Returns True IF policy_status is Issued Not Taken (OLI_LU_POLSTAT value = "7")çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
17f7892a -2 -2
Description: Returns True IF policy_status is Matured (OLI_LU_POLSTAT value = "40")çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
4d9ccc65 -2 -2
Description: Returns True IF policy_status is Free Look Surrender(OLI_LU_POLSTAT value = "50")çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
475fd47a -2 -2
Description: Returns True IF policy_status is Back Billed(OLI_LU_POLSTAT value = "32")çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
42568ab5 -2 -2
Description: Returns True IF policy_status is Payor Death(OLI_LU_POLSTAT value = "1000500001")çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
51e72f6c -2 -2
Description: Returns True IF policy_status is COI and Disability Waiver(OLI_LU_POLSTAT value = "1000500002")çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
242d54ed -2 -2
Description: Returns True IF policy_status is Single Premium(OLI_LU_POLSTAT value = "1000500009")çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
41c141b7 -2 -2
Description: Returns True IF policy_status is Fully Paid Up(OLI_LU_POLSTAT value = "47")çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
7ad96ab0 -2 -2
Description: Returns True IF policy_status is Pending Reinstatement(OLI_LU_POLSTAT value = "38")çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
614dd000 -2 -2
Description: Returns True IF policy_status is Pending (OLI_LU_POLSTAT value = "8")çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
543c7ba8 -2 -2
Description: Returns True IF the policy status is activeçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
5e010f08 -2 -2
Description:  Returns to calculate or bypass feeçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
3d8f5e0e -2 -2
Description:  Returns to calculate or bypass feeçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
72b960ea -2 -2
Description:  Returns to calculate or bypass feeçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
73b7b1c7 -2 -2
Source:âOLIFE.Holding.Policy.ProductTypeçä çäLookup:âDeclared typecode values from ACORD XMLIFE lookup table OLI_LU_POLPRODçä
6eef5f4b -2 -2
These functions will return a "TRUE"  ("1") or "FALSE" ("0") condition based on the passed "product_type"çä çäSource:âOLIFE.Holding.Policy.ProductTypeçä çäLookup:âDeclared typecode values from ACORD XMLIFE and/or CSC Extension lookup table OLI_LU_POLPRODçä
51c03cd7 -2 -2
Description:  Returns true IF ProductType is Whole LifeçäNote: OLI_LU_POLPROD value for Whole LIFe = "1"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
4829eabe -2 -2
Description:  Returns true IF ProductType is TermçäNote: OLI_LU_POLPROD value for Term = "2"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
6a54a274 -2 -2
Description:  Returns true IF ProductType is Interest Sensitive LIFeçäNote: OLI_LU_POLPROD value for Interest Sensitive LIFe = "6"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
1caf7a60 -2 -2
Description:  Returns true IF ProductType is Excess Interest LIFeçäNote: OLI_LU_POLPROD value for Excess Interest LIFe = "7"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
2e8cf43d -2 -2
Description:  Returns true IF ProductType is Term with Cash ValueçäNote: OLI_LU_POLPROD value for Term with Cash Value = "26"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
64fd271 -2 -2
Description:  Returns true IF ProductType is Indeterminate PremiumçäNote: OLI_LU_POLPROD value for Indeterminate Premium = "41"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
7f41f427 -2 -2
Description:  Returns true IF ProductType is Universal LIFeçäNote: OLI_LU_POLPROD value for Universal LIFe = "3"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
719d6535 -2 -2
Description:  Returns true IF ProductType is Fixed AnnuityçäNote: OLI_LU_POLPROD value for Fixed Annuity = "9"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
199fac89 -2 -2
Description:  Returns true IF ProductType is Variable AnnuityçäNote: OLI_LU_POLPROD value for Variable Annuity = "10"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
2dc16372 -2 -2
Description:  Returns true IF ProductType is Indexed AnnuityçäNote: OLI_LU_POLPROD value for Indexed Annuity = "11"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
80596b0 -2 -2
Description:  Returns true IF ProductType is Retirement AnnuityçäNote: OLI_LU_POLPROD value for Retirement Annuity = "301"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
122b47bf -2 -2
Description:  Returns true IF ProductType is BuyoutçäNote: OLI_LU_POLPROD value for Buyout = "24"çä çäModification Log:çä03/06/2011 PAC022 DI JL Initial Rule
68e9295a -2 -2
Description:  Returns true IF ProductType is CancerçäNote: OLI_LU_POLPROD value for Cancer = "21"çä çäModification Log:çä03/06/2011 PAC022 DI JL Initial Rule
46cd27cb -2 -2
Description:  Returns true IF ProductType is Dread DiseaseçäNote: OLI_LU_POLPROD value for Dread Disease = "16"çä çäModification Log:çä03/06/2011 PAC022 DI JL Initial Rule
37b9606a -2 -2
Description:  Returns true IF ProductType is Hospital IndemnityçäNote: OLI_LU_POLPROD value for Hospital Indemnity = "14"çä çäModification Log:çä03/06/2011 PAC022 DI JL Initial Rule
9b9a6e5 -2 -2
Description:  Returns true IF ProductType is Hospital/SurgicalçäNote: OLI_LU_POLPROD value for Hospital/Surgical = "19"çä çäModification Log:çä03/06/2011 PAC022 DI JL Initial Rule
5d229f22 -2 -2
Description:  Returns true IF ProductType is Income Replacement Duration UnspecifiedçäNote: OLI_LU_POLPROD value for Income Replacement Duration Unspecifiedl = "12"çä çäModification Log:çä03/06/2011 PAC022 DI JL Initial Rule
3402c2f3 -2 -2
Description:  Returns true IF ProductType is Major MedicalçäNote: OLI_LU_POLPROD value for Major Medical = "13"çä çäModification Log:çä03/06/2011 PAC022 DI JL Initial Rule
23a5b635 -2 -2
Description:  Returns true IF ProductType is Medical ExpenseçäNote: OLI_LU_POLPROD value for Medical Expense = "20"çä çäModification Log:çä03/06/2011 PAC022 DI JL Initial Rule
531bdbca -2 -2
Description:  Returns true IF ProductType is Medicare SupplementçäNote: OLI_LU_POLPROD value for Medicare Supplement = "15"çä çäModification Log:çä03/06/2011 PAC022 DI JL Initial Rule
10f5c01a -2 -2
Description:  Returns true IF ProductType is Nursing HomeçäNote: OLI_LU_POLPROD value for Nursing Home = "18"çä çäModification Log:çä03/06/2011 PAC022 DI JL Initial Rule
32be37f0 -2 -2
Description:  Returns true IF ProductType is Overhead ExpenseçäNote: OLI_LU_POLPROD value for Overhead Expense = "23"çä çäModification Log:çä03/06/2011 PAC022 DI JL Initial Rule
512516e -2 -2
Description:  Returns true IF ProductType is Travel AccidentçäNote: OLI_LU_POLPROD value for Travel Accident = "22"çä çäModification Log:çä03/06/2011 PAC022 DI JL Initial Rule
37a9ff3d -2 -2
Description:  Returns true IF ProductType is Indexed Universal LIFeçäNote: OLI_LU_POLPROD value for Indexed Universal LIFe = "5"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
26b1eb1d -2 -2
Description:  Returns true IF ProductType is Variable Universal LIFeçäNote: OLI_LU_POLPROD value for Variable Universal LIFe = "4"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
6488cd5 -2 -2
Description:  Returns true IF ProductType is Long Term CareçäNote: OLI_LU_POLPROD value for Long Term Care = "17"çä çäModification Log:çä08/10/2016 JL PAC024 Initial Function
40856d86 -2 -2
These functions will return a "TRUE"  ("1") or "FALSE" ("0") condition based on the passed "product_type"çä çäSource:âOLIFE.Holding.Policy.ProductTypeçä çäLookup:âDeclared typecode values from ACORD XMLIFE and/or CSC Extension lookup table OLI_LU_POLPROD
45a15128 -2 -2
Description:  Returns True IF the product type is a type of a Universal LIFe productçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
5335b12f -2 -2
Description:  Returns True IF the product type is a fixed premium (based on OLI_LU_POLPROD).çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
2f7f2f83 -2 -2
Description:  Returns True IF the product type is a flexible premium (based on OLI_LU_POLPROD).çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
118d3ad2 -2 -2
Description:  Returns True IF the product type is an annuity (based on OLI_LU_POLPROD).çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
570221fc -2 -2
Description:  Returns True IF the product type is a Term(2), Term with Cash Value(26) or Indeterminate Premium(41) (based on OLI_LU_POLPROD).çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
3f11b7e -2 -2
Description:  Returns True IF the product type is a Disability Health Product (based on OLI_LU_POLPROD).çä çäModification Log:çä03/06/2011 PAC022 DI JL Initial Rule
34c3dbda -2 -2
These functions will return the ACORD XMLIFE typecode valueçä çäSource:âOLIFE.Holding.Policy.ProductTypeçä çäLookup:âDeclared typecode values from ACORD XMLIFE and/or CSC Extension lookup table OLI_LU_POLPRODçä
18ec5f2 -2 -2
Description:  Returns ProductType=Whole LIFeçäNote: OLI_LU_POLPROD value for Whole LIFe = "1"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
75a0e5a0 -2 -2
Description:  Returns ProductType=TermçäNote: OLI_LU_POLPROD value for Term = "2"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
548d1c1c -2 -2
Description:  Returns ProductType=Interest Sensitive LIFeçäNote: OLI_LU_POLPROD value for Interest Sensitive LIFe = "6"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
34fa948c -2 -2
Description:  Returns ProductType=Excess Interest LIFeçäNote: OLI_LU_POLPROD value for Excess Interest LIFe = "7"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
1a3b2a3f -2 -2
Description:  Returns ProductType=Term with Cash Value = "26"çäNote: OLI_LU_POLPROD value for Term with Cash Value = "26"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
a1fc7f8 -2 -2
Description:  Returns ProductType=Indeterminate Premium = "41"çäNote: OLI_LU_POLPROD value for Indeterminate Premium = "41"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
4a458780 -2 -2
Description:  Returns ProductType=Universal LIFe = "3"çäNote: OLI_LU_POLPROD value for Universal LIFe = "3"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
1e785054 -2 -2
Description:  Returns ProductType=Variable Universal LIFe = "4"çäNote: OLI_LU_POLPROD value for Variable Universal LIFe = "4"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
f7e33ec -2 -2
Description:  Returns ProductType=Indexed Universal LIFe = "5"çäNote: OLI_LU_POLPROD value for Indexed Universal LIFe = "5"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
c467eef -2 -2
Description:  Returns ProductType=Indexed Fixed Annuity = "9"çäNote: OLI_LU_POLPROD value for Indexed Fixed Annuity = "9"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
2ff191a5 -2 -2
Description:  Returns ProductType=Variable Annuity = "10"çäNote: OLI_LU_POLPROD value for Variable Annuity = "10"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
5003a5b2 -2 -2
Description:  Returns ProductType=Indexed Annuity = "11"çäNote: OLI_LU_POLPROD value for Indexed Annuity = "11"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
2ff768ef -2 -2
Description:  Returns ProductType=Retirement Annuity = "301"çäNote: OLI_LU_POLPROD value for Retirement Annuity = "301"çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
fd60372 -2 -2
Description: Returns True IF the qualplantype is a 401(k) qualified annuity otherwise returns FALSE.çä çäModification Log:çä çä10/25/2012 wmA-J Release 2 Sprint 5  MC Initial rule.
3871f4a5 -2 -2
Description: Returns True IF the qualplantype is a qualified annuity otherwise returns FALSE.çä çäModification Log:çä çä10/25/2012 wmA-J Release 2 Sprint 5  MC Initial rule
547f8f5c -2 -2
Description: Returns True IF the qualplantype is a Roth IRA otherwise returns FALSE.çä çäModification Log:çä çäwmA-J - 05/10/2012 - MC - U12 - Initial rule.
669fb1cb -2 -2
Description: Returns True IF the qualplantype is a 408(k) SEP qualified annuity otherwise returns FALSE.çä çäModification Log:çä çä10/25/2012 wmA-J Release 2 Sprint 5  MC Initial rule.
4fe68cd -2 -2
Description: Returns True IF the qualplantype is a IRA Roth Conversion qualified annuity otherwise returns FALSE.çä çäModification Log:çä çä10/25/2012 wmA-J Release 2 Sprint 5  MC Initial rule.
3bac549c -2 -2
Description: Returns True IF the qualplantype is a S.I.M.P.L.E Qualified Plan 408(b) annuity otherwise returns FALSE.çä çäModification Log:çä çä10/25/2012 wmA-J Release 2 Sprint 5  MC Initial rule.
eae12d8 -2 -2
Description: Returns True IF the qualplantype is a Pension Trust Plan qualified annuity otherwise returns FALSE.çä çäModification Log:çä çä10/25/2012 wmA-J Release 2 Sprint 5  MC Initial rule.
51e06fc -2 -2
Description: Returns True IF the qualplantype is a 403(a) qualified annuity otherwise returns FALSE.çä çäModification Log:çä çä10/25/2012 wmA-J Release 2 Sprint 5  MC Initial rule.
1f61eb03 -2 -2
Description: Returns True IF the qualplantype is a Non-transferable qualified annuity otherwise returns FALSE.çä çäModification Log:çä çä10/25/2012 wmA-J Release 2 Sprint 5  MC Initial rule.
6c9cc99c -2 -2
Description: Returns True IF the qualplantype is a 401(a) qualified annuity otherwise returns FALSE.çä çäModification Log:çä çä10/25/2012 wmA-J Release 2 Sprint 5  MC Initial rule.
de5dca9 -2 -2
Description: Returns True IF the qualplantype is an unspecified qualified annuity otherwise returns FALSE.çä çäModification Log:çä çä10/25/2012 wmA-J Release 2 Sprint 5  MC Initial rule.
31b87fad -2 -2
Description: Returns True IF the qualplantype is a 415M qualified annuity otherwise returns FALSE.çä çäModification Log:çä çä10/25/2012 wmA-J Release 2 Sprint 5  MC Initial rule.
12b5ae68 -2 -2
Description: Returns True IF the qualplantype is a 414(h) qualified annuity otherwise returns FALSE.çä çäModification Log:çä çä10/25/2012 wmA-J Release 2 Sprint 5  MC Initial rule.
3c13ee47 -2 -2
Description: Returns True IF the qualplantype is a S.I.M.P.L.E Qualified Plan 401(k) annuity otherwise returns FALSE.çä çäModification Log:çä çä10/25/2012 wmA-J Release 2 Sprint 5  MC Initial rule.
6d7607ec -2 -2
Description: Returns True IF the qualplantype is a 412(i) qualified annuity otherwise returns FALSE.çä çäModification Log:çä çä10/25/2012 wmA-J Release 2 Sprint 5  MC Initial rule.
1d22cd8e -2 -2
Description: Returns True IF the qualplantype is a non-qualified annuity otherwise returns FALSE.çä çäModification Log:çä çäwmA-J - 05/10/2012 - MC - U12 - Initial rule.
1186bd50 -2 -2
Description: Returns True IF the qualplantype is a qualified annuity otherwise returns FALSE.çä çäModification Log:çä çä10/25/2012 wmA-J Release 2 Sprint 5  MC Added additional plan codes.çäwmA-J - 05/10/2012 - MC - U12 - Initial rule.
16652075 -2 -2
Description: Returns True IF the QualifiedCode is Not-Qualified.çä çäModification Log:çäwmA-J - 01/23/2012 - MC - B27-3-US225 - Initial Rule
3df841e6 -2 -2
Description: Returns True IF the QualifiedCode is Qualified.çä çäModification Log:çäwmA-J - 01/23/2012 - MC - B27-3-US225 - Initial Rule
dfc4881 -2 -2
Description: Returns True IF the rating_commissions_rule is Commissions Not Paidçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
7526968f -2 -2
Description: Returns True IF the RateBasedOnType is PctOfTotalMthlyDedçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
d03bcca -2 -2
Description: Returns True IF the RateBasedOnType is PctOfPremForPolicyYrçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
18651f81 -2 -2
Description: Returns True IF the rate type is Currentçä çäModification Log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä1/12/2011 - PAC013 calcType - BT - Restructureçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä10/31/2007 CSC Initial Calculation/Rule
35bdef39 -2 -2
Description: Returns True IF the rate type is Guaranteedçä çäModification Log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä1/12/2011 - PAC013 calcType - BT - Restructureçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä10/31/2007 CSC Initial Calculation/Rule
4d90616d -2 -2
Description: Returns True IF the rating commission rule is Commissions Paidçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
3a305d18 -2 -2
Description: Returns True IF the reserve function is Continuousçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
7496df28 -2 -2
Description: Returns True IF the rider type is COLAçä çäModification Log:çä08/10/2011 PAC022 DI JL Initial Rule
4b9ce28e -2 -2
Description: Returns True IF the rider type is ROPçä çäModification Log:çä08/10/2011 PAC022 DI JL Initial Rule
7776015d -2 -2
Description: Returns True IF the rider type is WP on Disabilityçä çäModification Log:çä08/10/2011 PAC022 DI JL Initial Rule
4a75b10b -2 -2
Description: Returns True IF the rider type is GMIBçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
4c6cb8cc -2 -2
Description: Returns True IF the rider type is GMWBçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
4c919348 -2 -2
Description: Returns True IF the rider type is GMDBçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
7798c564 -2 -2
Description: Returns True IF the rider type is GMABçä çäModification Log:çä09/05/2013 CSC rm Initial Calculation/Rule
2f7396ab -2 -2
Description: Returns True IF the rider type is GMABçä çäModification Log:çä09/05/2013 CSC rm Initial Calculation/Rule
43b3b270 -2 -2
Description: Returns True IF the RiderType is LTCçä çäModification Log:çäPAC001 - 8/18/2009 - wdp - Initial function
3e72f953 -2 -2
Description: Returns True IF the RiderType is Surrender Charge Waiver Riderçä çäModification Log:çä10/16/2012 - wmA-J - rm - Simplified boolean expressionçäPAC001 - 8/18/2009 - wdp - Initial function
4de20b4d -2 -2
Description:  returns true if the transfer type is unitsçä çäModification Log:çä06/20/2013 - WMAJ1301-1000 - rm - Inital Calc
2597e6ec -2 -2
Description:  returns true if the transfer type is amountçä çäModification Log:çä12/19/2012 - WMAJ1301 Sprint 8 - 702 - CMC - Inital Calc
3a469cc1 -2 -2
Description:  returns true if the transfer type is percentçä çäModification Log:çä12/19/2012 - WMAJ1301 Sprint 8 - 702 - CMC - Inital Calc
6f4b2bef -2 -2
Description: Returns True IF the rider subtype code is Step Upçä çäModification Log:çä12/03/2014 wmA-J 1501 Sprint 9 JvdM Added wmajçä07/15/2013 pA 1401 wmA 1060 CMC Added logic to ignore the usage of this inputçä10/31/2007 CSC Initial Calculation/Rule
9b067df -2 -2
Description: Returns True IF the rider subtype code is Growthçä çäModification Log:çä12/03/2014 wmA-J 1501 Sprint 9 JvdM Added wmajçä07/15/2013 pA 1401 wmA 1060 CMC Added logic to ignore the usage of this inputçä10/31/2007 CSC Initial Calculation/Rule
145ab6f2 -2 -2
Description: Returns True IF the withdrawal rule is Proportionalçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
404355b6 -2 -2
Description: Returns True IF the withdrawal rule is Dollar for Dollarçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
773851cc -2 -2
Description: Returns True IF the withdrawal rule is Combinationçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
30e2e677 -2 -2
çäModification Log:çäDisbDesignType ALIKE "1000500002"
21f82a13 -2 -2
çä çäModification Log:çä11/11/2010 Regression Testing CMC Changed to a CSC private type code.
7942c863 -2 -2
çä çäModification Log:çä11/11/2010 Regression Testing CMC Changed to a CSC private type code.
3f73a7e -2 -2
Description:  Returns true IF back-dating is elected. Use this function if so that other back-dating types may be added, without updating all calls to include multiple back-dating type equates.çä çäModification Log:çä07/20/2010 PAC020 Back-dating Support JL Initial Calculation
3cdd37dc -2 -2
Description:  Returns true IF backDateType is "Save Date", I.e. OLI_LU_BACKDATE value of 1.çä çäModification Log:çä07/20/2010 PAC020 Back-dating Support JL Initial Calculation
8ee2802 -2 -2
Description: IRR calcType is DBçä çäModification Log:çä09/15/2010 PAC018 JL Initial Calculation
26c833ee -2 -2
Description: IRR calcType is CVçä çäModification Log:çä09/15/2010 PAC018 JL Initial Calculation
2edbd8d6 -2 -2
Description: Commision Type is Asset-Based Commission.çä çäModification Log:çä03/28/11 PPLUS JL Initial Calculation
3c3b3379 -2 -2
10/29/2011 - rm - Simplified Boolean logicçä
1d6b9557 -2 -2
Description: Returns true IF Contract is a MECçä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030âCSC Initial Calculation/Rule
51d61833 -2 -2
Description: Returns true IF Contract is NOT a MECçä çäModification Log:çä10/29/2011 - rm - Simplified Boolean logicçä03/01/2010 VPM030âCSC Initial Calculation/Rule
284e9f5d -2 -2
Description: Returns true if activity_type matchesçäNote: XMLIFE <INTCREDITDAYTYPE> lookup table OLIEXT_LU_INTCREDITDAYTYPE value for Monthly = "1000500003"çä çäModification Log:çä02/13/2012 CSC Initial Calculation/Rule
3679ad54 -2 -2
Description: Returns true if activity_type matchesçäNote: XMLIFE <INTCREDITDAYTYPE> lookup table OLIEXT_LU_INTCREDITDAYTYPE value for 365 day year = "1000500001"çä çäModification Log:çä02/13/2012 CSC Initial Calculation/Rule
39ac109a -2 -2
Description: Returns true if activity_type matchesçäNote: XMLIFE <INTCREDITDAYTYPE> lookup table OLIEXT_LU_INTCREDITDAYTYPE value for 366 day year = "1000500002"çä çäModification Log:çä02/13/2012 CSC Initial Calculation/Rule
3683312c -2 -2
Description: Returns 1 if tax ownership type is Individualçä çäModification Log:çäwmA-J - 1/11/2012 - MC - B27-3-US225 - Initial Calculation/Rule.
3a3e3f12 -2 -2
Description: Returns 1 if tax ownership type is revocable trust.çä çäModification Log:çäwmA-J - 1/11/2012 - MC - B27-3-US225 - Initial Calculation/Rule.
9b60cbe -2 -2
Description: Returns 1 if tax ownership type is irrevocable grantor trust.çä çäModification Log:çäwmA-J - 1/11/2012 - MC - B27-3-US225 - Initial Calculation/Rule.
31fd3b86 -2 -2
Description: Returns 1 if tax ownership type is irrevocable non grantor trust.çä çäModification Log:çäwmA-J - 1/11/2012 - MC - B27-3-US225 - Initial Calculation/Rule.
2b9b44b5 -2 -2
Description: Returns 1 if tax ownership type is qualified pension.çä çäModification Log:çäwmA-J - 1/11/2012 - MC - B27-3-US225 - Initial Calculation/Rule.
4aaff9eb -2 -2
Description: Returns 1 if tax ownership type is corporation.çä çäModification Log:çäwmA-J - 1/11/2012 - MC - B27-3-US225 - Initial Calculation/Rule.
215910e -2 -2
Description: Returns 1 if tax ownership type is partnership.çä çäModification Log:çäwmA-J - 1/11/2012 - MC - B27-3-US225 - Initial Calculation/Rule.
77d05834 -2 -2
Description: Returns 1 if tax ownership type is split dollar individual.çä çäModification Log:çäwmA-J - 1/11/2012 - MC - B27-3-US225 - Initial Calculation/Rule.
64315c91 -2 -2
Description: Returns 1 if tax ownership type is split dollar corporate.çä çäModification Log:çäwmA-J - 1/11/2012 - MC - B27-3-US225 - Initial Calculation/Rule.
410a57b1 -2 -2
Description: Returns 1 if tax ownership type is participant owned keogh.çä çäModification Log:çäwmA-J - 1/11/2012 - MC - B27-3-US225 - Initial Calculation/Rule.
12da93e0 -2 -2
Description: Returns 1 if tax ownership type is trust owned keogh.çä çäModification Log:çäwmA-J - 1/11/2012 - MC - B27-3-US225 - Initial Calculation/Rule.
7faf71d2 -2 -2
Description: Returns 1 if tax ownership type is tax exempt organisation.çä çäModification Log:çäwmA-J - 1/11/2012 - MC - B27-3-US225 - Initial Calculation/Rule.
59ca82e3 -2 -2
Description: Returns 1 if tax withholding type is standard.çä çäModification Log:çäwmA-J - 1/11/2012 - MC - B27-3-US225 - Initial Calculation/Rule.
1401762a -2 -2
Description: Returns 1 if tax withholding type is do not withholdçä çäModification Log:çäwmA-J - 1/11/2012 - MC - B27-3-US225 - Initial Calculation/Rule.
1fa22833 -2 -2
Description: Returns 1 if tax withholding type is specified percentage. çä çäModification Log:çäwmA-J - 1/11/2012 - MC - B27-3-US225 - Initial Calculation/Rule.
5c719cc9 -2 -2
Description: Returns 1 if tax withholding type is flat dollar.çä çäModification Log:çäwmA-J - 1/11/2012 - MC - B27-3-US225 - Initial Calculation/Rule.
7092ecfc -2 -2
Description: Returns 1 if tax withholding type is unknown.çä çäModification Log:çä10/29/2014 - PA1501 - rm - Added quotes around 0 since EQUAL is a string compareçä1/11/2012 - wmA-J - MC - B27-3-US225 - Initial Calculation/Rule.
307bcdb7 -2 -2
Description: Returns 1 if tax withholding payment payee relation is owner.çä çäModification Log:çäwmA-J - 1/11/2012 - MC - B27-3-US225 - Initial Calculation/Rule.
415c2a70 -2 -2
Description: Returns 1 if tax withholding payment payee relation is primary insured.çä çäModification Log:çäwmA-J - 1/11/2012 - MC - B27-3-US225 - Initial Calculation/Rule.
4923f6a0 -2 -2
Description: Returns 1 if tax withholding payment payee relation is a distribution paid to insured as an ERD.çä çäModification Log:çäwmA-J - 1/11/2012 - MC - B27-3-US225 - Initial Calculation/Rule.
12af096e -2 -2
Description: Returns 1 if tax withholding payment payee relation is a distribution paid to insured as a non ERD.çä çäModification Log:çäwmA-J - 1/11/2012 - MC - B27-3-US225 - Initial Calculation/Rule.
11e3ba4 -2 -2
Description: Returns 1 if tax withholding payment payee relation is a direct rollover to insured as same type of plan.çä çäModification Log:çäwmA-J - 1/11/2012 - MC - B27-3-US225 - Initial Calculation/Rule.
2e59ed9b -2 -2
Description: Returns 1 if tax withholding payment payee relation is a direct rollover to insured as different type of plan.çä çäModification Log:çäwmA-J - 1/11/2012 - MC - B27-3-US225 - Initial Calculation/Rule.
5e0730 -2 -2
Description: Returns 1 if tax withholding payment payee relation is a distribution paid as QDRO as a direct rollover.çä çäModification Log:çäwmA-J - 1/11/2012 - MC - B27-3-US225 - Initial Calculation/Rule.
629014ad -2 -2
Description: Returns 1 if tax withholding payment payee relation is a distribution paid as QDRO but not as a direct rollover.çä çäModification Log:çäwmA-J - 1/11/2012 - MC - B27-3-US225 - Initial Calculation/Rule.
55abd72c -2 -2
Description: Returns 1 if tax withholding payment payee relation is a distribution paid to owner or spouse as an ERD.çä çäModification Log:çäwmA-J - 1/11/2012 - MC - B27-3-US225 - Initial Calculation/Rule.
7fd19e32 -2 -2
Description: Returns 1 if tax withholding payment payee relation is a distribution paid to owner or spouse as a non ERD.çä çäModification Log:çäwmA-J - 1/11/2012 - MC - B27-3-US225 - Initial Calculation/Rule.
4e763c56 -2 -2
Description: Returns 1 if tax withholding payment payee relation is a direct rollover to owner or spouse as same type of plan.çä çäModification Log:çäwmA-J - 1/11/2012 - MC - B27-3-US225 - Initial Calculation/Rule.
992a79a -2 -2
Description: Returns 1 if tax withholding payment payee relation is a direct rollover to owner or spouse as different type of plan.çä çäModification Log:çäwmA-J - 1/11/2012 - MC - B27-3-US225 - Initial Calculation/Rule.
6f57c498 -2 -2
Description: Returns 1 if the tax disbursement type is a return of excess contributions before the filing date.çä çäModification Log:çä çäwmA-J - 3/26/2012 - MC - U12-US232 - Correction to ACORD Code for withdrawals of excess contribution before the filing date (5 used instead of 21).çäwmA-J - 3/26/2012 - MC - U12-US232 - Initial Calculation/Rule.
14eba3cc -2 -2
Description: Returns 1 if the tax disbursement type is a withdrawal for first homebuyer's expenses and is subject to the IRS maximum amount.çä çäModification Log:çäwmA-J - 3/26/2012 - MC - U12-US232 - Initial Calculation/Rule.
1701f1c8 -2 -2
Description: Returns 1 if the tax disbursement type is due to disability, death or separation from service for qualified plan withdrawals.çä çäModification Log:çäwmA-J - 3/26/2012 - MC - U12-US232 - Initial Calculation/Rule.
54215549 -2 -2
Description: Returns 1 if the tax disbursement type is due to a medical disablility.çä çäModification Log:çäwmA-J - 3/26/2012 - MC - U12-US232 - Initial Calculation/Rule.
8564747 -2 -2
çäModification Log:çä04/24/2014 - CL1401 - rm - Converted from numeric compare to string compare
1cf13d12 -2 -2
Description : Used for Cache Monitoring and parameter debugging!çäâââââReturns a debug message in UTVoutput if VPMS debug is on including the parm names and values and theçäâââââ final result.âIt receives as parameters the function definition, the individual parms in a vector and the resultçä çäThis function is mainly used for Cache Monitoring and will print a specific function for every parm variation when it is called. çäTo actually use this function copy it into the beginning of the function B that you want to monitor and then use the çäfunction header of function B as string for the first parameter, then copy all parms including the parentheses and çämake all parms a vector for the second parameter by adding V_ up front, and then the last parm is the actual prior body of the functionçä çäExample:çäTGTDB Proj Policy Inside PUA FaceAmount EOY(rateAssumption; yearIndex; vectorBIR) would have the follwoing new coding:çäVPMS Debug Message(çäâââ"TGTDB Proj Policy Inside PUA FaceAmount EOY(rateAssumption; yearIndex; vectorBIR)";çäâââV_(rateAssumption; yearIndex; vectorBIR);çäâââ... old codining result used as result parameterçä)çä çäModification Log:çäPerformance - 03/02/2009 RB Corrections to allow return of vector resultçäPerformance - 03/01/2009 - RWE - added exampleçä
ac11e7c -2 -2
Description : returns a debug message in output if VPMS debug is on including the parm names and values and the fnal resultçäâââââIt receives as parameters the function definition, the individual parms in a vector and the resultçäModification Log:çäPerformance - 03/02/2009 RB Corrections to remove close parenthesis from function name returnedçä
51fb44b2 -2 -2
Description : returns a debug message in output if VPMS debug is on including the parm names and values and the fnal resultçäâââââIt receives as parameters the function definition, the individual parms in a vector and the resultçäModification Log:çä
62293ac4 -2 -2
Description : returns a debug message in output if VPMS debug is on including the parm names and values and the fnal resultçäâââââIt receives as parameters the function definition, the individual parms in a vector and the resultçäModification Log:çäPerformance - 03/02/2009 RB Corrections to prevent truncate of parm name for last parm
3c1958ed -2 -2
çä çäModification Log:çä05/28/2013 pA 1401 PAD-1065 CMC added usage of the "message" parm so that messages are correctly returned due to XE compiler changes.
457d9acb -2 -2
Description : returns 1 if VPMS Debug indicator is on ($DEBUG=1 or 2), otherwise a zero 
63572dc7 -2 -2
Description : returns 1 if VPMS IFO indicator is on ($IFO_Active=1), otherwise a zero.  INPUT IFO Active is a temporary input unitl $IFO_Active is computableçä çäModification Log:çä01/25/2013 wmA-J 1301 Sprint 9 CMC Inital calc
1e869ea9 -2 -2
Description : returns 1 if VPMS Debug indicator is on ($DEBUG=1 or 2), otherwise a zero 
6414d25f -2 -2
Description : returns 1 if VPMS Debug indicator is on ($DEBUG=1 or 2), otherwise a zero 
41aafde2 -2 -2
Description: Used for Cache Monitoring and parameter debugging!çäâââââReturns a debug message in UTVoutput if VPMS debug is on including the parm names and values and theçäâââââ final result. Also provides a UTV calc line for calling the function directly for later testing.âIt receives as parameters the function definition, the individual parms in a vector and the resultçä çäThis function is mainly used for Cache Monitoring and will print a specific function for every parm variation when it is called. çäTo actually use this function copy it into the beginning of the function B that you want to monitor and then use the çäfunction header of function B as string for the first parameter, then copy all parms including the parentheses and çämake all parms a vector for the second parameter by adding V_ up front, and then the last parm is the actual prior body of the functionçä çäExample:çäTGTDB Proj Policy Inside PUA FaceAmount EOY(rateAssumption; yearIndex; vectorBIR) would have the follwoing new coding:çäVPMS Debug Message with UTV(çäâââ"TGTDB Proj Policy Inside PUA FaceAmount EOY(rateAssumption; yearIndex; vectorBIR)";çäâââV_(rateAssumption; yearIndex; vectorBIR);çäâââ... old codining result used as result parameterçä)çä çä çäModification Log:çäPerformance - 03/02/2009 RB Corrections to allow return of vector result
12a212b3 -2 -2
Description : returns 1 if VPMS Debug indicator is on ($DEBUG=1 or 2), otherwise a zero 
79a9bf50 -2 -2
Description : returns 1 if VPMS Debug indicator is on ($DEBUG=1 or 2), otherwise a zero 
3fa30ff5 -2 -2
Description: Returns 1 if the Calculation is for Multiple Funds. Else, returns 0.çä çäModification Log:çä3/14/2011 - rm - Renamed for clarityçä2/25/2011 - rm - eliminated unused calcType parameter from functionçä2/2/2011 - PAC013 - calcType - BT - Remove //&& RIGHT(calcType, 2) ALIKE "CV"çä10/26/09 - PAC009 - JL - Initial Calculation
6b45a256 -2 -2
Description:  Checks to see if a #NORES is returned by the functionçä çäModification Log:çäpA1001 - Performance - 12/30/2009 - BT - Added
3b13233f -2 -2
Description:  Checks to see if a #NORES is not returned by the functionçä çäModification Log:çäpA1001 - Performance - 12/30/2009 - BT - Added
3a82fb2 -2 -2
Description:  Returns a 1 if the variable does not return a blankçä çäModification Log:çäpA1001 - Performance - 12/30/2009 - BT - Added
317a8d53 -2 -2
Description:  Checks to see if "None" is returned by the functionçä çäModification Log:çäpA1001 - Performance - 12/30/2009 - BT - Added
1a397a7b -2 -2
çä5/12/2011 - PAC013 calcType - BT - Moved from standard modelçä1/12/2011 - PAC013 calcType - BT - Restructure
2aa2674d -2 -2
çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä1/18/2011 - PAC013 calcType - BT - Restructure
b3c44ce -2 -2
çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä4/1/2011 - PAC017 FINRA Rule 2211 - VM - Initial Calculation
79f0049a -2 -2
çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä1/18/2011 - PAC013 calcType - BT - Restructure
9c6b76c -2 -2
çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä1/18/2011 - PAC013 calcType - BT - Restructure
6ac4a1db -2 -2
çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä1/12/2011 - PAC013 calcType - BT - Restructure
3497be46 -2 -2
çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä4/1/2011 - PAC017 FINRA Rule 2211 - VM - Initial Calculationçä
48f2a24d -2 -2
Description: Returns a 1 if the calcType tells the Annual Statements to calculate projections using an Alternative Premiumçä çäModification Log:çä7/12/2011 - PAC024 Annual Statement - BT - add initial function
2601370e -2 -2
Description: Returns a 1 if the calcType is set to No Premiumçä çäModification Log:çäpA1101 - 8/3/2011 - PAC024 - Annual Statement - BT - use correct identifierçä7/12/2011 - PAC024 Annual Statement - BT - add initial function
7acd4b21 -2 -2
Description: Returns a 1 if the calcType tells Annual Statement projections to be calculated using the policy's Planned Premiumçä çäModification Log:çä7/12/2011 - PAC024 Annual Statement - BT - add initial function
16898a25 -2 -2
Description: Returns a 1 if the calcType is set for the Annual Statement to use the Shadow Account Premium when calculating projectionsçä çäModification Log:çäpA1101 - 8/3/2011 - PAC024 - Annual Statement - BT - use correct identifierçäpA1101 - 7/12/2011 - PAC024 Annual Statement - BT - add initial function
;Offset=00000000
