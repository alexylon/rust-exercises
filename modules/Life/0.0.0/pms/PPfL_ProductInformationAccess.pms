;1	25.01.2013 13:46:36	null	null
X0 003f40d0 0 0 0 0 0 0

O0 003f3f8c 0 0 0 0 0 0

E0 003f3ff8 0 0 0 0 0 0

L0 003f4064 0 0 0 0 0 0

B0 003f4214 0 0 0 0 0 0

P0 003f413c 0 0 0 0 0 0

F0 003f41a8 0 003f2928 0 0 0 0

F1 003f2928 003f41a8 003f46f0 003f5008 0 0 2
-- Utility Functions --
Funktion

F1 003f46f0 003f2928 0 003f4870 0 0 2
Table Effective Date(effectiveDate)
Funktion
DATE(effectiveDate;0;0;0;"YMD") //(year(effective_date) * 10000) + (month(effective_date) * 100) + day(effective_date)ä
F1 003f4870 003f2928 003f49a8 0 0 0 2
-- Wildcard Lookup Functions --
Funktion

F1 003f49a8 003f4870 0 003f4b98 0 0 2
key2 lookup(tablename; key1; key2)
Funktion
IF (EXISTS(table(tablename);key1;key2) ; çä  key2 ; çä  IF (EXISTS(table(tablename);key1;0) ; çä    0 ; çä    IF (EXISTS(table(tablename);key1;1000) ; çä      1000 ; çä      ERROR("Key fields " & key1 & "/" & key2 & " not found in " & tablename)çä    )çä)çä)
F1 003f4b98 003f4870 0 003f4e18 0 0 2
key3 lookup(tablename; key1; key2; key3)
Funktion
IF (EXISTS(table(tablename);key1;key2;key3) ; çä  key3 ; çä  IF (EXISTS(table(tablename);key1;key2;0) ; çä    0 ; çä    IF (EXISTS(table(tablename);key1;key2;1000) ; çä      1000 ; çä      ERROR("Key fields " & key1 & "/" & key2 & "/" & key3 & " not found in " & tablename)çä    )çä)çä)
F1 003f4e18 003f4870 0 003f4f78 0 0 2
key4 lookup(tablename; key1; key2; key3; key4)
Funktion
IF (EXISTS(table(tablename);key1;key2;key3;key4) ; çä  key4 ; çä  IF (EXISTS(table(tablename);key1;key2;key3;1000) ; çä    1000 ; çä    IF (EXISTS(table(tablename);key1;key2;key3;0) ; çä      0 ; çä      ERROR("Key fields " & key1 & "/" & key2 & "/" & key3 & "/" & key4 & " not found in " & tablename)çä    )çä)çä)
F1 003f4f78 003f4870 0 01e607b0 0 0 2
key5 lookup(tablename; key1; key2; key3; key4; key5)
Funktion
IF (EXISTS(table(tablename);key1;key2;key3;key4;key5) ; çä  key5 ; çä  IF (EXISTS(table(tablename);key1;key2;key3;key4;0) ; çä    0 ; çä    IF (EXISTS(table(tablename);key1;key2;key3;key4;1000) ; çä      1000 ; çä      ERROR("Key fields " & key1 & "/" & key2 & "/" & key3 & "/" & key4 & "/" & key5 & " not found in " & tablename)çä    )çä)çä)
F1 01e607b0 003f4870 0 01e605a8 0 0 2
key6 lookup(tablename; key1; key2; key3; key4; key5; key6)
Funktion
IF (EXISTS(table(tablename);key1;key2;key3;key4;key5;key6) ; çä  key6 ; çä  IF (EXISTS(table(tablename);key1;key2;key3;key4;key5;0) ; çä    0 ; çä    IF (EXISTS(table(tablename);key1;key2;key3;key4;key5;1000) ; çä      1000 ; çä      ERROR("Key fields " & key1 & "/" & key2 & "/" & key3 & "/" & key4 & "/" & key5 & "/" & key6 & " not found in " & tablename)çä    )çä)çä)
F1 01e605a8 003f4870 0 01e60cf0 0 0 2
key7 lookup(tablename; key1; key2; key3; key4; key5; key6; key7)
Funktion
IF (EXISTS(table(tablename);key1;key2;key3;key4;key5;key6;key7) ; çä  key7 ; çä  IF (EXISTS(table(tablename);key1;key2;key3;key4;key5;key6;0) ; çä    0 ; çä    IF (EXISTS(table(tablename);key1;key2;key3;key4;key5;key6;1000) ; çä      1000 ; çä      ERROR("Key fields " & key1 & "/" & key2 & "/" & key3 & "/" & key4 & "/" & key5 & "/" & key6 & "/" & key7 & " not found in " & tablename)çä    )çä)çä)
F1 01e60cf0 003f4870 0 01e60cf1 0 0 2
key8 lookup(tablename; key1; key2; key3; key4; key5; key6; key7; key8)
Funktion
IF (EXISTS(table(tablename);key1;key2;key3;key4;key5;key6;key7;key8) ; çä  key8 ; çä  IF (EXISTS(table(tablename);key1;key2;key3;key4;key5;key6;key7;0) ; çä    0 ; çä    IF (EXISTS(table(tablename);key1;key2;key3;key4;key5;key6;key7;1000) ; çä      1000 ; çä      ERROR("Key fields " & key1 & "/" & key2 & "/" & key3 & "/" & key4 & "/" & key5 & "/" & key6 & "/" & key7 & key8 & " not found in " & tablename)çä    )çä)çä)
F1 01e60cf1 003f4870 0 01e60cf2 0 0 2
key9 lookup(tablename; key1; key2; key3; key4; key5; key6; key7; key8, key9)
Funktion
IF (EXISTS(table(tablename);key1;key2;key3;key4;key5;key6;key7;key8;key9) ; çä  key9 ; çä  IF (EXISTS(table(tablename);key1;key2;key3;key4;key5;key6;key7;key8;0) ; çä    0 ; çä    IF (EXISTS(table(tablename);key1;key2;key3;key4;key5;key6;key7;key8;1000) ; çä      1000 ; çä      ERROR("Key fields " & key1 & "/" & key2 & "/" & key3 & "/" & key4 & "/" & key5 & "/" & key6 & "/" & key7 & "/" & key8 & "/" & key9 & " not found in " & tablename)çä    )çä)çä)
F1 01e60cf2 003f4870 0 0 0 0 2
key10 lookup(tablename; key1; key2; key3; key4; key5; key6; key7; key8, key9, key10)
Funktion
IF (EXISTS(table(tablename);key1;key2;key3;key4;key5;key6;key7;key8;key9;key10) ; çä  key10 ; çä  IF (EXISTS(table(tablename);key1;key2;key3;key4;key5;key6;key7;key8;key9;0) ; çä    0 ; çä    IF (EXISTS(table(tablename);key1;key2;key3;key4;key5;key6;key7;key8;key9;1000) ; çä      1000 ; çä      ERROR("Key fields " & key1 & "/" & key2 & "/" & key3 & "/" & key4 & "/" & key5 & "/" & key6 & "/" & key7 & "/" & key8 & "/" & key9 & "/" & key10 & " not found in " & tablename)çä    )çä)çä)
F1 003f5008 003f41a8 003f5fe0 0 0 0 2
-- NEW Table Access Functions --
Funktion

F1 003f5fe0 003f5008 003f61a0 0 0 0 2
-- Table Access functions --
Funktion

F1 003f61a0 003f5fe0 003f6350 0 0 0 2
--
Funktion

F1 003f6350 003f61a0 0 7b781350 0 0 2
--
Funktion

F1 7b781350 003f61a0 0 7b32e79a 0 0 2
PP LP CP COP CovOptionProductXLat(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct CovOptionProductXLatçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct CovOptionProductXLat';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct CovOptionProductXLat'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 7b32e79a 003f61a0 0 5bf686a2 0 0 2
DistributionAgreement PPInfo CommOptionAvailable LogicalExpression LogicalCriteria(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table DistributionAgreement PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteriaçäIF (EXISTS('Table DistributionAgreement PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria';e_(v_construct(s_keys);0); //carrierCodeçäe_(v_construct(s_keys);1); //distributionAgreementCodeçäe_(v_construct(s_keys);2); //commOptionçäe_(v_construct(s_keys);3) //operationçä) ; çä   // then read from the table çä'Table DistributionAgreement PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria'[e_(v_construct(s_keys);0);  //carrierCodeçäe_(v_construct(s_keys);1);  //distributionAgreementCodeçäe_(v_construct(s_keys);2);  //commOptionçäe_(v_construct(s_keys);3) //operationçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 5bf686a2 003f61a0 0 72a27f7d 0 0 2
PP LP CP PremiumRate(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct PremiumRateçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct PremiumRate';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçäe_(v_construct(s_keys);8); //mortalityAssumptionTypeçäe_(v_construct(s_keys);9) //premiumRateTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct PremiumRate'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçäe_(v_construct(s_keys);8);  //mortalityAssumptionTypeçäe_(v_construct(s_keys);9) //premiumRateTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 72a27f7d 003f61a0 0 e63c24b 0 0 2
PP CMProduct CommOptionAvailable LogicalExpression LogicalCriteria EnumeratedValue(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct CommissionProduct CommOptionAvailable LogicalExpression LogicalCriteria EnumeratedValueçäIF (EXISTS('Table PolicyProduct CommissionProduct CommOptionAvailable LogicalExpression LogicalCriteria EnumeratedValue';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //commissionAgeCalculationTypeçäe_(v_construct(s_keys);5); //commissionAgePartySelectionçäe_(v_construct(s_keys);6); //participantBasedPartySelectionçäe_(v_construct(s_keys);7); //commOptionçäe_(v_construct(s_keys);8) //operationçä) ; çä   // then read from the table çä'Table PolicyProduct CommissionProduct CommOptionAvailable LogicalExpression LogicalCriteria EnumeratedValue'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //commissionAgeCalculationTypeçäe_(v_construct(s_keys);5);  //commissionAgePartySelectionçäe_(v_construct(s_keys);6);  //participantBasedPartySelectionçäe_(v_construct(s_keys);7);  //commOptionçäe_(v_construct(s_keys);8) //operationçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 e63c24b 003f61a0 0 739c85c1 0 0 2
Party Producer ProducerAgreement ProductTypeInfo(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party Producer ProducerAgreement ProductTypeInfoçäIF (EXISTS('Table Party Producer ProducerAgreement ProductTypeInfo';e_(v_construct(s_keys);0) //partyTypeCodeçä) ; çä   // then read from the table çä'Table Party Producer ProducerAgreement ProductTypeInfo'[e_(v_construct(s_keys);0) //partyTypeCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 739c85c1 003f61a0 0 7f486c0b 0 0 2
IP IPInfoExt AllowedArrangementProduct(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table InvestProduct InvestProductInfo OLifEExtension InvestProductInfoExtension AllowedArrangementProductçäIF (EXISTS('Table InvestProduct InvestProductInfo OLifEExtension InvestProductInfoExtension AllowedArrangementProduct';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2); //productCodeçäe_(v_construct(s_keys);4) //arrTypeçä) ; çä   // then read from the table çäLOOKUPX('Table InvestProduct InvestProductInfo OLifEExtension InvestProductInfoExtension AllowedArrangementProduct';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2); //productCodeçä'table effective date'(e_(v_construct(s_keys);3)); //saleEffectiveDateçäe_(v_construct(s_keys);4); //arrTypeçäfield_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 7f486c0b 003f61a0 0 232c243b 0 0 2
LoanIntMethodCC(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table LoanIntMethodCCçäIF (EXISTS('Table LoanIntMethodCC';e_(v_construct(s_keys);0) //LoanIntMethodCC_id_extçä) ; çä   // then read from the table çä'Table LoanIntMethodCC'[e_(v_construct(s_keys);0) //LoanIntMethodCC_id_extçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 232c243b 003f61a0 0 1fa2c94d 0 0 2
PP LPExt ArrangementProduct ArrangementOptProduct SourceIP(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct SourceInvestProductçäIF (EXISTS('Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct SourceInvestProduct';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //arrTypeçäe_(v_construct(s_keys);5); //arrTypeçäe_(v_construct(s_keys);6) //productCodeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct SourceInvestProduct'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //arrTypeçäe_(v_construct(s_keys);5);  //arrTypeçäe_(v_construct(s_keys);6) //productCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 1fa2c94d 003f61a0 0 3435aac2 0 0 2
PP LP CP COP COIRate(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct COIRateçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct COIRate';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key"); //CovOpt_Keyçäe_(v_construct(s_keys);10) //mortalityAssumptionTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct COIRate'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key");  //CovOpt_Keyçäe_(v_construct(s_keys);10) //mortalityAssumptionTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 3435aac2 003f61a0 0 78ca28a3 0 0 2
PP PPInfo CommOptionAvailable(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct PolicyProductInfo CommOptionAvailableçäIF (EXISTS('Table PolicyProduct PolicyProductInfo CommOptionAvailable';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4) //commOptionçä) ; çä   // then read from the table çä'Table PolicyProduct PolicyProductInfo CommOptionAvailable'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4) //commOptionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 78ca28a3 003f61a0 0 6b5520ef 0 0 2
Party Producer CarrierAppointment Attachment(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party Producer CarrierAppointment AttachmentçäIF (EXISTS('Table Party Producer CarrierAppointment Attachment';e_(v_construct(s_keys);0) //partyTypeCodeçä) ; çä   // then read from the table çä'Table Party Producer CarrierAppointment Attachment'[e_(v_construct(s_keys);0) //partyTypeCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 6b5520ef 003f61a0 0 5c659c74 0 0 2
PP CMProduct CommOptionAvailable LogicalExpression LogicalCriteria KeyDef Extension(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct CommissionProduct CommOptionAvailable LogicalExpression LogicalCriteria KeyDef ExtensionçäIF (EXISTS('Table PolicyProduct CommissionProduct CommOptionAvailable LogicalExpression LogicalCriteria KeyDef Extension';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //commissionAgeCalculationTypeçäe_(v_construct(s_keys);5); //commissionAgePartySelectionçäe_(v_construct(s_keys);6); //participantBasedPartySelectionçäe_(v_construct(s_keys);7); //commOptionçäe_(v_construct(s_keys);8); //operationçäe_(v_construct(s_keys);9); //keyTypeçäe_(v_construct(s_keys);10) //keySubTypeçä) ; çä   // then read from the table çä'Table PolicyProduct CommissionProduct CommOptionAvailable LogicalExpression LogicalCriteria KeyDef Extension'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //commissionAgeCalculationTypeçäe_(v_construct(s_keys);5);  //commissionAgePartySelectionçäe_(v_construct(s_keys);6);  //participantBasedPartySelectionçäe_(v_construct(s_keys);7);  //commOptionçäe_(v_construct(s_keys);8);  //operationçäe_(v_construct(s_keys);9);  //keyTypeçäe_(v_construct(s_keys);10) //keySubTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 5c659c74 003f61a0 0 568402f0 0 0 2
IP RV RVByDuration(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table InvestProduct RateVariation RateVariationByDurationçäIF (EXISTS('Table InvestProduct RateVariation RateVariationByDuration';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2) //rateVariationCodeçä) ; çä   // then read from the table çä'Table InvestProduct RateVariation RateVariationByDuration'[IP(s_keys;"IInvest_Key");  //IInvest_Keyçäe_(v_construct(s_keys);2) //rateVariationCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 568402f0 003f61a0 0 40ddbb2e 0 0 2
PP LP CP COPExt RV(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension RateVariationçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension RateVariation';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key"); //CovOpt_Keyçäe_(v_construct(s_keys);10) //rateVariationCodeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension RateVariation'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key");  //CovOpt_Keyçäe_(v_construct(s_keys);10) //rateVariationCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 40ddbb2e 003f61a0 0 13e9fb9a 0 0 2
PP LP CP COP RestrictionInfo(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct RestrictionInfoçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct RestrictionInfo';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct RestrictionInfo'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 13e9fb9a 003f61a0 0 24a68650 0 0 2
PP LP CP COIRate TableRef(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct COIRate TableRefçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct COIRate TableRef';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçäe_(v_construct(s_keys);8) //mortalityAssumptionTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct COIRate TableRef'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçäe_(v_construct(s_keys);8) //mortalityAssumptionTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 24a68650 003f61a0 0 e4871fb 0 0 2
CommSchedule CommFormula TableRef JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table CommSchedule CommFormula TableRef JurisdictionApprovalçäIF (EXISTS('Table CommSchedule CommFormula TableRef JurisdictionApproval';e_(v_construct(s_keys);0); //carrierCodeçäe_(v_construct(s_keys);1); //commScheduleCodeçä'key3 lookup'("Table CommSchedule CommFormula TableRef JurisdictionApproval";e_(v_construct(s_keys);0);e_(v_construct(s_keys);1);e_(v_construct(s_keys);2)) //jurisdictionçä) ; çä   // then read from the table çä'Table CommSchedule CommFormula TableRef JurisdictionApproval'[e_(v_construct(s_keys);0);  //carrierCodeçäe_(v_construct(s_keys);1);  //commScheduleCodeçä'key3 lookup'("Table CommSchedule CommFormula TableRef JurisdictionApproval";e_(v_construct(s_keys);0);e_(v_construct(s_keys);1);e_(v_construct(s_keys);2)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 e4871fb 003f61a0 0 6014468b 0 0 2
RelationshipCC(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table RelationshipCCçäIF (EXISTS('Table RelationshipCC';e_(v_construct(s_keys);0) //RelationshipCC_id_extçä) ; çä   // then read from the table çä'Table RelationshipCC'[e_(v_construct(s_keys);0) //RelationshipCC_id_extçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 6014468b 003f61a0 0 3efb825 0 0 2
PP Attachment SignatureInfo(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct Attachment SignatureInfoçäIF (EXISTS('Table PolicyProduct Attachment SignatureInfo';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4) //signatureCodeçä) ; çä   // then read from the table çä'Table PolicyProduct Attachment SignatureInfo'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4) //signatureCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 3efb825 003f61a0 0 174b2e39 0 0 2
PP LP CP UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension AgeAmtProduct(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension AgeAmtProductçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension AgeAmtProduct';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension AgeAmtProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8)); //underwritingClassçäe_(v_construct(s_keys);9); //underwritingSubClassçä'key5 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension AgeAmtProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension AgeAmtProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8));e_(v_construct(s_keys);9);e_(v_construct(s_keys);10)); //tobaccoPremiumBasisçä'key6 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension AgeAmtProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension AgeAmtProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8));e_(v_construct(s_keys);9);'key5 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension AgeAmtProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension AgeAmtProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8));e_(v_construct(s_keys);9);e_(v_construct(s_keys);10));e_(v_construct(s_keys);11)) //issueGenderçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension AgeAmtProduct'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension AgeAmtProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8));  //underwritingClassçäe_(v_construct(s_keys);9);  //underwritingSubClassçä'key5 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension AgeAmtProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension AgeAmtProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8));e_(v_construct(s_keys);9);e_(v_construct(s_keys);10));  //tobaccoPremiumBasisçä'key6 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension AgeAmtProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension AgeAmtProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8));e_(v_construct(s_keys);9);'key5 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension AgeAmtProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension AgeAmtProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8));e_(v_construct(s_keys);9);e_(v_construct(s_keys);10));e_(v_construct(s_keys);11)) //issueGenderçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 174b2e39 003f61a0 0 31621849 0 0 2
PP LPExt ArrangementProduct ArrangementOptProduct QualifiedPlanEntity Market(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct QualifiedPlanEntity MarketçäIF (EXISTS('Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct QualifiedPlanEntity Market';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //arrTypeçäe_(v_construct(s_keys);5) //marketTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct QualifiedPlanEntity Market'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //arrTypeçäe_(v_construct(s_keys);5) //marketTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 31621849 003f61a0 0 45b1b376 0 0 2
Party Producer CarrierAppointment LineOfAuthority(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party Producer CarrierAppointment LineOfAuthorityçäIF (EXISTS('Table Party Producer CarrierAppointment LineOfAuthority';e_(v_construct(s_keys);0); //partyTypeCodeçäe_(v_construct(s_keys);1) //lineOfAuthorityTypeçä) ; çä   // then read from the table çä'Table Party Producer CarrierAppointment LineOfAuthority'[e_(v_construct(s_keys);0);  //partyTypeCodeçäe_(v_construct(s_keys);1) //lineOfAuthorityTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 45b1b376 003f61a0 0 64315360 0 0 2
IP IPInfoExt IndexCalc(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table InvestProduct InvestProductInfo OLifEExtension InvestProductInfoExtension IndexCalcçäIF (EXISTS('Table InvestProduct InvestProductInfo OLifEExtension InvestProductInfoExtension IndexCalc';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2); //productCodeçäe_(v_construct(s_keys);4) //periodModeçä) ; çä   // then read from the table çäLOOKUPX('Table InvestProduct InvestProductInfo OLifEExtension InvestProductInfoExtension IndexCalc';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2); //productCodeçä'table effective date'(e_(v_construct(s_keys);3)); //saleEffectiveDateçäe_(v_construct(s_keys);4); //periodModeçäfield_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 64315360 003f61a0 0 77e2a4bc 0 0 2
PP PaymentModeMethProduct Fee TableRef(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct PaymentModeMethProduct Fee TableRefçäIF (EXISTS('Table PolicyProduct PaymentModeMethProduct Fee TableRef';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //paymentModeçäe_(v_construct(s_keys);5); //paymentMethodçäe_(v_construct(s_keys);6) //feeTypeçä) ; çä   // then read from the table çä'Table PolicyProduct PaymentModeMethProduct Fee TableRef'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //paymentModeçäe_(v_construct(s_keys);5);  //paymentMethodçäe_(v_construct(s_keys);6) //feeTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 77e2a4bc 003f61a0 0 adcfd41 0 0 2
PP PaymentModeMethProduct FeeExt MinBalanceCalcRule(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct PaymentModeMethProduct Fee OLifEExtension FeeExtension MinBalanceCalcRuleçäIF (EXISTS('Table PolicyProduct PaymentModeMethProduct Fee OLifEExtension FeeExtension MinBalanceCalcRule';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //paymentModeçäe_(v_construct(s_keys);5); //paymentMethodçäe_(v_construct(s_keys);6); //feeTypeçäe_(v_construct(s_keys);7); //balanceTypeçäe_(v_construct(s_keys);8) //sequenceNumberçä) ; çä   // then read from the table çä'Table PolicyProduct PaymentModeMethProduct Fee OLifEExtension FeeExtension MinBalanceCalcRule'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //paymentModeçäe_(v_construct(s_keys);5);  //paymentMethodçäe_(v_construct(s_keys);6);  //feeTypeçäe_(v_construct(s_keys);7);  //balanceTypeçäe_(v_construct(s_keys);8) //sequenceNumberçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 adcfd41 003f61a0 0 36c1fe52 0 0 2
PP PaymentModeMethProduct Fee JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct PaymentModeMethProduct Fee JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct PaymentModeMethProduct Fee JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //paymentModeçäe_(v_construct(s_keys);5); //paymentMethodçäe_(v_construct(s_keys);6); //feeTypeçä'key5 lookup'("Table PolicyProduct PaymentModeMethProduct Fee JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4);e_(v_construct(s_keys);5);e_(v_construct(s_keys);6);e_(v_construct(s_keys);7)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct PaymentModeMethProduct Fee JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //paymentModeçäe_(v_construct(s_keys);5);  //paymentMethodçäe_(v_construct(s_keys);6);  //feeTypeçä'key5 lookup'("Table PolicyProduct PaymentModeMethProduct Fee JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4);e_(v_construct(s_keys);5);e_(v_construct(s_keys);6);e_(v_construct(s_keys);7)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 36c1fe52 003f61a0 0 e0b7ca 0 0 2
PP LP CP COP UnderwritingClassProduct UnderwritingClassProductXLat(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct UnderwritingClassProductXLatçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct UnderwritingClassProductXLat';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key"); //CovOpt_Keyçä'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct UnderwritingClassProductXLat";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10)); //underwritingClassçäe_(v_construct(s_keys);11); //underwritingSubClassçä'key6 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct UnderwritingClassProductXLat";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct UnderwritingClassProductXLat";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10));e_(v_construct(s_keys);11);e_(v_construct(s_keys);12)); //tobaccoPremiumBasisçä'key7 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct UnderwritingClassProductXLat";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct UnderwritingClassProductXLat";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10));e_(v_construct(s_keys);11);'key6 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct UnderwritingClassProductXLat";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct UnderwritingClassProductXLat";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10));e_(v_construct(s_keys);11);e_(v_construct(s_keys);12));e_(v_construct(s_keys);13)) //issueGenderçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct UnderwritingClassProductXLat'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key");  //CovOpt_Keyçä'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct UnderwritingClassProductXLat";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10));  //underwritingClassçäe_(v_construct(s_keys);11);  //underwritingSubClassçä'key6 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct UnderwritingClassProductXLat";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct UnderwritingClassProductXLat";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10));e_(v_construct(s_keys);11);e_(v_construct(s_keys);12));  //tobaccoPremiumBasisçä'key7 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct UnderwritingClassProductXLat";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct UnderwritingClassProductXLat";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10));e_(v_construct(s_keys);11);'key6 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct UnderwritingClassProductXLat";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct UnderwritingClassProductXLat";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10));e_(v_construct(s_keys);11);e_(v_construct(s_keys);12));e_(v_construct(s_keys);13)) //issueGenderçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 e0b7ca 003f61a0 0 48fde05b 0 0 2
FS(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table FinancialStatementçäIF (EXISTS('Table FinancialStatement';e_(v_construct(s_keys);0) //statementTypeçä) ; çä   // then read from the table çä'Table FinancialStatement'[e_(v_construct(s_keys);0) //statementTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 48fde05b 003f61a0 0 6085cf6e 0 0 2
PP IPInfo InvestProductInfoXLat(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct InvestProductInfo InvestProductInfoXLatçäIF (EXISTS('Table PolicyProduct InvestProductInfo InvestProductInfoXLat';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP IPInfo'(s_keys;"Invest_Key") //Invest_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct InvestProductInfo InvestProductInfoXLat'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP IPInfo'(s_keys;"Invest_Key") //Invest_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 6085cf6e 003f61a0 0 4ac69cdf 0 0 2
PP LP CPExt CPFeature AdditionalPaymentProvision Fee TableRef(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension CoverageProductFeature AdditionalPaymentProvision Fee TableRefçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension CoverageProductFeature AdditionalPaymentProvision Fee TableRef';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçäe_(v_construct(s_keys);8) //feeTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension CoverageProductFeature AdditionalPaymentProvision Fee TableRef'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçäe_(v_construct(s_keys);8) //feeTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 4ac69cdf 003f61a0 0 2541f1dc 0 0 2
PP Ownership(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct OwnershipçäIF (EXISTS('Table PolicyProduct Ownership';PP(s_keys;"Policy_Key"); //Policy_Keyçä'key2 lookup'("Table PolicyProduct Ownership";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4)) //issueGenderçä) ; çä   // then read from the table çä'Table PolicyProduct Ownership'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'key2 lookup'("Table PolicyProduct Ownership";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4)) //issueGenderçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 2541f1dc 003f61a0 0 146ddc08 0 0 2
PP LPExt ArrangementProduct ArrangementOptProduct Fee TableRef JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct Fee TableRef JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct Fee TableRef JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //arrTypeçäe_(v_construct(s_keys);5); //feeTypeçä'key4 lookup'("Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct Fee TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4);e_(v_construct(s_keys);5);e_(v_construct(s_keys);6)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct Fee TableRef JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //arrTypeçäe_(v_construct(s_keys);5);  //feeTypeçä'key4 lookup'("Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct Fee TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4);e_(v_construct(s_keys);5);e_(v_construct(s_keys);6)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 146ddc08 003f61a0 0 5b50d7c2 0 0 2
Party Producer CarrierAppointment Fee(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party Producer CarrierAppointment FeeçäIF (EXISTS('Table Party Producer CarrierAppointment Fee';e_(v_construct(s_keys);0); //partyTypeCodeçäe_(v_construct(s_keys);1) //feeTypeçä) ; çä   // then read from the table çä'Table Party Producer CarrierAppointment Fee'[e_(v_construct(s_keys);0);  //partyTypeCodeçäe_(v_construct(s_keys);1) //feeTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 5b50d7c2 003f61a0 0 593d778e 0 0 2
FinActivityTypeCC(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table FinActivityTypeCCçäIF (EXISTS('Table FinActivityTypeCC';e_(v_construct(s_keys);0) //FinActivityTypeCC_id_extçä) ; çä   // then read from the table çä'Table FinActivityTypeCC'[e_(v_construct(s_keys);0) //FinActivityTypeCC_id_extçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 593d778e 003f61a0 0 123da30a 0 0 2
PP LP CP DividendRate TableRef JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct DividendRate TableRef JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct DividendRate TableRef JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçäe_(v_construct(s_keys);8); //dividendRateTypeçä'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct DividendRate TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8);e_(v_construct(s_keys);9)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct DividendRate TableRef JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçäe_(v_construct(s_keys);8);  //dividendRateTypeçä'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct DividendRate TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8);e_(v_construct(s_keys);9)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 123da30a 003f61a0 0 21e364d 0 0 2
AccountDesignationCC(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table AccountDesignationCCçäIF (EXISTS('Table AccountDesignationCC';e_(v_construct(s_keys);0) //AccountDesignationCC_id_extçä) ; çä   // then read from the table çä'Table AccountDesignationCC'[e_(v_construct(s_keys);0) //AccountDesignationCC_id_extçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 21e364d 003f61a0 0 9d8d54c 0 0 2
Party Producer License Fee JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party Producer License Fee JurisdictionApprovalçäIF (EXISTS('Table Party Producer License Fee JurisdictionApproval';e_(v_construct(s_keys);0); //partyTypeCodeçäe_(v_construct(s_keys);1); //feeTypeçä'key3 lookup'("Table Party Producer License Fee JurisdictionApproval";e_(v_construct(s_keys);0);e_(v_construct(s_keys);1);e_(v_construct(s_keys);2)) //jurisdictionçä) ; çä   // then read from the table çä'Table Party Producer License Fee JurisdictionApproval'[e_(v_construct(s_keys);0);  //partyTypeCodeçäe_(v_construct(s_keys);1);  //feeTypeçä'key3 lookup'("Table Party Producer License Fee JurisdictionApproval";e_(v_construct(s_keys);0);e_(v_construct(s_keys);1);e_(v_construct(s_keys);2)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 9d8d54c 003f61a0 0 47972e21 0 0 2
Party Producer License FeeExt MinBalanceCalcRule(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party Producer License Fee OLifEExtension FeeExtension MinBalanceCalcRuleçäIF (EXISTS('Table Party Producer License Fee OLifEExtension FeeExtension MinBalanceCalcRule';e_(v_construct(s_keys);0); //partyTypeCodeçäe_(v_construct(s_keys);1); //feeTypeçäe_(v_construct(s_keys);2); //balanceTypeçäe_(v_construct(s_keys);3) //sequenceNumberçä) ; çä   // then read from the table çä'Table Party Producer License Fee OLifEExtension FeeExtension MinBalanceCalcRule'[e_(v_construct(s_keys);0);  //partyTypeCodeçäe_(v_construct(s_keys);1);  //feeTypeçäe_(v_construct(s_keys);2);  //balanceTypeçäe_(v_construct(s_keys);3) //sequenceNumberçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 47972e21 003f61a0 0 3e41ccf5 0 0 2
PP Dividend(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct DividendçäIF (EXISTS('Table PolicyProduct Dividend';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //divTypeçäe_(v_construct(s_keys);5) //divOYTOptTypeçä) ; çä   // then read from the table çä'Table PolicyProduct Dividend'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //divTypeçäe_(v_construct(s_keys);5) //divOYTOptTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 3e41ccf5 003f61a0 0 68b98eb0 0 0 2
PP Attachment AttachmentReference(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct Attachment AttachmentReferenceçäIF (EXISTS('Table PolicyProduct Attachment AttachmentReference';PP(s_keys;"Policy_Key") //Policy_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct Attachment AttachmentReference'[PP(s_keys;"Policy_Key") //Policy_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 68b98eb0 003f61a0 0 4725874a 0 0 2
PP LP CPExt CPFeature AdditionalPaymentProvision FeeExt MinBalanceCalcRule(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension CoverageProductFeature AdditionalPaymentProvision Fee OLifEExtension FeeExtension MinBalanceCalcRuleçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension CoverageProductFeature AdditionalPaymentProvision Fee OLifEExtension FeeExtension MinBalanceCalcRule';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçäe_(v_construct(s_keys);8); //feeTypeçäe_(v_construct(s_keys);9); //balanceTypeçäe_(v_construct(s_keys);10) //sequenceNumberçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension CoverageProductFeature AdditionalPaymentProvision Fee OLifEExtension FeeExtension MinBalanceCalcRule'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçäe_(v_construct(s_keys);8);  //feeTypeçäe_(v_construct(s_keys);9);  //balanceTypeçäe_(v_construct(s_keys);10) //sequenceNumberçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 4725874a 003f61a0 0 5aadd7e9 0 0 2
PP LP CP COP DisabilityHealthProvisions NatureSubCategoryOption(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions NatureSubCategoryOptionçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions NatureSubCategoryOption';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions NatureSubCategoryOption'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 5aadd7e9 003f61a0 0 5f7feb0d 0 0 2
PP LP CP DisabilityHealthProvisions MannerOfLossOption(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions MannerOfLossOptionçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions MannerOfLossOption';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions MannerOfLossOption'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 5f7feb0d 003f61a0 0 2150571d 0 0 2
PP LP CP COP Fee JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct Fee JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct Fee JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key"); //CovOpt_Keyçäe_(v_construct(s_keys);10); //feeTypeçä'key5 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct Fee JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10);e_(v_construct(s_keys);11)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct Fee JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key");  //CovOpt_Keyçäe_(v_construct(s_keys);10);  //feeTypeçä'key5 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct Fee JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10);e_(v_construct(s_keys);11)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 2150571d 003f61a0 0 1d205b05 0 0 2
PP TableRef(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct TableRefçäIF (EXISTS('Table PolicyProduct TableRef';PP(s_keys;"Policy_Key") //Policy_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct TableRef'[PP(s_keys;"Policy_Key") //Policy_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 1d205b05 003f61a0 0 50255e69 0 0 2
PP LP CP COIRate TableRef JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct COIRate TableRef JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct COIRate TableRef JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçäe_(v_construct(s_keys);8); //mortalityAssumptionTypeçä'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct COIRate TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8);e_(v_construct(s_keys);9)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct COIRate TableRef JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçäe_(v_construct(s_keys);8);  //mortalityAssumptionTypeçä'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct COIRate TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8);e_(v_construct(s_keys);9)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 50255e69 003f61a0 0 25306dea 0 0 2
PP LP CP DisabilityHealthProvisions NatureSubCategoryOption(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions NatureSubCategoryOptionçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions NatureSubCategoryOption';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions NatureSubCategoryOption'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 25306dea 003f61a0 0 606f518d 0 0 2
PP IPInfoExt IndexCalc(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct InvestProductInfo OLifEExtension InvestProductInfoExtension IndexCalcçäIF (EXISTS('Table PolicyProduct InvestProductInfo OLifEExtension InvestProductInfoExtension IndexCalc';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP IPInfo'(s_keys;"Invest_Key"); //Invest_Keyçäe_(v_construct(s_keys);6) //periodModeçä) ; çä   // then read from the table çä'Table PolicyProduct InvestProductInfo OLifEExtension InvestProductInfoExtension IndexCalc'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP IPInfo'(s_keys;"Invest_Key");  //Invest_Keyçäe_(v_construct(s_keys);6) //periodModeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 606f518d 003f61a0 0 41828a5 0 0 2
IP IPInfo QualifiedPlanEntity(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table InvestProduct InvestProductInfo QualifiedPlanEntityçäIF (EXISTS('Table InvestProduct InvestProductInfo QualifiedPlanEntity';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2) //productCodeçä) ; çä   // then read from the table çäLOOKUPX('Table InvestProduct InvestProductInfo QualifiedPlanEntity';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2); //productCodeçä'table effective date'(e_(v_construct(s_keys);3)); //saleEffectiveDateçäfield_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 41828a5 003f61a0 0 6e12ccfa 0 0 2
PP LP CP COPExt TableRef(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension TableRefçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension TableRef';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension TableRef'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 6e12ccfa 003f61a0 0 7e1f0b5b 0 0 2
PP LP CP(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProductçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //indicatorCodeçäe_(v_construct(s_keys);5); //productCodeçäe_(v_construct(s_keys);6) //productVersionCodeçä) ; çä   // then read from the table çäLOOKUPX('Table PolicyProduct LifeProduct CoverageProduct';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //indicatorCodeçäe_(v_construct(s_keys);5); //productCodeçäe_(v_construct(s_keys);6); //productVersionCodeçä'table effective date'(e_(v_construct(s_keys);7)); //saleEffectiveDateçäfield_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 7e1f0b5b 003f61a0 0 58bc7805 0 0 2
PP JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçä'key2 lookup'("Table PolicyProduct JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'key2 lookup'("Table PolicyProduct JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 58bc7805 003f61a0 0 276dbf63 0 0 2
PP LP CP DisabilityHealthProvisions BenePeriodAccOption(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions BenePeriodAccOptionçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions BenePeriodAccOption';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions BenePeriodAccOption'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 276dbf63 003f61a0 0 4cac81f1 0 0 2
Party Producer License Fee TableRef JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party Producer License Fee TableRef JurisdictionApprovalçäIF (EXISTS('Table Party Producer License Fee TableRef JurisdictionApproval';e_(v_construct(s_keys);0); //partyTypeCodeçäe_(v_construct(s_keys);1); //feeTypeçä'key3 lookup'("Table Party Producer License Fee TableRef JurisdictionApproval";e_(v_construct(s_keys);0);e_(v_construct(s_keys);1);e_(v_construct(s_keys);2)) //jurisdictionçä) ; çä   // then read from the table çä'Table Party Producer License Fee TableRef JurisdictionApproval'[e_(v_construct(s_keys);0);  //partyTypeCodeçäe_(v_construct(s_keys);1);  //feeTypeçä'key3 lookup'("Table Party Producer License Fee TableRef JurisdictionApproval";e_(v_construct(s_keys);0);e_(v_construct(s_keys);1);e_(v_construct(s_keys);2)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 4cac81f1 003f61a0 0 253d1d2f 0 0 2
PP LP CP COPExt RV TableRef JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension RateVariation TableRef JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension RateVariation TableRef JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key"); //CovOpt_Keyçäe_(v_construct(s_keys);10); //rateVariationCodeçä'key5 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension RateVariation TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10);e_(v_construct(s_keys);11)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension RateVariation TableRef JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key");  //CovOpt_Keyçäe_(v_construct(s_keys);10);  //rateVariationCodeçä'key5 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension RateVariation TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10);e_(v_construct(s_keys);11)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 253d1d2f 003f61a0 0 bf7fc6d 0 0 2
IP IPInfo Fee JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table InvestProduct InvestProductInfo Fee JurisdictionApprovalçäIF (EXISTS('Table InvestProduct InvestProductInfo Fee JurisdictionApproval';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2); //productCodeçäe_(v_construct(s_keys);4); //feeTypeçä'key5 lookup'("Table InvestProduct InvestProductInfo Fee JurisdictionApproval";IP(s_keys;"IInvest_Key");e_(v_construct(s_keys);2);'table effective date'(e_(v_construct(s_keys);3));e_(v_construct(s_keys);4);e_(v_construct(s_keys);5)) //jurisdictionçä) ; çä   // then read from the table çäLOOKUPX('Table InvestProduct InvestProductInfo Fee JurisdictionApproval';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2); //productCodeçä'table effective date'(e_(v_construct(s_keys);3)); //saleEffectiveDateçäe_(v_construct(s_keys);4); //feeTypeçä'key5 lookup'("Table InvestProduct InvestProductInfo Fee JurisdictionApproval";IP(s_keys;"IInvest_Key");e_(v_construct(s_keys);2);'table effective date'(e_(v_construct(s_keys);3));e_(v_construct(s_keys);4);e_(v_construct(s_keys);5)); //jurisdictionçäfield_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 bf7fc6d 003f61a0 0 10ea1650 0 0 2
PPExt FAVCodeInfo(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct OLifEExtension PolicyProductExtension FAVCodeInfoçäIF (EXISTS('Table PolicyProduct OLifEExtension PolicyProductExtension FAVCodeInfo';PP(s_keys;"Policy_Key") //Policy_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct OLifEExtension PolicyProductExtension FAVCodeInfo'[PP(s_keys;"Policy_Key") //Policy_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 10ea1650 003f61a0 0 40d47b21 0 0 2
PP Ownership QualifiedPlanEntity Market(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct Ownership QualifiedPlanEntity MarketçäIF (EXISTS('Table PolicyProduct Ownership QualifiedPlanEntity Market';PP(s_keys;"Policy_Key"); //Policy_Keyçä'key2 lookup'("Table PolicyProduct Ownership QualifiedPlanEntity Market";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4)); //issueGenderçäe_(v_construct(s_keys);5) //marketTypeçä) ; çä   // then read from the table çä'Table PolicyProduct Ownership QualifiedPlanEntity Market'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'key2 lookup'("Table PolicyProduct Ownership QualifiedPlanEntity Market";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4));  //issueGenderçäe_(v_construct(s_keys);5) //marketTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 40d47b21 003f61a0 0 1c761e9c 0 0 2
PP LP CP DisabilityHealthProvisions EmploymentClassOption(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions EmploymentClassOptionçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions EmploymentClassOption';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions EmploymentClassOption'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 1c761e9c 003f61a0 0 7b83c54f 0 0 2
PPExt FS(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct OLifEExtension PolicyProductExtension FinancialStatementçäIF (EXISTS('Table PolicyProduct OLifEExtension PolicyProductExtension FinancialStatement';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4) //statementTypeçä) ; çä   // then read from the table çä'Table PolicyProduct OLifEExtension PolicyProductExtension FinancialStatement'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4) //statementTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 7b83c54f 003f61a0 0 29c18b3 0 0 2
PP LPExt ArrangementProduct ArrangementOptProduct Fee(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct FeeçäIF (EXISTS('Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct Fee';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //arrTypeçäe_(v_construct(s_keys);5) //feeTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct Fee'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //arrTypeçäe_(v_construct(s_keys);5) //feeTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 29c18b3 003f61a0 0 22a74834 0 0 2
DistributionAgreement PPInfo(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table DistributionAgreement PolicyProductInfoçäIF (EXISTS('Table DistributionAgreement PolicyProductInfo';e_(v_construct(s_keys);0); //carrierCodeçäe_(v_construct(s_keys);1) //distributionAgreementCodeçä) ; çä   // then read from the table çä'Table DistributionAgreement PolicyProductInfo'[e_(v_construct(s_keys);0);  //carrierCodeçäe_(v_construct(s_keys);1) //distributionAgreementCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 22a74834 003f61a0 0 4d9dc4c4 0 0 2
PP IPInfoExt RV RVByDuration(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct InvestProductInfo OLifEExtension InvestProductInfoExtension RateVariation RateVariationByDurationçäIF (EXISTS('Table PolicyProduct InvestProductInfo OLifEExtension InvestProductInfoExtension RateVariation RateVariationByDuration';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP IPInfo'(s_keys;"Invest_Key"); //Invest_Keyçäe_(v_construct(s_keys);6) //rateVariationCodeçä) ; çä   // then read from the table çä'Table PolicyProduct InvestProductInfo OLifEExtension InvestProductInfoExtension RateVariation RateVariationByDuration'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP IPInfo'(s_keys;"Invest_Key");  //Invest_Keyçäe_(v_construct(s_keys);6) //rateVariationCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 4d9dc4c4 003f61a0 0 2b48a658 0 0 2
PP LP CPExt CPFeature AutoPremProvision(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension CoverageProductFeature AutoPremProvisionçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension CoverageProductFeature AutoPremProvision';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension CoverageProductFeature AutoPremProvision'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 2b48a658 003f61a0 0 3381d450 0 0 2
PP Ownership FundingSourceMethodsAllowed(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct Ownership FundingSourceMethodsAllowedçäIF (EXISTS('Table PolicyProduct Ownership FundingSourceMethodsAllowed';PP(s_keys;"Policy_Key"); //Policy_Keyçä'key2 lookup'("Table PolicyProduct Ownership FundingSourceMethodsAllowed";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4)) //issueGenderçä) ; çä   // then read from the table çä'Table PolicyProduct Ownership FundingSourceMethodsAllowed'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'key2 lookup'("Table PolicyProduct Ownership FundingSourceMethodsAllowed";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4)) //issueGenderçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 3381d450 003f61a0 0 4cc61876 0 0 2
DistributionAgreement CommRemittance(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table DistributionAgreement CommRemittanceçäIF (EXISTS('Table DistributionAgreement CommRemittance';e_(v_construct(s_keys);0); //carrierCodeçäe_(v_construct(s_keys);1) //distributionAgreementCodeçä) ; çä   // then read from the table çä'Table DistributionAgreement CommRemittance'[e_(v_construct(s_keys);0);  //carrierCodeçäe_(v_construct(s_keys);1) //distributionAgreementCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 4cc61876 003f61a0 0 4acb3e76 0 0 2
IP IPInfoExt RV TableRef JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table InvestProduct InvestProductInfo OLifEExtension InvestProductInfoExtension RateVariation TableRef JurisdictionApprovalçäIF (EXISTS('Table InvestProduct InvestProductInfo OLifEExtension InvestProductInfoExtension RateVariation TableRef JurisdictionApproval';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2); //productCodeçäe_(v_construct(s_keys);4); //rateVariationCodeçä'key5 lookup'("Table InvestProduct InvestProductInfo OLifEExtension InvestProductInfoExtension RateVariation TableRef JurisdictionApproval";IP(s_keys;"IInvest_Key");e_(v_construct(s_keys);2);'table effective date'(e_(v_construct(s_keys);3));e_(v_construct(s_keys);4);e_(v_construct(s_keys);5)) //jurisdictionçä) ; çä   // then read from the table çäLOOKUPX('Table InvestProduct InvestProductInfo OLifEExtension InvestProductInfoExtension RateVariation TableRef JurisdictionApproval';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2); //productCodeçä'table effective date'(e_(v_construct(s_keys);3)); //saleEffectiveDateçäe_(v_construct(s_keys);4); //rateVariationCodeçä'key5 lookup'("Table InvestProduct InvestProductInfo OLifEExtension InvestProductInfoExtension RateVariation TableRef JurisdictionApproval";IP(s_keys;"IInvest_Key");e_(v_construct(s_keys);2);'table effective date'(e_(v_construct(s_keys);3));e_(v_construct(s_keys);4);e_(v_construct(s_keys);5)); //jurisdictionçäfield_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 4acb3e76 003f61a0 0 375892a 0 0 2
PP LPExt GenericRDR(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension GenericRDRçäIF (EXISTS('Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension GenericRDR';PP(s_keys;"Policy_Key") //Policy_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension GenericRDR'[PP(s_keys;"Policy_Key") //Policy_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 375892a 003f61a0 0 780fb5ea 0 0 2
PP LP CP DisabilityHealthProvisions DeductionOption(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions DeductionOptionçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions DeductionOption';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions DeductionOption'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 780fb5ea 003f61a0 0 345e3881 0 0 2
IP IPInfo JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table InvestProduct InvestProductInfo JurisdictionApprovalçäIF (EXISTS('Table InvestProduct InvestProductInfo JurisdictionApproval';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2); //productCodeçä'key4 lookup'("Table InvestProduct InvestProductInfo JurisdictionApproval";IP(s_keys;"IInvest_Key");e_(v_construct(s_keys);2);'table effective date'(e_(v_construct(s_keys);3));e_(v_construct(s_keys);4)) //jurisdictionçä) ; çä   // then read from the table çäLOOKUPX('Table InvestProduct InvestProductInfo JurisdictionApproval';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2); //productCodeçä'table effective date'(e_(v_construct(s_keys);3)); //saleEffectiveDateçä'key4 lookup'("Table InvestProduct InvestProductInfo JurisdictionApproval";IP(s_keys;"IInvest_Key");e_(v_construct(s_keys);2);'table effective date'(e_(v_construct(s_keys);3));e_(v_construct(s_keys);4)); //jurisdictionçäfield_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 345e3881 003f61a0 0 59128d04 0 0 2
BestDayToCallCC(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table BestDayToCallCCçäIF (EXISTS('Table BestDayToCallCC';e_(v_construct(s_keys);0) //BestDayToCallCC_id_extçä) ; çä   // then read from the table çä'Table BestDayToCallCC'[e_(v_construct(s_keys);0) //BestDayToCallCC_id_extçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 59128d04 003f61a0 0 145a6c0d 0 0 2
PP LP CPExt JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 145a6c0d 003f61a0 0 f57c3fa 0 0 2
IP IPInfoExt RV(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table InvestProduct InvestProductInfo OLifEExtension InvestProductInfoExtension RateVariationçäIF (EXISTS('Table InvestProduct InvestProductInfo OLifEExtension InvestProductInfoExtension RateVariation';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2); //productCodeçäe_(v_construct(s_keys);4) //rateVariationCodeçä) ; çä   // then read from the table çäLOOKUPX('Table InvestProduct InvestProductInfo OLifEExtension InvestProductInfoExtension RateVariation';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2); //productCodeçä'table effective date'(e_(v_construct(s_keys);3)); //saleEffectiveDateçäe_(v_construct(s_keys);4); //rateVariationCodeçäfield_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 f57c3fa 003f61a0 0 31408d5b 0 0 2
SourceInfo(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table SourceInfoçäIF (EXISTS('Table SourceInfo';e_(v_construct(s_keys);0) //sequenceNumberçä) ; çä   // then read from the table çä'Table SourceInfo'[e_(v_construct(s_keys);0) //sequenceNumberçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 31408d5b 003f61a0 0 493e1104 0 0 2
PP LP CP TableRef JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct TableRef JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct TableRef JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct TableRef JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 493e1104 003f61a0 0 4348caae 0 0 2
Party Phone(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party PhoneçäIF (EXISTS('Table Party Phone';e_(v_construct(s_keys);0) //partyTypeCodeçä) ; çä   // then read from the table çä'Table Party Phone'[e_(v_construct(s_keys);0) //partyTypeCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 4348caae 003f61a0 0 6a9985af 0 0 2
PP LP CP CashValueRate TableRef JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CashValueRate TableRef JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CashValueRate TableRef JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçäe_(v_construct(s_keys);8); //mortalityAssumptionTypeçä'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CashValueRate TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8);e_(v_construct(s_keys);9)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CashValueRate TableRef JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçäe_(v_construct(s_keys);8);  //mortalityAssumptionTypeçä'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CashValueRate TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8);e_(v_construct(s_keys);9)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 6a9985af 003f61a0 0 31238556 0 0 2
PP Reward(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct RewardçäIF (EXISTS('Table PolicyProduct Reward';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4) //rewardResultTypeçä) ; çä   // then read from the table çä'Table PolicyProduct Reward'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4) //rewardResultTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 31238556 003f61a0 0 627aef00 0 0 2
PP PaymentModeMethProduct Fee(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct PaymentModeMethProduct FeeçäIF (EXISTS('Table PolicyProduct PaymentModeMethProduct Fee';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //paymentModeçäe_(v_construct(s_keys);5); //paymentMethodçäe_(v_construct(s_keys);6) //feeTypeçä) ; çä   // then read from the table çä'Table PolicyProduct PaymentModeMethProduct Fee'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //paymentModeçäe_(v_construct(s_keys);5);  //paymentMethodçäe_(v_construct(s_keys);6) //feeTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 627aef00 003f61a0 0 238d9a62 0 0 2
PP FreelookInvestRuleProduct(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct FreelookInvestRuleProductçäIF (EXISTS('Table PolicyProduct FreelookInvestRuleProduct';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4) //investRuleProductçä) ; çä   // then read from the table çä'Table PolicyProduct FreelookInvestRuleProduct'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4) //investRuleProductçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 238d9a62 003f61a0 0 4da88b2d 0 0 2
PP IPInfoExt RV(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct InvestProductInfo OLifEExtension InvestProductInfoExtension RateVariationçäIF (EXISTS('Table PolicyProduct InvestProductInfo OLifEExtension InvestProductInfoExtension RateVariation';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP IPInfo'(s_keys;"Invest_Key"); //Invest_Keyçäe_(v_construct(s_keys);6) //rateVariationCodeçä) ; çä   // then read from the table çä'Table PolicyProduct InvestProductInfo OLifEExtension InvestProductInfoExtension RateVariation'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP IPInfo'(s_keys;"Invest_Key");  //Invest_Keyçäe_(v_construct(s_keys);6) //rateVariationCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 4da88b2d 003f61a0 0 2f3406cc 0 0 2
PP LPExt ArrangementProduct ArrangementOptProduct JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //arrTypeçä'key3 lookup'("Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4);e_(v_construct(s_keys);5)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //arrTypeçä'key3 lookup'("Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4);e_(v_construct(s_keys);5)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 2f3406cc 003f61a0 0 2e427fd6 0 0 2
PP LP CP COP Fee(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct FeeçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct Fee';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key"); //CovOpt_Keyçäe_(v_construct(s_keys);10) //feeTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct Fee'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key");  //CovOpt_Keyçäe_(v_construct(s_keys);10) //feeTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 2e427fd6 003f61a0 0 6a6da67 0 0 2
PP LPExt ArrangementProduct ArrangementOptProduct NumIP(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct NumInvestProductçäIF (EXISTS('Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct NumInvestProduct';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4) //arrTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct NumInvestProduct'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4) //arrTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 6a6da67 003f61a0 0 679fdb03 0 0 2
Party Producer Registration RegistrationJurisdiction(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party Producer Registration RegistrationJurisdictionçäIF (EXISTS('Table Party Producer Registration RegistrationJurisdiction';e_(v_construct(s_keys);0) //partyTypeCodeçä) ; çä   // then read from the table çä'Table Party Producer Registration RegistrationJurisdiction'[e_(v_construct(s_keys);0) //partyTypeCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 679fdb03 003f61a0 0 3a3d3f0d 0 0 2
Party Producer CarrierAppointment Fee TableRef JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party Producer CarrierAppointment Fee TableRef JurisdictionApprovalçäIF (EXISTS('Table Party Producer CarrierAppointment Fee TableRef JurisdictionApproval';e_(v_construct(s_keys);0); //partyTypeCodeçäe_(v_construct(s_keys);1); //feeTypeçä'key3 lookup'("Table Party Producer CarrierAppointment Fee TableRef JurisdictionApproval";e_(v_construct(s_keys);0);e_(v_construct(s_keys);1);e_(v_construct(s_keys);2)) //jurisdictionçä) ; çä   // then read from the table çä'Table Party Producer CarrierAppointment Fee TableRef JurisdictionApproval'[e_(v_construct(s_keys);0);  //partyTypeCodeçäe_(v_construct(s_keys);1);  //feeTypeçä'key3 lookup'("Table Party Producer CarrierAppointment Fee TableRef JurisdictionApproval";e_(v_construct(s_keys);0);e_(v_construct(s_keys);1);e_(v_construct(s_keys);2)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 3a3d3f0d 003f61a0 0 4f3b96b6 0 0 2
PP LP CPExt LTCDDCalcRules(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension LTCDDCalcRulesçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension LTCDDCalcRules';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension LTCDDCalcRules'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 4f3b96b6 003f61a0 0 4cbcad08 0 0 2
IP IPInfo RateVariationKey(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table InvestProduct InvestProductInfo RateVariationKeyçäIF (EXISTS('Table InvestProduct InvestProductInfo RateVariationKey';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2) //productCodeçä) ; çä   // then read from the table çäLOOKUPX('Table InvestProduct InvestProductInfo RateVariationKey';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2); //productCodeçä'table effective date'(e_(v_construct(s_keys);3)); //saleEffectiveDateçäfield_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 4cbcad08 003f61a0 0 176548f4 0 0 2
IP RV RVByVolume(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table InvestProduct RateVariation RateVariationByVolumeçäIF (EXISTS('Table InvestProduct RateVariation RateVariationByVolume';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2) //rateVariationCodeçä) ; çä   // then read from the table çä'Table InvestProduct RateVariation RateVariationByVolume'[IP(s_keys;"IInvest_Key");  //IInvest_Keyçäe_(v_construct(s_keys);2) //rateVariationCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 176548f4 003f61a0 0 195f43f8 0 0 2
PP LP CP COP DisabilityHealthProvisions ConditionTypeOption(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions ConditionTypeOptionçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions ConditionTypeOption';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions ConditionTypeOption'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 195f43f8 003f61a0 0 759e1f6d 0 0 2
PP PPInfo CommOptionAvailable LogicalExpression LogicalCriteria AxisDef Extension(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria AxisDef ExtensionçäIF (EXISTS('Table PolicyProduct PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria AxisDef Extension';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //commOptionçäe_(v_construct(s_keys);5); //operationçäe_(v_construct(s_keys);6) //axisNameçä) ; çä   // then read from the table çä'Table PolicyProduct PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria AxisDef Extension'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //commOptionçäe_(v_construct(s_keys);5);  //operationçäe_(v_construct(s_keys);6) //axisNameçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 759e1f6d 003f61a0 0 71360e8a 0 0 2
PP PPInfo JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct PolicyProductInfo JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct PolicyProductInfo JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçä'key2 lookup'("Table PolicyProduct PolicyProductInfo JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct PolicyProductInfo JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'key2 lookup'("Table PolicyProduct PolicyProductInfo JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 71360e8a 003f61a0 0 73197e4f 0 0 2
PP LP CP COP DividendRate TableRef(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DividendRate TableRefçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DividendRate TableRef';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key"); //CovOpt_Keyçäe_(v_construct(s_keys);10) //dividendRateTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DividendRate TableRef'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key");  //CovOpt_Keyçäe_(v_construct(s_keys);10) //dividendRateTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 73197e4f 003f61a0 0 4cf8b35b 0 0 2
PP FeeExt MinBalanceCalcRule(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct Fee OLifEExtension FeeExtension MinBalanceCalcRuleçäIF (EXISTS('Table PolicyProduct Fee OLifEExtension FeeExtension MinBalanceCalcRule';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //feeTypeçäe_(v_construct(s_keys);5); //balanceTypeçäe_(v_construct(s_keys);6) //sequenceNumberçä) ; çä   // then read from the table çä'Table PolicyProduct Fee OLifEExtension FeeExtension MinBalanceCalcRule'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //feeTypeçäe_(v_construct(s_keys);5);  //balanceTypeçäe_(v_construct(s_keys);6) //sequenceNumberçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 4cf8b35b 003f61a0 0 28fa81d6 0 0 2
PP LPExt ArrangementProduct ArrangementOptProduct AllocTypeProduct AmountProduct(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct AllocTypeProduct AmountProductçäIF (EXISTS('Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct AllocTypeProduct AmountProduct';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4) //arrTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct AllocTypeProduct AmountProduct'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4) //arrTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 28fa81d6 003f61a0 0 5f8a5658 0 0 2
Party EMailAddress(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party EMailAddressçäIF (EXISTS('Table Party EMailAddress';e_(v_construct(s_keys);0) //partyTypeCodeçä) ; çä   // then read from the table çä'Table Party EMailAddress'[e_(v_construct(s_keys);0) //partyTypeCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 5f8a5658 003f61a0 0 32fee67 0 0 2
PP LP CP RestrictionInfo(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct RestrictionInfoçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct RestrictionInfo';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct RestrictionInfo'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 32fee67 003f61a0 0 7e293f0 0 0 2
PP LPExt ArrangementProduct ArrangementOptProduct PaymentModeMethProduct Fee JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct PaymentModeMethProduct Fee JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct PaymentModeMethProduct Fee JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //arrTypeçäe_(v_construct(s_keys);5); //paymentModeçäe_(v_construct(s_keys);6); //paymentMethodçäe_(v_construct(s_keys);7); //feeTypeçä'key6 lookup'("Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct PaymentModeMethProduct Fee JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4);e_(v_construct(s_keys);5);e_(v_construct(s_keys);6);e_(v_construct(s_keys);7);e_(v_construct(s_keys);8)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct PaymentModeMethProduct Fee JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //arrTypeçäe_(v_construct(s_keys);5);  //paymentModeçäe_(v_construct(s_keys);6);  //paymentMethodçäe_(v_construct(s_keys);7);  //feeTypeçä'key6 lookup'("Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct PaymentModeMethProduct Fee JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4);e_(v_construct(s_keys);5);e_(v_construct(s_keys);6);e_(v_construct(s_keys);7);e_(v_construct(s_keys);8)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 7e293f0 003f61a0 0 698166e5 0 0 2
DistributionAgreement PPInfo CommOptionAvailable(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table DistributionAgreement PolicyProductInfo CommOptionAvailableçäIF (EXISTS('Table DistributionAgreement PolicyProductInfo CommOptionAvailable';e_(v_construct(s_keys);0); //carrierCodeçäe_(v_construct(s_keys);1); //distributionAgreementCodeçäe_(v_construct(s_keys);2) //commOptionçä) ; çä   // then read from the table çä'Table DistributionAgreement PolicyProductInfo CommOptionAvailable'[e_(v_construct(s_keys);0);  //carrierCodeçäe_(v_construct(s_keys);1);  //distributionAgreementCodeçäe_(v_construct(s_keys);2) //commOptionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 698166e5 003f61a0 0 532a7de2 0 0 2
PP TableRef JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct TableRef JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct TableRef JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçä'key2 lookup'("Table PolicyProduct TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct TableRef JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'key2 lookup'("Table PolicyProduct TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 532a7de2 003f61a0 0 53904a8b 0 0 2
PP LP CP COIRate(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct COIRateçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct COIRate';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçäe_(v_construct(s_keys);8) //mortalityAssumptionTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct COIRate'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçäe_(v_construct(s_keys);8) //mortalityAssumptionTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 53904a8b 003f61a0 0 44fa3cd4 0 0 2
PP LP CP COP DisabilityHealthProvisions BenePeriodAccOption(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions BenePeriodAccOptionçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions BenePeriodAccOption';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions BenePeriodAccOption'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 44fa3cd4 003f61a0 0 7ccbcfbc 0 0 2
PP LP CP PremiumRate TableRef JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct PremiumRate TableRef JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct PremiumRate TableRef JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçäe_(v_construct(s_keys);8); //mortalityAssumptionTypeçäe_(v_construct(s_keys);9); //premiumRateTypeçä'key5 lookup'("Table PolicyProduct LifeProduct CoverageProduct PremiumRate TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8);e_(v_construct(s_keys);9);e_(v_construct(s_keys);10)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct PremiumRate TableRef JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçäe_(v_construct(s_keys);8);  //mortalityAssumptionTypeçäe_(v_construct(s_keys);9);  //premiumRateTypeçä'key5 lookup'("Table PolicyProduct LifeProduct CoverageProduct PremiumRate TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8);e_(v_construct(s_keys);9);e_(v_construct(s_keys);10)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 7ccbcfbc 003f61a0 0 1491b7ad 0 0 2
IP IPInfo Fee TableRef(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table InvestProduct InvestProductInfo Fee TableRefçäIF (EXISTS('Table InvestProduct InvestProductInfo Fee TableRef';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2); //productCodeçäe_(v_construct(s_keys);4) //feeTypeçä) ; çä   // then read from the table çäLOOKUPX('Table InvestProduct InvestProductInfo Fee TableRef';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2); //productCodeçä'table effective date'(e_(v_construct(s_keys);3)); //saleEffectiveDateçäe_(v_construct(s_keys);4); //feeTypeçäfield_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 1491b7ad 003f61a0 0 6da6f428 0 0 2
PP LP CP DisabilityHealthProvisions ManagedCareOption(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions ManagedCareOptionçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions ManagedCareOption';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions ManagedCareOption'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 6da6f428 003f61a0 0 5f2724e6 0 0 2
IP Attachment SignatureInfo(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table InvestProduct Attachment SignatureInfoçäIF (EXISTS('Table InvestProduct Attachment SignatureInfo';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2) //signatureCodeçä) ; çä   // then read from the table çä'Table InvestProduct Attachment SignatureInfo'[IP(s_keys;"IInvest_Key");  //IInvest_Keyçäe_(v_construct(s_keys);2) //signatureCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 5f2724e6 003f61a0 0 7ed8c9f5 0 0 2
PP LoanProvision RV(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LoanProvision RateVariationçäIF (EXISTS('Table PolicyProduct LoanProvision RateVariation';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //loanTypeçäe_(v_construct(s_keys);5) //rateVariationCodeçä) ; çä   // then read from the table çä'Table PolicyProduct LoanProvision RateVariation'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //loanTypeçäe_(v_construct(s_keys);5) //rateVariationCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 7ed8c9f5 003f61a0 0 21d0a9d9 0 0 2
PP AdminTransactionProduct QualifiedPlanEntity(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct AdminTransactionProduct QualifiedPlanEntityçäIF (EXISTS('Table PolicyProduct AdminTransactionProduct QualifiedPlanEntity';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4) //transTypeçä) ; çä   // then read from the table çä'Table PolicyProduct AdminTransactionProduct QualifiedPlanEntity'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4) //transTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 21d0a9d9 003f61a0 0 761ede9 0 0 2
CommSchedule(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table CommScheduleçäIF (EXISTS('Table CommSchedule';e_(v_construct(s_keys);0); //carrierCodeçäe_(v_construct(s_keys);1) //commScheduleCodeçä) ; çä   // then read from the table çä'Table CommSchedule'[e_(v_construct(s_keys);0);  //carrierCodeçäe_(v_construct(s_keys);1) //commScheduleCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 761ede9 003f61a0 0 37e78264 0 0 2
PP LP CP TableRef(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct TableRefçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct TableRef';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct TableRef'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 37e78264 003f61a0 0 1e443510 0 0 2
Party Producer CarrierAppointment Fee JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party Producer CarrierAppointment Fee JurisdictionApprovalçäIF (EXISTS('Table Party Producer CarrierAppointment Fee JurisdictionApproval';e_(v_construct(s_keys);0); //partyTypeCodeçäe_(v_construct(s_keys);1); //feeTypeçä'key3 lookup'("Table Party Producer CarrierAppointment Fee JurisdictionApproval";e_(v_construct(s_keys);0);e_(v_construct(s_keys);1);e_(v_construct(s_keys);2)) //jurisdictionçä) ; çä   // then read from the table çä'Table Party Producer CarrierAppointment Fee JurisdictionApproval'[e_(v_construct(s_keys);0);  //partyTypeCodeçäe_(v_construct(s_keys);1);  //feeTypeçä'key3 lookup'("Table Party Producer CarrierAppointment Fee JurisdictionApproval";e_(v_construct(s_keys);0);e_(v_construct(s_keys);1);e_(v_construct(s_keys);2)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 1e443510 003f61a0 0 74e614c5 0 0 2
IP(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table InvestProductçäIF (EXISTS('Table InvestProduct';e_(v_construct(s_keys);0) //productCodeçä) ; çä   // then read from the table çäLOOKUPX('Table InvestProduct';e_(v_construct(s_keys);0); //productCodeçä'table effective date'(e_(v_construct(s_keys);1)); //saleEffectiveDateçäfield_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 74e614c5 003f61a0 0 639dc017 0 0 2
Party Producer CarrierAppointment Attachment AttachmentReference(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party Producer CarrierAppointment Attachment AttachmentReferenceçäIF (EXISTS('Table Party Producer CarrierAppointment Attachment AttachmentReference';e_(v_construct(s_keys);0) //partyTypeCodeçä) ; çä   // then read from the table çä'Table Party Producer CarrierAppointment Attachment AttachmentReference'[e_(v_construct(s_keys);0) //partyTypeCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 639dc017 003f61a0 0 1b714a64 0 0 2
Party Producer License LineOfAuthority(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party Producer License LineOfAuthorityçäIF (EXISTS('Table Party Producer License LineOfAuthority';e_(v_construct(s_keys);0); //partyTypeCodeçäe_(v_construct(s_keys);1) //lineOfAuthorityTypeçä) ; çä   // then read from the table çä'Table Party Producer License LineOfAuthority'[e_(v_construct(s_keys);0);  //partyTypeCodeçäe_(v_construct(s_keys);1) //lineOfAuthorityTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 1b714a64 003f61a0 0 1a36c0aa 0 0 2
PP NonForProvision AllowedSubstandard(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct NonForProvision AllowedSubstandardçäIF (EXISTS('Table PolicyProduct NonForProvision AllowedSubstandard';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //nonFortProvçäe_(v_construct(s_keys);5); //nonForProvisionKeyçäe_(v_construct(s_keys);6) //substandardTypeçä) ; çä   // then read from the table çä'Table PolicyProduct NonForProvision AllowedSubstandard'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //nonFortProvçäe_(v_construct(s_keys);5);  //nonForProvisionKeyçäe_(v_construct(s_keys);6) //substandardTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 1a36c0aa 003f61a0 0 7c30add 0 0 2
PP CMProduct CommOptionAvailable LogicalExpression LogicalCriteria(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct CommissionProduct CommOptionAvailable LogicalExpression LogicalCriteriaçäIF (EXISTS('Table PolicyProduct CommissionProduct CommOptionAvailable LogicalExpression LogicalCriteria';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //commissionAgeCalculationTypeçäe_(v_construct(s_keys);5); //commissionAgePartySelectionçäe_(v_construct(s_keys);6); //participantBasedPartySelectionçäe_(v_construct(s_keys);7); //commOptionçäe_(v_construct(s_keys);8) //operationçä) ; çä   // then read from the table çä'Table PolicyProduct CommissionProduct CommOptionAvailable LogicalExpression LogicalCriteria'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //commissionAgeCalculationTypeçäe_(v_construct(s_keys);5);  //commissionAgePartySelectionçäe_(v_construct(s_keys);6);  //participantBasedPartySelectionçäe_(v_construct(s_keys);7);  //commOptionçäe_(v_construct(s_keys);8) //operationçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 7c30add 003f61a0 0 5ef90311 0 0 2
AllowedDayCC(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table AllowedDayCCçäIF (EXISTS('Table AllowedDayCC';e_(v_construct(s_keys);0) //AllowedDayCC_id_extçä) ; çä   // then read from the table çä'Table AllowedDayCC'[e_(v_construct(s_keys);0) //AllowedDayCC_id_extçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 5ef90311 003f61a0 0 4eb5d92b 0 0 2
BusinessMethodCC(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table BusinessMethodCCçäIF (EXISTS('Table BusinessMethodCC';e_(v_construct(s_keys);0) //BusinessMethodCC_id_extçä) ; çä   // then read from the table çä'Table BusinessMethodCC'[e_(v_construct(s_keys);0) //BusinessMethodCC_id_extçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 4eb5d92b 003f61a0 0 13ff5d59 0 0 2
Party Producer CarrierAppointment ApptCounty(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party Producer CarrierAppointment ApptCountyçäIF (EXISTS('Table Party Producer CarrierAppointment ApptCounty';e_(v_construct(s_keys);0) //partyTypeCodeçä) ; çä   // then read from the table çä'Table Party Producer CarrierAppointment ApptCounty'[e_(v_construct(s_keys);0) //partyTypeCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 13ff5d59 003f61a0 0 286f1963 0 0 2
PP LPExt ArrangementProduct Attachment(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct AttachmentçäIF (EXISTS('Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct Attachment';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4) //arrTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct Attachment'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4) //arrTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 286f1963 003f61a0 0 168c61d 0 0 2
SourceOfFundsCC(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table SourceOfFundsCCçäIF (EXISTS('Table SourceOfFundsCC';e_(v_construct(s_keys);0) //SourceOfFundsCC_id_extçä) ; çä   // then read from the table çä'Table SourceOfFundsCC'[e_(v_construct(s_keys);0) //SourceOfFundsCC_id_extçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 168c61d 003f61a0 0 9a4e9ec 0 0 2
PP LP CP DisabilityHealthProvisions HealthServiceOption(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions HealthServiceOptionçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions HealthServiceOption';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions HealthServiceOption'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 9a4e9ec 003f61a0 0 ea970ab 0 0 2
PP RewardExt TableRef(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct Reward OLifEExtension RewardExtension TableRefçäIF (EXISTS('Table PolicyProduct Reward OLifEExtension RewardExtension TableRef';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4) //rewardResultTypeçä) ; çä   // then read from the table çä'Table PolicyProduct Reward OLifEExtension RewardExtension TableRef'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4) //rewardResultTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 ea970ab 003f61a0 0 67c0468e 0 0 2
Party Producer License Attachment AttachmentReference(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party Producer License Attachment AttachmentReferenceçäIF (EXISTS('Table Party Producer License Attachment AttachmentReference';e_(v_construct(s_keys);0) //partyTypeCodeçä) ; çä   // then read from the table çä'Table Party Producer License Attachment AttachmentReference'[e_(v_construct(s_keys);0) //partyTypeCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 67c0468e 003f61a0 0 516d5719 0 0 2
IP Fee JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table InvestProduct Fee JurisdictionApprovalçäIF (EXISTS('Table InvestProduct Fee JurisdictionApproval';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2); //feeTypeçä'key3 lookup'("Table InvestProduct Fee JurisdictionApproval";IP(s_keys;"IInvest_Key");e_(v_construct(s_keys);2);e_(v_construct(s_keys);3)) //jurisdictionçä) ; çä   // then read from the table çä'Table InvestProduct Fee JurisdictionApproval'[IP(s_keys;"IInvest_Key");  //IInvest_Keyçäe_(v_construct(s_keys);2);  //feeTypeçä'key3 lookup'("Table InvestProduct Fee JurisdictionApproval";IP(s_keys;"IInvest_Key");e_(v_construct(s_keys);2);e_(v_construct(s_keys);3)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 516d5719 003f61a0 0 1348e84d 0 0 2
PP PPInfo CommOptionAvailable LogicalExpression LogicalCriteria EnumeratedValue(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria EnumeratedValueçäIF (EXISTS('Table PolicyProduct PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria EnumeratedValue';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //commOptionçäe_(v_construct(s_keys);5) //operationçä) ; çä   // then read from the table çä'Table PolicyProduct PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria EnumeratedValue'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //commOptionçäe_(v_construct(s_keys);5) //operationçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 1348e84d 003f61a0 0 47e62bbf 0 0 2
DeathBenefitOptCC(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table DeathBenefitOptCCçäIF (EXISTS('Table DeathBenefitOptCC';e_(v_construct(s_keys);0) //DeathBenefitOptCC_id_extçä) ; çä   // then read from the table çä'Table DeathBenefitOptCC'[e_(v_construct(s_keys);0) //DeathBenefitOptCC_id_extçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 47e62bbf 003f61a0 0 7a274d40 0 0 2
PP LP LifeUSAProduct(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct LifeUSAProductçäIF (EXISTS('Table PolicyProduct LifeProduct LifeUSAProduct';PP(s_keys;"Policy_Key") //Policy_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct LifeUSAProduct'[PP(s_keys;"Policy_Key") //Policy_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 7a274d40 003f61a0 0 71a125e 0 0 2
PP LP CP COP DividendRate(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DividendRateçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DividendRate';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key"); //CovOpt_Keyçäe_(v_construct(s_keys);10) //dividendRateTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DividendRate'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key");  //CovOpt_Keyçäe_(v_construct(s_keys);10) //dividendRateTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 71a125e 003f61a0 0 41564968 0 0 2
PP LP CP FeeExt MinBalanceCalcRule(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct Fee OLifEExtension FeeExtension MinBalanceCalcRuleçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct Fee OLifEExtension FeeExtension MinBalanceCalcRule';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçäe_(v_construct(s_keys);8); //feeTypeçäe_(v_construct(s_keys);9); //balanceTypeçäe_(v_construct(s_keys);10) //sequenceNumberçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct Fee OLifEExtension FeeExtension MinBalanceCalcRule'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçäe_(v_construct(s_keys);8);  //feeTypeçäe_(v_construct(s_keys);9);  //balanceTypeçäe_(v_construct(s_keys);10) //sequenceNumberçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 41564968 003f61a0 0 4e993304 0 0 2
Party Producer License Exam(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party Producer License ExamçäIF (EXISTS('Table Party Producer License Exam';e_(v_construct(s_keys);0); //partyTypeCodeçäe_(v_construct(s_keys);1) //examTypeçä) ; çä   // then read from the table çä'Table Party Producer License Exam'[e_(v_construct(s_keys);0);  //partyTypeCodeçäe_(v_construct(s_keys);1) //examTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 4e993304 003f61a0 0 665fd25d 0 0 2
PP LPExt ArrangementProduct ArrangementOptProduct Fee JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct Fee JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct Fee JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //arrTypeçäe_(v_construct(s_keys);5); //feeTypeçä'key4 lookup'("Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct Fee JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4);e_(v_construct(s_keys);5);e_(v_construct(s_keys);6)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct Fee JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //arrTypeçäe_(v_construct(s_keys);5);  //feeTypeçä'key4 lookup'("Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct Fee JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4);e_(v_construct(s_keys);5);e_(v_construct(s_keys);6)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 665fd25d 003f61a0 0 107b2dc5 0 0 2
PP LapseProvision(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LapseProvisionçäIF (EXISTS('Table PolicyProduct LapseProvision';PP(s_keys;"Policy_Key") //Policy_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LapseProvision'[PP(s_keys;"Policy_Key") //Policy_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 107b2dc5 003f61a0 0 16952fcf 0 0 2
PP LPExt ArrangementProduct ArrangementOptProduct FeeExt MinBalanceCalcRule(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct Fee OLifEExtension FeeExtension MinBalanceCalcRuleçäIF (EXISTS('Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct Fee OLifEExtension FeeExtension MinBalanceCalcRule';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //arrTypeçäe_(v_construct(s_keys);5); //feeTypeçäe_(v_construct(s_keys);6); //balanceTypeçäe_(v_construct(s_keys);7) //sequenceNumberçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct Fee OLifEExtension FeeExtension MinBalanceCalcRule'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //arrTypeçäe_(v_construct(s_keys);5);  //feeTypeçäe_(v_construct(s_keys);6);  //balanceTypeçäe_(v_construct(s_keys);7) //sequenceNumberçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 16952fcf 003f61a0 0 1be344cb 0 0 2
PP LP CP DisabilityHealthProvisions ElimPeriodAccOption(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions ElimPeriodAccOptionçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions ElimPeriodAccOption';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions ElimPeriodAccOption'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 1be344cb 003f61a0 0 8fc8bd6 0 0 2
Party Producer License LineOfAuthority Exam(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party Producer License LineOfAuthority ExamçäIF (EXISTS('Table Party Producer License LineOfAuthority Exam';e_(v_construct(s_keys);0); //partyTypeCodeçäe_(v_construct(s_keys);1); //lineOfAuthorityTypeçäe_(v_construct(s_keys);2) //examTypeçä) ; çä   // then read from the table çä'Table Party Producer License LineOfAuthority Exam'[e_(v_construct(s_keys);0);  //partyTypeCodeçäe_(v_construct(s_keys);1);  //lineOfAuthorityTypeçäe_(v_construct(s_keys);2) //examTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 8fc8bd6 003f61a0 0 63cdc8d2 0 0 2
DistributionAgreement PPInfo CommOptionAvailable LogicalExpression LogicalCriteria AxisDef Extension(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table DistributionAgreement PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria AxisDef ExtensionçäIF (EXISTS('Table DistributionAgreement PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria AxisDef Extension';e_(v_construct(s_keys);0); //carrierCodeçäe_(v_construct(s_keys);1); //distributionAgreementCodeçäe_(v_construct(s_keys);2); //commOptionçäe_(v_construct(s_keys);3); //operationçäe_(v_construct(s_keys);4) //axisNameçä) ; çä   // then read from the table çä'Table DistributionAgreement PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria AxisDef Extension'[e_(v_construct(s_keys);0);  //carrierCodeçäe_(v_construct(s_keys);1);  //distributionAgreementCodeçäe_(v_construct(s_keys);2);  //commOptionçäe_(v_construct(s_keys);3);  //operationçäe_(v_construct(s_keys);4) //axisNameçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 63cdc8d2 003f61a0 0 198f5730 0 0 2
Party Producer CarrierAppointment LineOfAuthority Exam(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party Producer CarrierAppointment LineOfAuthority ExamçäIF (EXISTS('Table Party Producer CarrierAppointment LineOfAuthority Exam';e_(v_construct(s_keys);0); //partyTypeCodeçäe_(v_construct(s_keys);1); //lineOfAuthorityTypeçäe_(v_construct(s_keys);2) //examTypeçä) ; çä   // then read from the table çä'Table Party Producer CarrierAppointment LineOfAuthority Exam'[e_(v_construct(s_keys);0);  //partyTypeCodeçäe_(v_construct(s_keys);1);  //lineOfAuthorityTypeçäe_(v_construct(s_keys);2) //examTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 198f5730 003f61a0 0 66c1c711 0 0 2
PP IPInfo JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct InvestProductInfo JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct InvestProductInfo JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP IPInfo'(s_keys;"Invest_Key"); //Invest_Keyçä'key3 lookup'("Table PolicyProduct InvestProductInfo JurisdictionApproval";PP(s_keys;"Policy_Key");'PP IPInfo'(s_keys;"Invest_Key");e_(v_construct(s_keys);6)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct InvestProductInfo JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP IPInfo'(s_keys;"Invest_Key");  //Invest_Keyçä'key3 lookup'("Table PolicyProduct InvestProductInfo JurisdictionApproval";PP(s_keys;"Policy_Key");'PP IPInfo'(s_keys;"Invest_Key");e_(v_construct(s_keys);6)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 66c1c711 003f61a0 0 332c2b7c 0 0 2
IP InvestProductXLat(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table InvestProduct InvestProductXLatçäIF (EXISTS('Table InvestProduct InvestProductXLat';IP(s_keys;"IInvest_Key") //IInvest_Keyçä) ; çä   // then read from the table çä'Table InvestProduct InvestProductXLat'[IP(s_keys;"IInvest_Key") //IInvest_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 332c2b7c 003f61a0 0 135b4365 0 0 2
PP IPInfoExt AllowedArrangementProduct(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct InvestProductInfo OLifEExtension InvestProductInfoExtension AllowedArrangementProductçäIF (EXISTS('Table PolicyProduct InvestProductInfo OLifEExtension InvestProductInfoExtension AllowedArrangementProduct';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP IPInfo'(s_keys;"Invest_Key"); //Invest_Keyçäe_(v_construct(s_keys);6) //arrTypeçä) ; çä   // then read from the table çä'Table PolicyProduct InvestProductInfo OLifEExtension InvestProductInfoExtension AllowedArrangementProduct'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP IPInfo'(s_keys;"Invest_Key");  //Invest_Keyçäe_(v_construct(s_keys);6) //arrTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 135b4365 003f61a0 0 11ab10b7 0 0 2
PP LP CP COPExt TableRef JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension TableRef JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension TableRef JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key"); //CovOpt_Keyçä'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension TableRef JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key");  //CovOpt_Keyçä'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 11ab10b7 003f61a0 0 6620a7d 0 0 2
PP LP CPExt CPFeature AdditionalPaymentProvision Fee TableRef JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension CoverageProductFeature AdditionalPaymentProvision Fee TableRef JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension CoverageProductFeature AdditionalPaymentProvision Fee TableRef JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçäe_(v_construct(s_keys);8); //feeTypeçä'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension CoverageProductFeature AdditionalPaymentProvision Fee TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8);e_(v_construct(s_keys);9)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension CoverageProductFeature AdditionalPaymentProvision Fee TableRef JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçäe_(v_construct(s_keys);8);  //feeTypeçä'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension CoverageProductFeature AdditionalPaymentProvision Fee TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8);e_(v_construct(s_keys);9)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 6620a7d 003f61a0 0 3e9538e4 0 0 2
PP LP CP COP PremiumRate TableRef JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct PremiumRate TableRef JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct PremiumRate TableRef JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key"); //CovOpt_Keyçäe_(v_construct(s_keys);10); //mortalityAssumptionTypeçäe_(v_construct(s_keys);11); //premiumRateTypeçä'key6 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct PremiumRate TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10);e_(v_construct(s_keys);11);e_(v_construct(s_keys);12)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct PremiumRate TableRef JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key");  //CovOpt_Keyçäe_(v_construct(s_keys);10);  //mortalityAssumptionTypeçäe_(v_construct(s_keys);11);  //premiumRateTypeçä'key6 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct PremiumRate TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10);e_(v_construct(s_keys);11);e_(v_construct(s_keys);12)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 3e9538e4 003f61a0 0 d8806ce 0 0 2
DistributionAgreement PPInfo JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table DistributionAgreement PolicyProductInfo JurisdictionApprovalçäIF (EXISTS('Table DistributionAgreement PolicyProductInfo JurisdictionApproval';e_(v_construct(s_keys);0); //carrierCodeçäe_(v_construct(s_keys);1); //distributionAgreementCodeçä'key3 lookup'("Table DistributionAgreement PolicyProductInfo JurisdictionApproval";e_(v_construct(s_keys);0);e_(v_construct(s_keys);1);e_(v_construct(s_keys);2)) //jurisdictionçä) ; çä   // then read from the table çä'Table DistributionAgreement PolicyProductInfo JurisdictionApproval'[e_(v_construct(s_keys);0);  //carrierCodeçäe_(v_construct(s_keys);1);  //distributionAgreementCodeçä'key3 lookup'("Table DistributionAgreement PolicyProductInfo JurisdictionApproval";e_(v_construct(s_keys);0);e_(v_construct(s_keys);1);e_(v_construct(s_keys);2)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 d8806ce 003f61a0 0 67bb9739 0 0 2
PP CMProduct(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct CommissionProductçäIF (EXISTS('Table PolicyProduct CommissionProduct';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //commissionAgeCalculationTypeçäe_(v_construct(s_keys);5); //commissionAgePartySelectionçäe_(v_construct(s_keys);6) //participantBasedPartySelectionçä) ; çä   // then read from the table çä'Table PolicyProduct CommissionProduct'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //commissionAgeCalculationTypeçäe_(v_construct(s_keys);5);  //commissionAgePartySelectionçäe_(v_construct(s_keys);6) //participantBasedPartySelectionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 67bb9739 003f61a0 0 5b29d0d 0 0 2
PP LP CP CashValueRate(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CashValueRateçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CashValueRate';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçäe_(v_construct(s_keys);8) //mortalityAssumptionTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CashValueRate'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçäe_(v_construct(s_keys);8) //mortalityAssumptionTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 5b29d0d 003f61a0 0 7b524073 0 0 2
PP LoanProvision RV RVByVolume(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LoanProvision RateVariation RateVariationByVolumeçäIF (EXISTS('Table PolicyProduct LoanProvision RateVariation RateVariationByVolume';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //loanTypeçäe_(v_construct(s_keys);5) //rateVariationCodeçä) ; çä   // then read from the table çä'Table PolicyProduct LoanProvision RateVariation RateVariationByVolume'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //loanTypeçäe_(v_construct(s_keys);5) //rateVariationCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 7b524073 003f61a0 0 39f138ef 0 0 2
PP LP CP DisabilityHealthProvisions MedProviderOption(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions MedProviderOptionçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions MedProviderOption';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions MedProviderOption'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 39f138ef 003f61a0 0 5541b841 0 0 2
PP PaymentModeMethProduct Fee TableRef JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct PaymentModeMethProduct Fee TableRef JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct PaymentModeMethProduct Fee TableRef JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //paymentModeçäe_(v_construct(s_keys);5); //paymentMethodçäe_(v_construct(s_keys);6); //feeTypeçä'key5 lookup'("Table PolicyProduct PaymentModeMethProduct Fee TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4);e_(v_construct(s_keys);5);e_(v_construct(s_keys);6);e_(v_construct(s_keys);7)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct PaymentModeMethProduct Fee TableRef JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //paymentModeçäe_(v_construct(s_keys);5);  //paymentMethodçäe_(v_construct(s_keys);6);  //feeTypeçä'key5 lookup'("Table PolicyProduct PaymentModeMethProduct Fee TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4);e_(v_construct(s_keys);5);e_(v_construct(s_keys);6);e_(v_construct(s_keys);7)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 5541b841 003f61a0 0 562f19c5 0 0 2
PP LineOfAuthority(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LineOfAuthorityçäIF (EXISTS('Table PolicyProduct LineOfAuthority';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4) //lineOfAuthorityTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LineOfAuthority'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4) //lineOfAuthorityTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 562f19c5 003f61a0 0 30d784ed 0 0 2
PP LPExt ArrangementProduct Attachment AttachmentReference(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct Attachment AttachmentReferenceçäIF (EXISTS('Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct Attachment AttachmentReference';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4) //arrTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct Attachment AttachmentReference'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4) //arrTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 30d784ed 003f61a0 0 274e9e2a 0 0 2
PP LP CPExt LTCDDCalcRules LTCDDBenefitLimits(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension LTCDDCalcRules LTCDDBenefitLimitsçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension LTCDDCalcRules LTCDDBenefitLimits';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension LTCDDCalcRules LTCDDBenefitLimits'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 274e9e2a 003f61a0 0 4c3371ab 0 0 2
IP Attachment(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table InvestProduct AttachmentçäIF (EXISTS('Table InvestProduct Attachment';IP(s_keys;"IInvest_Key") //IInvest_Keyçä) ; çä   // then read from the table çä'Table InvestProduct Attachment'[IP(s_keys;"IInvest_Key") //IInvest_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 4c3371ab 003f61a0 0 9a5094 0 0 2
PP LP CP COP DividendRate TableRef JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DividendRate TableRef JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DividendRate TableRef JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key"); //CovOpt_Keyçäe_(v_construct(s_keys);10); //dividendRateTypeçä'key5 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DividendRate TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10);e_(v_construct(s_keys);11)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DividendRate TableRef JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key");  //CovOpt_Keyçäe_(v_construct(s_keys);10);  //dividendRateTypeçä'key5 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DividendRate TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10);e_(v_construct(s_keys);11)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 9a5094 003f61a0 0 18d84b6e 0 0 2
Party GovtIDInfo(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party GovtIDInfoçäIF (EXISTS('Table Party GovtIDInfo';e_(v_construct(s_keys);0) //partyTypeCodeçä) ; çä   // then read from the table çä'Table Party GovtIDInfo'[e_(v_construct(s_keys);0) //partyTypeCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 18d84b6e 003f61a0 0 7d7345e9 0 0 2
PP LP CP DividendRate TableRef(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct DividendRate TableRefçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct DividendRate TableRef';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçäe_(v_construct(s_keys);8) //dividendRateTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct DividendRate TableRef'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçäe_(v_construct(s_keys);8) //dividendRateTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 7d7345e9 003f61a0 0 7675b2ff 0 0 2
PP Ownership AllowedRelationship(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct Ownership AllowedRelationshipçäIF (EXISTS('Table PolicyProduct Ownership AllowedRelationship';PP(s_keys;"Policy_Key"); //Policy_Keyçä'key2 lookup'("Table PolicyProduct Ownership AllowedRelationship";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4)) //issueGenderçä) ; çä   // then read from the table çä'Table PolicyProduct Ownership AllowedRelationship'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'key2 lookup'("Table PolicyProduct Ownership AllowedRelationship";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4)) //issueGenderçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 7675b2ff 003f61a0 0 49cd92ea 0 0 2
PP LP CP COP Fee TableRef(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct Fee TableRefçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct Fee TableRef';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key"); //CovOpt_Keyçäe_(v_construct(s_keys);10) //feeTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct Fee TableRef'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key");  //CovOpt_Keyçäe_(v_construct(s_keys);10) //feeTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 49cd92ea 003f61a0 0 1e64c1b8 0 0 2
PP LP CP DisabilityHealthProvisions ElimPeriodSickOption(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions ElimPeriodSickOptionçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions ElimPeriodSickOption';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions ElimPeriodSickOption'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 1e64c1b8 003f61a0 0 3643890 0 0 2
PP Ownership JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct Ownership JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct Ownership JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçä'key2 lookup'("Table PolicyProduct Ownership JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4)); //issueGenderçä'key3 lookup'("Table PolicyProduct Ownership JurisdictionApproval";PP(s_keys;"Policy_Key");'key2 lookup'("Table PolicyProduct Ownership JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4));e_(v_construct(s_keys);5)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct Ownership JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'key2 lookup'("Table PolicyProduct Ownership JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4));  //issueGenderçä'key3 lookup'("Table PolicyProduct Ownership JurisdictionApproval";PP(s_keys;"Policy_Key");'key2 lookup'("Table PolicyProduct Ownership JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4));e_(v_construct(s_keys);5)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 3643890 003f61a0 0 1c6e9499 0 0 2
PP LP CP DisabilityHealthProvisions ProviderClassOption(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions ProviderClassOptionçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions ProviderClassOption';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions ProviderClassOption'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 1c6e9499 003f61a0 0 76f82632 0 0 2
PP PPInfo CommissionScheduleKey(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct PolicyProductInfo CommissionScheduleKeyçäIF (EXISTS('Table PolicyProduct PolicyProductInfo CommissionScheduleKey';PP(s_keys;"Policy_Key") //Policy_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct PolicyProductInfo CommissionScheduleKey'[PP(s_keys;"Policy_Key") //Policy_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 76f82632 003f61a0 0 c2b5dcb 0 0 2
PP LP CP DisabilityHealthProvisions BenefitLimitOption(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions BenefitLimitOptionçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions BenefitLimitOption';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions BenefitLimitOption'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 c2b5dcb 003f61a0 0 6521bb50 0 0 2
QualifiedPlanCC(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table QualifiedPlanCCçäIF (EXISTS('Table QualifiedPlanCC';e_(v_construct(s_keys);0) //QualifiedPlanCC_id_extçä) ; çä   // then read from the table çä'Table QualifiedPlanCC'[e_(v_construct(s_keys);0) //QualifiedPlanCC_id_extçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 6521bb50 003f61a0 0 7264c196 0 0 2
Party Producer CarrierAppointment DistributionChannelInfo(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party Producer CarrierAppointment DistributionChannelInfoçäIF (EXISTS('Table Party Producer CarrierAppointment DistributionChannelInfo';e_(v_construct(s_keys);0) //partyTypeCodeçä) ; çä   // then read from the table çä'Table Party Producer CarrierAppointment DistributionChannelInfo'[e_(v_construct(s_keys);0) //partyTypeCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 7264c196 003f61a0 0 2d6ee1ca 0 0 2
PP Fee(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct FeeçäIF (EXISTS('Table PolicyProduct Fee';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4) //feeTypeçä) ; çä   // then read from the table çä'Table PolicyProduct Fee'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4) //feeTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 2d6ee1ca 003f61a0 0 3585392f 0 0 2
PP PPInfo(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct PolicyProductInfoçäIF (EXISTS('Table PolicyProduct PolicyProductInfo';PP(s_keys;"Policy_Key") //Policy_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct PolicyProductInfo'[PP(s_keys;"Policy_Key") //Policy_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 3585392f 003f61a0 0 386cc79c 0 0 2
PP LPExt ArrangementProduct ArrangementOptProduct Attachment(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct AttachmentçäIF (EXISTS('Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct Attachment';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4) //arrTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct Attachment'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4) //arrTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 386cc79c 003f61a0 0 4d07d74e 0 0 2
IP RV TableRef JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table InvestProduct RateVariation TableRef JurisdictionApprovalçäIF (EXISTS('Table InvestProduct RateVariation TableRef JurisdictionApproval';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2); //rateVariationCodeçä'key3 lookup'("Table InvestProduct RateVariation TableRef JurisdictionApproval";IP(s_keys;"IInvest_Key");e_(v_construct(s_keys);2);e_(v_construct(s_keys);3)) //jurisdictionçä) ; çä   // then read from the table çä'Table InvestProduct RateVariation TableRef JurisdictionApproval'[IP(s_keys;"IInvest_Key");  //IInvest_Keyçäe_(v_construct(s_keys);2);  //rateVariationCodeçä'key3 lookup'("Table InvestProduct RateVariation TableRef JurisdictionApproval";IP(s_keys;"IInvest_Key");e_(v_construct(s_keys);2);e_(v_construct(s_keys);3)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 4d07d74e 003f61a0 0 24ca6298 0 0 2
PP LP CP Fee TableRef JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct Fee TableRef JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct Fee TableRef JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçäe_(v_construct(s_keys);8); //feeTypeçä'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct Fee TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8);e_(v_construct(s_keys);9)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct Fee TableRef JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçäe_(v_construct(s_keys);8);  //feeTypeçä'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct Fee TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8);e_(v_construct(s_keys);9)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 24ca6298 003f61a0 0 17843501 0 0 2
PP LP CP COPExt ConflictObjectInfo(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension ConflictObjectInfoçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension ConflictObjectInfo';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension ConflictObjectInfo'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 17843501 003f61a0 0 62e710c1 0 0 2
PP LP CP DividendRate(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct DividendRateçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct DividendRate';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçäe_(v_construct(s_keys);8) //dividendRateTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct DividendRate'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçäe_(v_construct(s_keys);8) //dividendRateTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 62e710c1 003f61a0 0 17d9fbb6 0 0 2
IP OLifEExtension InvestProductExtension TableRef JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table InvestProduct OLifEExtension InvestProductExtension TableRef JurisdictionApprovalçäIF (EXISTS('Table InvestProduct OLifEExtension InvestProductExtension TableRef JurisdictionApproval';IP(s_keys;"IInvest_Key"); //IInvest_Keyçä'key2 lookup'("Table InvestProduct OLifEExtension InvestProductExtension TableRef JurisdictionApproval";IP(s_keys;"IInvest_Key");e_(v_construct(s_keys);2)) //jurisdictionçä) ; çä   // then read from the table çä'Table InvestProduct OLifEExtension InvestProductExtension TableRef JurisdictionApproval'[IP(s_keys;"IInvest_Key");  //IInvest_Keyçä'key2 lookup'("Table InvestProduct OLifEExtension InvestProductExtension TableRef JurisdictionApproval";IP(s_keys;"IInvest_Key");e_(v_construct(s_keys);2)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 17d9fbb6 003f61a0 0 34c3be40 0 0 2
DefLifeInsMethodCC(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table DefLifeInsMethodCCçäIF (EXISTS('Table DefLifeInsMethodCC';e_(v_construct(s_keys);0) //DefLifeInsMethodCC_id_extçä) ; çä   // then read from the table çä'Table DefLifeInsMethodCC'[e_(v_construct(s_keys);0) //DefLifeInsMethodCC_id_extçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 34c3be40 003f61a0 0 58ed6607 0 0 2
Party Producer CarrierAppointment DistributionAgreementInfo(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party Producer CarrierAppointment DistributionAgreementInfoçäIF (EXISTS('Table Party Producer CarrierAppointment DistributionAgreementInfo';e_(v_construct(s_keys);0) //partyTypeCodeçä) ; çä   // then read from the table çä'Table Party Producer CarrierAppointment DistributionAgreementInfo'[e_(v_construct(s_keys);0) //partyTypeCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 58ed6607 003f61a0 0 13238a9f 0 0 2
PP LPExt ArrangementProduct ArrangementOptProduct PaymentModeMethProduct FeeExt MinBalanceCalcRule(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct PaymentModeMethProduct Fee OLifEExtension FeeExtension MinBalanceCalcRuleçäIF (EXISTS('Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct PaymentModeMethProduct Fee OLifEExtension FeeExtension MinBalanceCalcRule';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //arrTypeçäe_(v_construct(s_keys);5); //paymentModeçäe_(v_construct(s_keys);6); //paymentMethodçäe_(v_construct(s_keys);7); //feeTypeçäe_(v_construct(s_keys);8); //balanceTypeçäe_(v_construct(s_keys);9) //sequenceNumberçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct PaymentModeMethProduct Fee OLifEExtension FeeExtension MinBalanceCalcRule'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //arrTypeçäe_(v_construct(s_keys);5);  //paymentModeçäe_(v_construct(s_keys);6);  //paymentMethodçäe_(v_construct(s_keys);7);  //feeTypeçäe_(v_construct(s_keys);8);  //balanceTypeçäe_(v_construct(s_keys);9) //sequenceNumberçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 13238a9f 003f61a0 0 386ef73c 0 0 2
IP IPInfoExt MinBalanceCalcRule(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table InvestProduct InvestProductInfo OLifEExtension InvestProductInfoExtension MinBalanceCalcRuleçäIF (EXISTS('Table InvestProduct InvestProductInfo OLifEExtension InvestProductInfoExtension MinBalanceCalcRule';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2); //productCodeçäe_(v_construct(s_keys);4); //balanceTypeçäe_(v_construct(s_keys);5) //sequenceNumberçä) ; çä   // then read from the table çäLOOKUPX('Table InvestProduct InvestProductInfo OLifEExtension InvestProductInfoExtension MinBalanceCalcRule';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2); //productCodeçä'table effective date'(e_(v_construct(s_keys);3)); //saleEffectiveDateçäe_(v_construct(s_keys);4); //balanceTypeçäe_(v_construct(s_keys);5); //sequenceNumberçäfield_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 386ef73c 003f61a0 0 71ff16e4 0 0 2
PP LP CP COP DisabilityHealthProvisions MannerOfLossOption(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions MannerOfLossOptionçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions MannerOfLossOption';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions MannerOfLossOption'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 71ff16e4 003f61a0 0 374d4f73 0 0 2
PP LPExt ArrangementProduct ArrangementOptProduct QualifiedPlanEntity(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct QualifiedPlanEntityçäIF (EXISTS('Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct QualifiedPlanEntity';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4) //arrTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct QualifiedPlanEntity'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4) //arrTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 374d4f73 003f61a0 0 2758cf3c 0 0 2
PP AdminTransactionProduct(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct AdminTransactionProductçäIF (EXISTS('Table PolicyProduct AdminTransactionProduct';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4) //transTypeçä) ; çä   // then read from the table çä'Table PolicyProduct AdminTransactionProduct'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4) //transTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 2758cf3c 003f61a0 0 5e554e4a 0 0 2
IP IPInfoExt RV TableRef(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table InvestProduct InvestProductInfo OLifEExtension InvestProductInfoExtension RateVariation TableRefçäIF (EXISTS('Table InvestProduct InvestProductInfo OLifEExtension InvestProductInfoExtension RateVariation TableRef';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2); //productCodeçäe_(v_construct(s_keys);4) //rateVariationCodeçä) ; çä   // then read from the table çäLOOKUPX('Table InvestProduct InvestProductInfo OLifEExtension InvestProductInfoExtension RateVariation TableRef';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2); //productCodeçä'table effective date'(e_(v_construct(s_keys);3)); //saleEffectiveDateçäe_(v_construct(s_keys);4); //rateVariationCodeçäfield_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 5e554e4a 003f61a0 0 45f512f5 0 0 2
CommSchedule CommFormula(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table CommSchedule CommFormulaçäIF (EXISTS('Table CommSchedule CommFormula';e_(v_construct(s_keys);0); //carrierCodeçäe_(v_construct(s_keys);1) //commScheduleCodeçä) ; çä   // then read from the table çä'Table CommSchedule CommFormula'[e_(v_construct(s_keys);0);  //carrierCodeçäe_(v_construct(s_keys);1) //commScheduleCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 45f512f5 003f61a0 0 10d61014 0 0 2
BusinessProcessCC(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table BusinessProcessCCçäIF (EXISTS('Table BusinessProcessCC';e_(v_construct(s_keys);0) //BusinessProcessCC_id_extçä) ; çä   // then read from the table çä'Table BusinessProcessCC'[e_(v_construct(s_keys);0) //BusinessProcessCC_id_extçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 10d61014 003f61a0 0 30110ddd 0 0 2
PPExt PaymentAssembly(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct OLifEExtension PolicyProductExtension PaymentAssemblyçäIF (EXISTS('Table PolicyProduct OLifEExtension PolicyProductExtension PaymentAssembly';PP(s_keys;"Policy_Key") //Policy_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct OLifEExtension PolicyProductExtension PaymentAssembly'[PP(s_keys;"Policy_Key") //Policy_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 30110ddd 003f61a0 0 11916936 0 0 2
PP CMProduct CommOptionAvailable LogicalExpression LogicalCriteria AxisDef Extension(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct CommissionProduct CommOptionAvailable LogicalExpression LogicalCriteria AxisDef ExtensionçäIF (EXISTS('Table PolicyProduct CommissionProduct CommOptionAvailable LogicalExpression LogicalCriteria AxisDef Extension';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //commissionAgeCalculationTypeçäe_(v_construct(s_keys);5); //commissionAgePartySelectionçäe_(v_construct(s_keys);6); //participantBasedPartySelectionçäe_(v_construct(s_keys);7); //commOptionçäe_(v_construct(s_keys);8); //operationçäe_(v_construct(s_keys);9) //axisNameçä) ; çä   // then read from the table çä'Table PolicyProduct CommissionProduct CommOptionAvailable LogicalExpression LogicalCriteria AxisDef Extension'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //commissionAgeCalculationTypeçäe_(v_construct(s_keys);5);  //commissionAgePartySelectionçäe_(v_construct(s_keys);6);  //participantBasedPartySelectionçäe_(v_construct(s_keys);7);  //commOptionçäe_(v_construct(s_keys);8);  //operationçäe_(v_construct(s_keys);9) //axisNameçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 11916936 003f61a0 0 5cffd337 0 0 2
PP CMProduct CommOptionAvailable LogicalExpression LogicalCriteria KeyDef(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct CommissionProduct CommOptionAvailable LogicalExpression LogicalCriteria KeyDefçäIF (EXISTS('Table PolicyProduct CommissionProduct CommOptionAvailable LogicalExpression LogicalCriteria KeyDef';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //commissionAgeCalculationTypeçäe_(v_construct(s_keys);5); //commissionAgePartySelectionçäe_(v_construct(s_keys);6); //participantBasedPartySelectionçäe_(v_construct(s_keys);7); //commOptionçäe_(v_construct(s_keys);8); //operationçäe_(v_construct(s_keys);9); //keyTypeçäe_(v_construct(s_keys);10) //keySubTypeçä) ; çä   // then read from the table çä'Table PolicyProduct CommissionProduct CommOptionAvailable LogicalExpression LogicalCriteria KeyDef'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //commissionAgeCalculationTypeçäe_(v_construct(s_keys);5);  //commissionAgePartySelectionçäe_(v_construct(s_keys);6);  //participantBasedPartySelectionçäe_(v_construct(s_keys);7);  //commOptionçäe_(v_construct(s_keys);8);  //operationçäe_(v_construct(s_keys);9);  //keyTypeçäe_(v_construct(s_keys);10) //keySubTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 5cffd337 003f61a0 0 27d9bd0 0 0 2
PP LPExt ArrangementProduct(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProductçäIF (EXISTS('Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4) //arrTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4) //arrTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 27d9bd0 003f61a0 0 1f893998 0 0 2
DistributionAgreement PPInfo CommOptionAvailable LogicalExpression LogicalCriteria KeyDef Extension(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table DistributionAgreement PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria KeyDef ExtensionçäIF (EXISTS('Table DistributionAgreement PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria KeyDef Extension';e_(v_construct(s_keys);0); //carrierCodeçäe_(v_construct(s_keys);1); //distributionAgreementCodeçäe_(v_construct(s_keys);2); //commOptionçäe_(v_construct(s_keys);3); //operationçäe_(v_construct(s_keys);4); //keyTypeçäe_(v_construct(s_keys);5) //keySubTypeçä) ; çä   // then read from the table çä'Table DistributionAgreement PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria KeyDef Extension'[e_(v_construct(s_keys);0);  //carrierCodeçäe_(v_construct(s_keys);1);  //distributionAgreementCodeçäe_(v_construct(s_keys);2);  //commOptionçäe_(v_construct(s_keys);3);  //operationçäe_(v_construct(s_keys);4);  //keyTypeçäe_(v_construct(s_keys);5) //keySubTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 1f893998 003f61a0 0 3c8e5c90 0 0 2
PP PPInfo CommOptionAvailable LogicalExpression LogicalCriteria KeyDef Extension(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria KeyDef ExtensionçäIF (EXISTS('Table PolicyProduct PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria KeyDef Extension';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //commOptionçäe_(v_construct(s_keys);5); //operationçäe_(v_construct(s_keys);6); //keyTypeçäe_(v_construct(s_keys);7) //keySubTypeçä) ; çä   // then read from the table çä'Table PolicyProduct PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria KeyDef Extension'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //commOptionçäe_(v_construct(s_keys);5);  //operationçäe_(v_construct(s_keys);6);  //keyTypeçäe_(v_construct(s_keys);7) //keySubTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 3c8e5c90 003f61a0 0 31e04d13 0 0 2
PP LP CP COP PremiumRate TableRef(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct PremiumRate TableRefçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct PremiumRate TableRef';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key"); //CovOpt_Keyçäe_(v_construct(s_keys);10); //mortalityAssumptionTypeçäe_(v_construct(s_keys);11) //premiumRateTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct PremiumRate TableRef'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key");  //CovOpt_Keyçäe_(v_construct(s_keys);10);  //mortalityAssumptionTypeçäe_(v_construct(s_keys);11) //premiumRateTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 31e04d13 003f61a0 0 4b76c858 0 0 2
PP LP CP COP DisabilityHealthProvisions ElimPeriodSickOption(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions ElimPeriodSickOptionçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions ElimPeriodSickOption';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions ElimPeriodSickOption'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 4b76c858 003f61a0 0 8f29aae 0 0 2
PaymentFormCC(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PaymentFormCCçäIF (EXISTS('Table PaymentFormCC';e_(v_construct(s_keys);0) //PaymentFormCC_id_extçä) ; çä   // then read from the table çä'Table PaymentFormCC'[e_(v_construct(s_keys);0) //PaymentFormCC_id_extçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 8f29aae 003f61a0 0 1307ef8b 0 0 2
PP LP CP CashValueRate TableRef(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CashValueRate TableRefçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CashValueRate TableRef';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçäe_(v_construct(s_keys);8) //mortalityAssumptionTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CashValueRate TableRef'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçäe_(v_construct(s_keys);8) //mortalityAssumptionTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 1307ef8b 003f61a0 0 b09232b 0 0 2
PP LP CP COP UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension AgeAmtProduct(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension AgeAmtProductçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension AgeAmtProduct';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key"); //CovOpt_Keyçä'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension AgeAmtProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10)); //underwritingClassçäe_(v_construct(s_keys);11); //underwritingSubClassçä'key6 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension AgeAmtProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension AgeAmtProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10));e_(v_construct(s_keys);11);e_(v_construct(s_keys);12)); //tobaccoPremiumBasisçä'key7 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension AgeAmtProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension AgeAmtProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10));e_(v_construct(s_keys);11);'key6 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension AgeAmtProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension AgeAmtProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10));e_(v_construct(s_keys);11);e_(v_construct(s_keys);12));e_(v_construct(s_keys);13)) //issueGenderçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension AgeAmtProduct'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key");  //CovOpt_Keyçä'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension AgeAmtProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10));  //underwritingClassçäe_(v_construct(s_keys);11);  //underwritingSubClassçä'key6 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension AgeAmtProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension AgeAmtProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10));e_(v_construct(s_keys);11);e_(v_construct(s_keys);12));  //tobaccoPremiumBasisçä'key7 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension AgeAmtProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension AgeAmtProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10));e_(v_construct(s_keys);11);'key6 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension AgeAmtProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension AgeAmtProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10));e_(v_construct(s_keys);11);e_(v_construct(s_keys);12));e_(v_construct(s_keys);13)) //issueGenderçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 b09232b 003f61a0 0 4b4996a0 0 0 2
IP Fee(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table InvestProduct FeeçäIF (EXISTS('Table InvestProduct Fee';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2) //feeTypeçä) ; çä   // then read from the table çä'Table InvestProduct Fee'[IP(s_keys;"IInvest_Key");  //IInvest_Keyçäe_(v_construct(s_keys);2) //feeTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 4b4996a0 003f61a0 0 7bbb13f0 0 0 2
PP IPInfo QualifiedPlanEntity EntityType(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct InvestProductInfo QualifiedPlanEntity EntityTypeçäIF (EXISTS('Table PolicyProduct InvestProductInfo QualifiedPlanEntity EntityType';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP IPInfo'(s_keys;"Invest_Key") //Invest_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct InvestProductInfo QualifiedPlanEntity EntityType'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP IPInfo'(s_keys;"Invest_Key") //Invest_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 7bbb13f0 003f61a0 0 76558e62 0 0 2
PP LP CP COPExt RV RVByDuration(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension RateVariation RateVariationByDurationçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension RateVariation RateVariationByDuration';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key"); //CovOpt_Keyçäe_(v_construct(s_keys);10) //rateVariationCodeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension RateVariation RateVariationByDuration'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key");  //CovOpt_Keyçäe_(v_construct(s_keys);10) //rateVariationCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 76558e62 003f61a0 0 38674851 0 0 2
PP LPExt ArrangementProduct ArrangementOptProduct PaymentModeMethProduct Fee(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct PaymentModeMethProduct FeeçäIF (EXISTS('Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct PaymentModeMethProduct Fee';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //arrTypeçäe_(v_construct(s_keys);5); //paymentModeçäe_(v_construct(s_keys);6); //paymentMethodçäe_(v_construct(s_keys);7) //feeTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct PaymentModeMethProduct Fee'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //arrTypeçäe_(v_construct(s_keys);5);  //paymentModeçäe_(v_construct(s_keys);6);  //paymentMethodçäe_(v_construct(s_keys);7) //feeTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 38674851 003f61a0 0 481ef519 0 0 2
PP LP CP DisabilityHealthProvisions(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisionsçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 481ef519 003f61a0 0 7b142f20 0 0 2
PP IPInfo QualifiedPlanEntity Market(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct InvestProductInfo QualifiedPlanEntity MarketçäIF (EXISTS('Table PolicyProduct InvestProductInfo QualifiedPlanEntity Market';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP IPInfo'(s_keys;"Invest_Key"); //Invest_Keyçäe_(v_construct(s_keys);6) //marketTypeçä) ; çä   // then read from the table çä'Table PolicyProduct InvestProductInfo QualifiedPlanEntity Market'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP IPInfo'(s_keys;"Invest_Key");  //Invest_Keyçäe_(v_construct(s_keys);6) //marketTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 7b142f20 003f61a0 0 7cd439e4 0 0 2
Party Organization(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party OrganizationçäIF (EXISTS('Table Party Organization';e_(v_construct(s_keys);0) //partyTypeCodeçä) ; çä   // then read from the table çä'Table Party Organization'[e_(v_construct(s_keys);0) //partyTypeCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 7cd439e4 003f61a0 0 7b318fee 0 0 2
PP LPExt ArrangementProduct JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //arrTypeçä'key3 lookup'("Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4);e_(v_construct(s_keys);5)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //arrTypeçä'key3 lookup'("Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4);e_(v_construct(s_keys);5)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 7b318fee 003f61a0 0 5f904532 0 0 2
Party Producer Registration(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party Producer RegistrationçäIF (EXISTS('Table Party Producer Registration';e_(v_construct(s_keys);0) //partyTypeCodeçä) ; çä   // then read from the table çä'Table Party Producer Registration'[e_(v_construct(s_keys);0) //partyTypeCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 5f904532 003f61a0 0 4e55daae 0 0 2
PP LP CP COPExt RequisiteObjectInfo(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension RequisiteObjectInfoçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension RequisiteObjectInfo';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension RequisiteObjectInfo'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 4e55daae 003f61a0 0 a218d13 0 0 2
Party Attachment SignatureInfo(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party Attachment SignatureInfoçäIF (EXISTS('Table Party Attachment SignatureInfo';e_(v_construct(s_keys);0); //partyTypeCodeçäe_(v_construct(s_keys);1) //signatureCodeçä) ; çä   // then read from the table çä'Table Party Attachment SignatureInfo'[e_(v_construct(s_keys);0);  //partyTypeCodeçäe_(v_construct(s_keys);1) //signatureCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 a218d13 003f61a0 0 24322d1 0 0 2
IP IPInfo QualifiedPlanEntity Market(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table InvestProduct InvestProductInfo QualifiedPlanEntity MarketçäIF (EXISTS('Table InvestProduct InvestProductInfo QualifiedPlanEntity Market';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2); //productCodeçäe_(v_construct(s_keys);4) //marketTypeçä) ; çä   // then read from the table çäLOOKUPX('Table InvestProduct InvestProductInfo QualifiedPlanEntity Market';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2); //productCodeçä'table effective date'(e_(v_construct(s_keys);3)); //saleEffectiveDateçäe_(v_construct(s_keys);4); //marketTypeçäfield_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 24322d1 003f61a0 0 3a8a3f76 0 0 2
PP LPExt ArrangementProduct ArrangementOptProduct AllocTypeProduct AmountProduct EnumeratedValue(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct AllocTypeProduct AmountProduct EnumeratedValueçäIF (EXISTS('Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct AllocTypeProduct AmountProduct EnumeratedValue';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4) //arrTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct AllocTypeProduct AmountProduct EnumeratedValue'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4) //arrTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 3a8a3f76 003f61a0 0 40387ecd 0 0 2
PP LP CP COP DisabilityHealthProvisions ProviderClassOption(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions ProviderClassOptionçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions ProviderClassOption';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions ProviderClassOption'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 40387ecd 003f61a0 0 5a452984 0 0 2
PP LPExt ArrangementProduct ArrangementOptProduct Fee TableRef(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct Fee TableRefçäIF (EXISTS('Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct Fee TableRef';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //arrTypeçäe_(v_construct(s_keys);5) //feeTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct Fee TableRef'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //arrTypeçäe_(v_construct(s_keys);5) //feeTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 5a452984 003f61a0 0 4773c13e 0 0 2
ValidPremOptCC(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table ValidPremOptCCçäIF (EXISTS('Table ValidPremOptCC';e_(v_construct(s_keys);0) //ValidPremOptCC_id_extçä) ; çä   // then read from the table çä'Table ValidPremOptCC'[e_(v_construct(s_keys);0) //ValidPremOptCC_id_extçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 4773c13e 003f61a0 0 49ef4a56 0 0 2
IP RV TableRef(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table InvestProduct RateVariation TableRefçäIF (EXISTS('Table InvestProduct RateVariation TableRef';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2) //rateVariationCodeçä) ; çä   // then read from the table çä'Table InvestProduct RateVariation TableRef'[IP(s_keys;"IInvest_Key");  //IInvest_Keyçäe_(v_construct(s_keys);2) //rateVariationCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 49ef4a56 003f61a0 0 16512d47 0 0 2
PP LP CPExt AgeAmtProduct(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension AgeAmtProductçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension AgeAmtProduct';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension AgeAmtProduct'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 16512d47 003f61a0 0 1fe8e019 0 0 2
Party Producer(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party ProducerçäIF (EXISTS('Table Party Producer';e_(v_construct(s_keys);0) //partyTypeCodeçä) ; çä   // then read from the table çä'Table Party Producer'[e_(v_construct(s_keys);0) //partyTypeCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 1fe8e019 003f61a0 0 740d1151 0 0 2
PP LPExt ArrangementProduct ArrangementOptProduct DestIP(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct DestInvestProductçäIF (EXISTS('Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct DestInvestProduct';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4) //arrTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct DestInvestProduct'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4) //arrTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 740d1151 003f61a0 0 56b7e156 0 0 2
PP Dividend TableRef(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct Dividend TableRefçäIF (EXISTS('Table PolicyProduct Dividend TableRef';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //divTypeçäe_(v_construct(s_keys);5) //divOYTOptTypeçä) ; çä   // then read from the table çä'Table PolicyProduct Dividend TableRef'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //divTypeçäe_(v_construct(s_keys);5) //divOYTOptTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 56b7e156 003f61a0 0 158957dc 0 0 2
PP LP CP COPExt RV TableRef(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension RateVariation TableRefçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension RateVariation TableRef';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key"); //CovOpt_Keyçäe_(v_construct(s_keys);10) //rateVariationCodeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension RateVariation TableRef'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key");  //CovOpt_Keyçäe_(v_construct(s_keys);10) //rateVariationCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 158957dc 003f61a0 0 6fcf54d4 0 0 2
IP Attachment AttachmentReference(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table InvestProduct Attachment AttachmentReferenceçäIF (EXISTS('Table InvestProduct Attachment AttachmentReference';IP(s_keys;"IInvest_Key") //IInvest_Keyçä) ; çä   // then read from the table çä'Table InvestProduct Attachment AttachmentReference'[IP(s_keys;"IInvest_Key") //IInvest_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 6fcf54d4 003f61a0 0 3990df7b 0 0 2
DistributionAgreement PPInfo CommOptionAvailable LogicalExpression LogicalCriteria AxisDef EnumeratedValue(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table DistributionAgreement PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria AxisDef EnumeratedValueçäIF (EXISTS('Table DistributionAgreement PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria AxisDef EnumeratedValue';e_(v_construct(s_keys);0); //carrierCodeçäe_(v_construct(s_keys);1); //distributionAgreementCodeçäe_(v_construct(s_keys);2); //commOptionçäe_(v_construct(s_keys);3); //operationçäe_(v_construct(s_keys);4) //axisNameçä) ; çä   // then read from the table çä'Table DistributionAgreement PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria AxisDef EnumeratedValue'[e_(v_construct(s_keys);0);  //carrierCodeçäe_(v_construct(s_keys);1);  //distributionAgreementCodeçäe_(v_construct(s_keys);2);  //commOptionçäe_(v_construct(s_keys);3);  //operationçäe_(v_construct(s_keys);4) //axisNameçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 3990df7b 003f61a0 0 198d3b7f 0 0 2
PP NonForProvision(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct NonForProvisionçäIF (EXISTS('Table PolicyProduct NonForProvision';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4) //nonFortProvçä) ; çä   // then read from the table çä'Table PolicyProduct NonForProvision'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4) //nonFortProvçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 198d3b7f 003f61a0 0 73a56cfc 0 0 2
Party(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PartyçäIF (EXISTS('Table Party';e_(v_construct(s_keys);0) //partyTypeCodeçä) ; çä   // then read from the table çä'Table Party'[e_(v_construct(s_keys);0) //partyTypeCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 73a56cfc 003f61a0 0 10d40991 0 0 2
PP LPExt ArrangementProduct ArrangementOptProduct PaymentModeMethProduct Fee TableRef(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct PaymentModeMethProduct Fee TableRefçäIF (EXISTS('Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct PaymentModeMethProduct Fee TableRef';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //arrTypeçäe_(v_construct(s_keys);5); //paymentModeçäe_(v_construct(s_keys);6); //paymentMethodçäe_(v_construct(s_keys);7) //feeTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct PaymentModeMethProduct Fee TableRef'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //arrTypeçäe_(v_construct(s_keys);5);  //paymentModeçäe_(v_construct(s_keys);6);  //paymentMethodçäe_(v_construct(s_keys);7) //feeTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 10d40991 003f61a0 0 272c385d 0 0 2
Party Producer ProducerAgreement(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party Producer ProducerAgreementçäIF (EXISTS('Table Party Producer ProducerAgreement';e_(v_construct(s_keys);0) //partyTypeCodeçä) ; çä   // then read from the table çä'Table Party Producer ProducerAgreement'[e_(v_construct(s_keys);0) //partyTypeCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 272c385d 003f61a0 0 52c86669 0 0 2
PP LP LifeUSAProduct IRSPremCalcMethod(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct LifeUSAProduct IRSPremCalcMethodçäIF (EXISTS('Table PolicyProduct LifeProduct LifeUSAProduct IRSPremCalcMethod';PP(s_keys;"Policy_Key") //Policy_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct LifeUSAProduct IRSPremCalcMethod'[PP(s_keys;"Policy_Key") //Policy_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 52c86669 003f61a0 0 3d9a5703 0 0 2
PP LP CPExt CPFeature(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension CoverageProductFeatureçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension CoverageProductFeature';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension CoverageProductFeature'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 3d9a5703 003f61a0 0 745bcce7 0 0 2
IP RV(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table InvestProduct RateVariationçäIF (EXISTS('Table InvestProduct RateVariation';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2) //rateVariationCodeçä) ; çä   // then read from the table çä'Table InvestProduct RateVariation'[IP(s_keys;"IInvest_Key");  //IInvest_Keyçäe_(v_construct(s_keys);2) //rateVariationCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 745bcce7 003f61a0 0 4ddd14fc 0 0 2
PP LP CP DisabilityHealthProvisions BenePeriodSickOption(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions BenePeriodSickOptionçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions BenePeriodSickOption';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions BenePeriodSickOption'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 4ddd14fc 003f61a0 0 5bb694ed 0 0 2
PP(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProductçäIF (EXISTS('Table PolicyProduct';e_(v_construct(s_keys);0); //carrierCodeçäe_(v_construct(s_keys);1); //productCodeçäe_(v_construct(s_keys);2) //productVersionCodeçä) ; çä   // then read from the table çäLOOKUPX('Table PolicyProduct';e_(v_construct(s_keys);0); //carrierCodeçäe_(v_construct(s_keys);1); //productCodeçäe_(v_construct(s_keys);2); //productVersionCodeçä'table effective date'(e_(v_construct(s_keys);3)); //saleEffectiveDateçäfield_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 5bb694ed 003f61a0 0 1f30e1bc 0 0 2
PP LPExt ArrangementProduct Attachment SignatureInfo(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct Attachment SignatureInfoçäIF (EXISTS('Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct Attachment SignatureInfo';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //arrTypeçäe_(v_construct(s_keys);5) //signatureCodeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct Attachment SignatureInfo'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //arrTypeçäe_(v_construct(s_keys);5) //signatureCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 1f30e1bc 003f61a0 0 fb0ae63 0 0 2
Party PartyXLat(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party PartyXLatçäIF (EXISTS('Table Party PartyXLat';e_(v_construct(s_keys);0) //partyTypeCodeçä) ; çä   // then read from the table çä'Table Party PartyXLat'[e_(v_construct(s_keys);0) //partyTypeCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 fb0ae63 003f61a0 0 366dc5f8 0 0 2
PP Fee TableRef JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct Fee TableRef JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct Fee TableRef JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //feeTypeçä'key3 lookup'("Table PolicyProduct Fee TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4);e_(v_construct(s_keys);5)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct Fee TableRef JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //feeTypeçä'key3 lookup'("Table PolicyProduct Fee TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4);e_(v_construct(s_keys);5)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 366dc5f8 003f61a0 0 43aabe5e 0 0 2
Party Attachment AttachmentReference(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party Attachment AttachmentReferenceçäIF (EXISTS('Table Party Attachment AttachmentReference';e_(v_construct(s_keys);0) //partyTypeCodeçä) ; çä   // then read from the table çä'Table Party Attachment AttachmentReference'[e_(v_construct(s_keys);0) //partyTypeCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 43aabe5e 003f61a0 0 5fe5debb 0 0 2
PP IPInfoExt MinBalanceCalcRule(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct InvestProductInfo OLifEExtension InvestProductInfoExtension MinBalanceCalcRuleçäIF (EXISTS('Table PolicyProduct InvestProductInfo OLifEExtension InvestProductInfoExtension MinBalanceCalcRule';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP IPInfo'(s_keys;"Invest_Key"); //Invest_Keyçäe_(v_construct(s_keys);6); //balanceTypeçäe_(v_construct(s_keys);7) //sequenceNumberçä) ; çä   // then read from the table çä'Table PolicyProduct InvestProductInfo OLifEExtension InvestProductInfoExtension MinBalanceCalcRule'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP IPInfo'(s_keys;"Invest_Key");  //Invest_Keyçäe_(v_construct(s_keys);6);  //balanceTypeçäe_(v_construct(s_keys);7) //sequenceNumberçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 5fe5debb 003f61a0 0 4a7838c3 0 0 2
PP Ownership QualifiedPlanEntity(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct Ownership QualifiedPlanEntityçäIF (EXISTS('Table PolicyProduct Ownership QualifiedPlanEntity';PP(s_keys;"Policy_Key"); //Policy_Keyçä'key2 lookup'("Table PolicyProduct Ownership QualifiedPlanEntity";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4)) //issueGenderçä) ; çä   // then read from the table çä'Table PolicyProduct Ownership QualifiedPlanEntity'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'key2 lookup'("Table PolicyProduct Ownership QualifiedPlanEntity";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4)) //issueGenderçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 4a7838c3 003f61a0 0 2ed231da 0 0 2
PP LP CP COP DisabilityHealthProvisions ElimPeriodAccOption(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions ElimPeriodAccOptionçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions ElimPeriodAccOption';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions ElimPeriodAccOption'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 2ed231da 003f61a0 0 7cd6ded6 0 0 2
PP LP CP COP JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key"); //CovOpt_Keyçä'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key");  //CovOpt_Keyçä'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 7cd6ded6 003f61a0 0 2fc9e042 0 0 2
PP LP CP COP DisabilityHealthProvisions OccupClassOption(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions OccupClassOptionçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions OccupClassOption';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions OccupClassOption'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 2fc9e042 003f61a0 0 4a9c8f6 0 0 2
PP LP CP COP DisabilityHealthProvisions BenefitLimitOption(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions BenefitLimitOptionçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions BenefitLimitOption';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions BenefitLimitOption'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 4a9c8f6 003f61a0 0 6ad4a0c7 0 0 2
PPExt PolicyComponentNonForRule(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct OLifEExtension PolicyProductExtension PolicyComponentNonForRuleçäIF (EXISTS('Table PolicyProduct OLifEExtension PolicyProductExtension PolicyComponentNonForRule';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4) //divTypeçä) ; çä   // then read from the table çä'Table PolicyProduct OLifEExtension PolicyProductExtension PolicyComponentNonForRule'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4) //divTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 6ad4a0c7 003f61a0 0 35bd5387 0 0 2
PP LP CP DisabilityHealthProvisions OccupClassOption(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions OccupClassOptionçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions OccupClassOption';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions OccupClassOption'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 35bd5387 003f61a0 0 171f1432 0 0 2
DistributionAgreement PPInfo CommOptionAvailable LogicalExpression LogicalCriteria EnumeratedValue(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table DistributionAgreement PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria EnumeratedValueçäIF (EXISTS('Table DistributionAgreement PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria EnumeratedValue';e_(v_construct(s_keys);0); //carrierCodeçäe_(v_construct(s_keys);1); //distributionAgreementCodeçäe_(v_construct(s_keys);2); //commOptionçäe_(v_construct(s_keys);3) //operationçä) ; çä   // then read from the table çä'Table DistributionAgreement PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria EnumeratedValue'[e_(v_construct(s_keys);0);  //carrierCodeçäe_(v_construct(s_keys);1);  //distributionAgreementCodeçäe_(v_construct(s_keys);2);  //commOptionçäe_(v_construct(s_keys);3) //operationçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 171f1432 003f61a0 0 6bf4ac26 0 0 2
PP IPInfo FeeExt MinBalanceCalcRule(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct InvestProductInfo Fee OLifEExtension FeeExtension MinBalanceCalcRuleçäIF (EXISTS('Table PolicyProduct InvestProductInfo Fee OLifEExtension FeeExtension MinBalanceCalcRule';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP IPInfo'(s_keys;"Invest_Key"); //Invest_Keyçäe_(v_construct(s_keys);6); //feeTypeçäe_(v_construct(s_keys);7); //balanceTypeçäe_(v_construct(s_keys);8) //sequenceNumberçä) ; çä   // then read from the table çä'Table PolicyProduct InvestProductInfo Fee OLifEExtension FeeExtension MinBalanceCalcRule'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP IPInfo'(s_keys;"Invest_Key");  //Invest_Keyçäe_(v_construct(s_keys);6);  //feeTypeçäe_(v_construct(s_keys);7);  //balanceTypeçäe_(v_construct(s_keys);8) //sequenceNumberçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 6bf4ac26 003f61a0 0 36d14571 0 0 2
PolicyStatusCC(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyStatusCCçäIF (EXISTS('Table PolicyStatusCC';e_(v_construct(s_keys);0) //PolicyStatusCC_id_extçä) ; çä   // then read from the table çä'Table PolicyStatusCC'[e_(v_construct(s_keys);0) //PolicyStatusCC_id_extçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 36d14571 003f61a0 0 90cc3fe 0 0 2
IP IPInfo Fee(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table InvestProduct InvestProductInfo FeeçäIF (EXISTS('Table InvestProduct InvestProductInfo Fee';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2); //productCodeçäe_(v_construct(s_keys);4) //feeTypeçä) ; çä   // then read from the table çäLOOKUPX('Table InvestProduct InvestProductInfo Fee';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2); //productCodeçä'table effective date'(e_(v_construct(s_keys);3)); //saleEffectiveDateçäe_(v_construct(s_keys);4); //feeTypeçäfield_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 90cc3fe 003f61a0 0 70bb3af6 0 0 2
PP LP CP COP COIRate TableRef(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct COIRate TableRefçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct COIRate TableRef';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key"); //CovOpt_Keyçäe_(v_construct(s_keys);10) //mortalityAssumptionTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct COIRate TableRef'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key");  //CovOpt_Keyçäe_(v_construct(s_keys);10) //mortalityAssumptionTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 70bb3af6 003f61a0 0 48e7bfef 0 0 2
PP LP CP COP DisabilityHealthProvisions ManagedCareOption(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions ManagedCareOptionçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions ManagedCareOption';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions ManagedCareOption'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 48e7bfef 003f61a0 0 13073141 0 0 2
Party Address(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party AddressçäIF (EXISTS('Table Party Address';e_(v_construct(s_keys);0) //partyTypeCodeçä) ; çä   // then read from the table çä'Table Party Address'[e_(v_construct(s_keys);0) //partyTypeCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 13073141 003f61a0 0 400c6693 0 0 2
IP IPInfo InvestProductInfoXLat(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table InvestProduct InvestProductInfo InvestProductInfoXLatçäIF (EXISTS('Table InvestProduct InvestProductInfo InvestProductInfoXLat';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2) //productCodeçä) ; çä   // then read from the table çäLOOKUPX('Table InvestProduct InvestProductInfo InvestProductInfoXLat';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2); //productCodeçä'table effective date'(e_(v_construct(s_keys);3)); //saleEffectiveDateçäfield_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 400c6693 003f61a0 0 310cd30 0 0 2
PP PaymentModeMethProduct(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct PaymentModeMethProductçäIF (EXISTS('Table PolicyProduct PaymentModeMethProduct';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //paymentModeçäe_(v_construct(s_keys);5) //paymentMethodçä) ; çä   // then read from the table çä'Table PolicyProduct PaymentModeMethProduct'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //paymentModeçäe_(v_construct(s_keys);5) //paymentMethodçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 310cd30 003f61a0 0 31a27dfb 0 0 2
IP IPInfo QualifiedPlanEntity EntityType(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table InvestProduct InvestProductInfo QualifiedPlanEntity EntityTypeçäIF (EXISTS('Table InvestProduct InvestProductInfo QualifiedPlanEntity EntityType';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2) //productCodeçä) ; çä   // then read from the table çäLOOKUPX('Table InvestProduct InvestProductInfo QualifiedPlanEntity EntityType';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2); //productCodeçä'table effective date'(e_(v_construct(s_keys);3)); //saleEffectiveDateçäfield_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 31a27dfb 003f61a0 0 59b60fb8 0 0 2
IssueGenderCC(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table IssueGenderCCçäIF (EXISTS('Table IssueGenderCC';e_(v_construct(s_keys);0) //IssueGenderCC_id_extçä) ; çä   // then read from the table çä'Table IssueGenderCC'[e_(v_construct(s_keys);0) //IssueGenderCC_id_extçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 59b60fb8 003f61a0 0 989ced7 0 0 2
PP LP CPExt CPFeature AdditionalPaymentProvision Fee JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension CoverageProductFeature AdditionalPaymentProvision Fee JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension CoverageProductFeature AdditionalPaymentProvision Fee JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçäe_(v_construct(s_keys);8); //feeTypeçä'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension CoverageProductFeature AdditionalPaymentProvision Fee JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8);e_(v_construct(s_keys);9)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension CoverageProductFeature AdditionalPaymentProvision Fee JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçäe_(v_construct(s_keys);8);  //feeTypeçä'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension CoverageProductFeature AdditionalPaymentProvision Fee JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8);e_(v_construct(s_keys);9)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 989ced7 003f61a0 0 28939911 0 0 2
PP LP CP COP DisabilityHealthProvisions HealthServiceOption(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions HealthServiceOptionçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions HealthServiceOption';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions HealthServiceOption'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 28939911 003f61a0 0 3efb06a4 0 0 2
PP LPExt ArrangementProduct ArrangementOptProduct Attachment SignatureInfo(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct Attachment SignatureInfoçäIF (EXISTS('Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct Attachment SignatureInfo';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //arrTypeçäe_(v_construct(s_keys);5) //signatureCodeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct Attachment SignatureInfo'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //arrTypeçäe_(v_construct(s_keys);5) //signatureCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 3efb06a4 003f61a0 0 817bc00 0 0 2
PP LP CP COP UnderwritingClassProduct(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProductçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key"); //CovOpt_Keyçä'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10)); //underwritingClassçäe_(v_construct(s_keys);11); //underwritingSubClassçä'key6 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10));e_(v_construct(s_keys);11);e_(v_construct(s_keys);12)); //tobaccoPremiumBasisçä'key7 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10));e_(v_construct(s_keys);11);'key6 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10));e_(v_construct(s_keys);11);e_(v_construct(s_keys);12));e_(v_construct(s_keys);13)) //issueGenderçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key");  //CovOpt_Keyçä'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10));  //underwritingClassçäe_(v_construct(s_keys);11);  //underwritingSubClassçä'key6 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10));e_(v_construct(s_keys);11);e_(v_construct(s_keys);12));  //tobaccoPremiumBasisçä'key7 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10));e_(v_construct(s_keys);11);'key6 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10));e_(v_construct(s_keys);11);e_(v_construct(s_keys);12));e_(v_construct(s_keys);13)) //issueGenderçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 817bc00 003f61a0 0 4b58e531 0 0 2
PolicyIssueTypeCC(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyIssueTypeCCçäIF (EXISTS('Table PolicyIssueTypeCC';e_(v_construct(s_keys);0) //PolicyIssueTypeCC_id_extçä) ; çä   // then read from the table çä'Table PolicyIssueTypeCC'[e_(v_construct(s_keys);0) //PolicyIssueTypeCC_id_extçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 4b58e531 003f61a0 0 40841fea 0 0 2
PP LP CP UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8)); //underwritingClassçäe_(v_construct(s_keys);9); //underwritingSubClassçä'key5 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8));e_(v_construct(s_keys);9);e_(v_construct(s_keys);10)); //tobaccoPremiumBasisçä'key6 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8));e_(v_construct(s_keys);9);'key5 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8));e_(v_construct(s_keys);9);e_(v_construct(s_keys);10));e_(v_construct(s_keys);11)); //issueGenderçä'key7 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8));e_(v_construct(s_keys);9);'key5 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8));e_(v_construct(s_keys);9);e_(v_construct(s_keys);10));'key6 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8));e_(v_construct(s_keys);9);'key5 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8));e_(v_construct(s_keys);9);e_(v_construct(s_keys);10));e_(v_construct(s_keys);11));e_(v_construct(s_keys);12)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8));  //underwritingClassçäe_(v_construct(s_keys);9);  //underwritingSubClassçä'key5 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8));e_(v_construct(s_keys);9);e_(v_construct(s_keys);10));  //tobaccoPremiumBasisçä'key6 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8));e_(v_construct(s_keys);9);'key5 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8));e_(v_construct(s_keys);9);e_(v_construct(s_keys);10));e_(v_construct(s_keys);11));  //issueGenderçä'key7 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8));e_(v_construct(s_keys);9);'key5 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8));e_(v_construct(s_keys);9);e_(v_construct(s_keys);10));'key6 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8));e_(v_construct(s_keys);9);'key5 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8));e_(v_construct(s_keys);9);e_(v_construct(s_keys);10));e_(v_construct(s_keys);11));e_(v_construct(s_keys);12)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 40841fea 003f61a0 0 4227b1dc 0 0 2
AuthorizationEntityCC(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table AuthorizationEntityCCçäIF (EXISTS('Table AuthorizationEntityCC';e_(v_construct(s_keys);0) //AuthorizationEntityCC_id_extçä) ; çä   // then read from the table çä'Table AuthorizationEntityCC'[e_(v_construct(s_keys);0) //AuthorizationEntityCC_id_extçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 4227b1dc 003f61a0 0 39bf2140 0 0 2
PP LPExt ArrangementProduct ArrangementOptProduct SourceIP RateVariationKey(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct SourceInvestProduct RateVariationKeyçäIF (EXISTS('Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct SourceInvestProduct RateVariationKey';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //arrTypeçäe_(v_construct(s_keys);5); //arrTypeçäe_(v_construct(s_keys);6) //productCodeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct SourceInvestProduct RateVariationKey'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //arrTypeçäe_(v_construct(s_keys);5);  //arrTypeçäe_(v_construct(s_keys);6) //productCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 39bf2140 003f61a0 0 3c5abaa2 0 0 2
PP IPInfo Fee TableRef(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct InvestProductInfo Fee TableRefçäIF (EXISTS('Table PolicyProduct InvestProductInfo Fee TableRef';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP IPInfo'(s_keys;"Invest_Key"); //Invest_Keyçäe_(v_construct(s_keys);6) //feeTypeçä) ; çä   // then read from the table çä'Table PolicyProduct InvestProductInfo Fee TableRef'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP IPInfo'(s_keys;"Invest_Key");  //Invest_Keyçäe_(v_construct(s_keys);6) //feeTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 3c5abaa2 003f61a0 0 52cfaf8c 0 0 2
Party Attachment(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party AttachmentçäIF (EXISTS('Table Party Attachment';e_(v_construct(s_keys);0) //partyTypeCodeçä) ; çä   // then read from the table çä'Table Party Attachment'[e_(v_construct(s_keys);0) //partyTypeCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 52cfaf8c 003f61a0 0 24f64a50 0 0 2
IP IPInfo(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table InvestProduct InvestProductInfoçäIF (EXISTS('Table InvestProduct InvestProductInfo';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2) //productCodeçä) ; çä   // then read from the table çäLOOKUPX('Table InvestProduct InvestProductInfo';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2); //productCodeçä'table effective date'(e_(v_construct(s_keys);3)); //saleEffectiveDateçäfield_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 24f64a50 003f61a0 0 51925456 0 0 2
PP LP CP COPExt LTCDDCalcRules(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension LTCDDCalcRulesçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension LTCDDCalcRules';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension LTCDDCalcRules'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 51925456 003f61a0 0 42ac0b80 0 0 2
PP Fee JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct Fee JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct Fee JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //feeTypeçä'key3 lookup'("Table PolicyProduct Fee JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4);e_(v_construct(s_keys);5)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct Fee JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //feeTypeçä'key3 lookup'("Table PolicyProduct Fee JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4);e_(v_construct(s_keys);5)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 42ac0b80 003f61a0 0 30aa6972 0 0 2
Party Producer CarrierAppointment FeeExt MinBalanceCalcRule(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party Producer CarrierAppointment Fee OLifEExtension FeeExtension MinBalanceCalcRuleçäIF (EXISTS('Table Party Producer CarrierAppointment Fee OLifEExtension FeeExtension MinBalanceCalcRule';e_(v_construct(s_keys);0); //partyTypeCodeçäe_(v_construct(s_keys);1); //feeTypeçäe_(v_construct(s_keys);2); //balanceTypeçäe_(v_construct(s_keys);3) //sequenceNumberçä) ; çä   // then read from the table çä'Table Party Producer CarrierAppointment Fee OLifEExtension FeeExtension MinBalanceCalcRule'[e_(v_construct(s_keys);0);  //partyTypeCodeçäe_(v_construct(s_keys);1);  //feeTypeçäe_(v_construct(s_keys);2);  //balanceTypeçäe_(v_construct(s_keys);3) //sequenceNumberçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 30aa6972 003f61a0 0 4d66a935 0 0 2
PP LoanProvision RV TableRef(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LoanProvision RateVariation TableRefçäIF (EXISTS('Table PolicyProduct LoanProvision RateVariation TableRef';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //loanTypeçäe_(v_construct(s_keys);5) //rateVariationCodeçä) ; çä   // then read from the table çä'Table PolicyProduct LoanProvision RateVariation TableRef'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //loanTypeçäe_(v_construct(s_keys);5) //rateVariationCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 4d66a935 003f61a0 0 722b2bd 0 0 2
PP LP CPExt ParticipantProduct(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension ParticipantProductçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension ParticipantProduct';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension ParticipantProduct'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 722b2bd 003f61a0 0 97f88b5 0 0 2
PP LoanProvision RV RVByDuration(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LoanProvision RateVariation RateVariationByDurationçäIF (EXISTS('Table PolicyProduct LoanProvision RateVariation RateVariationByDuration';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //loanTypeçäe_(v_construct(s_keys);5) //rateVariationCodeçä) ; çä   // then read from the table çä'Table PolicyProduct LoanProvision RateVariation RateVariationByDuration'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //loanTypeçäe_(v_construct(s_keys);5) //rateVariationCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 97f88b5 003f61a0 0 4c6dab49 0 0 2
PP LoanProvision OLifEExtension LoanProvisionExtension TableRef JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LoanProvision OLifEExtension LoanProvisionExtension TableRef JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct LoanProvision OLifEExtension LoanProvisionExtension TableRef JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //loanTypeçä'key3 lookup'("Table PolicyProduct LoanProvision OLifEExtension LoanProvisionExtension TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4);e_(v_construct(s_keys);5)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct LoanProvision OLifEExtension LoanProvisionExtension TableRef JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //loanTypeçä'key3 lookup'("Table PolicyProduct LoanProvision OLifEExtension LoanProvisionExtension TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4);e_(v_construct(s_keys);5)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 4c6dab49 003f61a0 0 34b615d8 0 0 2
PP LP CP CoverageProductXLat(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CoverageProductXLatçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CoverageProductXLat';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CoverageProductXLat'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 34b615d8 003f61a0 0 4184ccbb 0 0 2
PP PPInfo CommOptionAvailable LogicalExpression LogicalCriteria AxisDef EnumeratedValue(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria AxisDef EnumeratedValueçäIF (EXISTS('Table PolicyProduct PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria AxisDef EnumeratedValue';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //commOptionçäe_(v_construct(s_keys);5); //operationçäe_(v_construct(s_keys);6) //axisNameçä) ; çä   // then read from the table çä'Table PolicyProduct PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria AxisDef EnumeratedValue'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //commOptionçäe_(v_construct(s_keys);5);  //operationçäe_(v_construct(s_keys);6) //axisNameçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 4184ccbb 003f61a0 0 121ad858 0 0 2
PP AdminTransactionProduct QualifiedPlanEntity Market(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct AdminTransactionProduct QualifiedPlanEntity MarketçäIF (EXISTS('Table PolicyProduct AdminTransactionProduct QualifiedPlanEntity Market';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //transTypeçäe_(v_construct(s_keys);5) //marketTypeçä) ; çä   // then read from the table çä'Table PolicyProduct AdminTransactionProduct QualifiedPlanEntity Market'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //transTypeçäe_(v_construct(s_keys);5) //marketTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 121ad858 003f61a0 0 72336144 0 0 2
PP CMProduct CommOptionAvailable LogicalExpression LogicalCriteria AxisDef(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct CommissionProduct CommOptionAvailable LogicalExpression LogicalCriteria AxisDefçäIF (EXISTS('Table PolicyProduct CommissionProduct CommOptionAvailable LogicalExpression LogicalCriteria AxisDef';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //commissionAgeCalculationTypeçäe_(v_construct(s_keys);5); //commissionAgePartySelectionçäe_(v_construct(s_keys);6); //participantBasedPartySelectionçäe_(v_construct(s_keys);7); //commOptionçäe_(v_construct(s_keys);8); //operationçäe_(v_construct(s_keys);9) //axisNameçä) ; çä   // then read from the table çä'Table PolicyProduct CommissionProduct CommOptionAvailable LogicalExpression LogicalCriteria AxisDef'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //commissionAgeCalculationTypeçäe_(v_construct(s_keys);5);  //commissionAgePartySelectionçäe_(v_construct(s_keys);6);  //participantBasedPartySelectionçäe_(v_construct(s_keys);7);  //commOptionçäe_(v_construct(s_keys);8);  //operationçäe_(v_construct(s_keys);9) //axisNameçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 72336144 003f61a0 0 721bf055 0 0 2
PP IPInfo(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct InvestProductInfoçäIF (EXISTS('Table PolicyProduct InvestProductInfo';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4) //productCodeçä) ; çä   // then read from the table çäLOOKUPX('Table PolicyProduct InvestProductInfo';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //productCodeçä'table effective date'(e_(v_construct(s_keys);5)); //saleEffectiveDateçäfield_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 721bf055 003f61a0 0 3d33bbcc 0 0 2
PP LP CP UnderwritingClassProduct(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProductçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8)); //underwritingClassçäe_(v_construct(s_keys);9); //underwritingSubClassçä'key5 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8));e_(v_construct(s_keys);9);e_(v_construct(s_keys);10)); //tobaccoPremiumBasisçä'key6 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8));e_(v_construct(s_keys);9);'key5 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8));e_(v_construct(s_keys);9);e_(v_construct(s_keys);10));e_(v_construct(s_keys);11)) //issueGenderçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8));  //underwritingClassçäe_(v_construct(s_keys);9);  //underwritingSubClassçä'key5 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8));e_(v_construct(s_keys);9);e_(v_construct(s_keys);10));  //tobaccoPremiumBasisçä'key6 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8));e_(v_construct(s_keys);9);'key5 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8));e_(v_construct(s_keys);9);e_(v_construct(s_keys);10));e_(v_construct(s_keys);11)) //issueGenderçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 3d33bbcc 003f61a0 0 6ca3abcd 0 0 2
IP IPInfo Fee TableRef JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table InvestProduct InvestProductInfo Fee TableRef JurisdictionApprovalçäIF (EXISTS('Table InvestProduct InvestProductInfo Fee TableRef JurisdictionApproval';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2); //productCodeçäe_(v_construct(s_keys);4); //feeTypeçä'key5 lookup'("Table InvestProduct InvestProductInfo Fee TableRef JurisdictionApproval";IP(s_keys;"IInvest_Key");e_(v_construct(s_keys);2);'table effective date'(e_(v_construct(s_keys);3));e_(v_construct(s_keys);4);e_(v_construct(s_keys);5)) //jurisdictionçä) ; çä   // then read from the table çäLOOKUPX('Table InvestProduct InvestProductInfo Fee TableRef JurisdictionApproval';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2); //productCodeçä'table effective date'(e_(v_construct(s_keys);3)); //saleEffectiveDateçäe_(v_construct(s_keys);4); //feeTypeçä'key5 lookup'("Table InvestProduct InvestProductInfo Fee TableRef JurisdictionApproval";IP(s_keys;"IInvest_Key");e_(v_construct(s_keys);2);'table effective date'(e_(v_construct(s_keys);3));e_(v_construct(s_keys);4);e_(v_construct(s_keys);5)); //jurisdictionçäfield_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 6ca3abcd 003f61a0 0 15b7465d 0 0 2
DistributionAgreement PPInfo CommOptionAvailable LogicalExpression LogicalCriteria AxisDef(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table DistributionAgreement PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria AxisDefçäIF (EXISTS('Table DistributionAgreement PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria AxisDef';e_(v_construct(s_keys);0); //carrierCodeçäe_(v_construct(s_keys);1); //distributionAgreementCodeçäe_(v_construct(s_keys);2); //commOptionçäe_(v_construct(s_keys);3); //operationçäe_(v_construct(s_keys);4) //axisNameçä) ; çä   // then read from the table çä'Table DistributionAgreement PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria AxisDef'[e_(v_construct(s_keys);0);  //carrierCodeçäe_(v_construct(s_keys);1);  //distributionAgreementCodeçäe_(v_construct(s_keys);2);  //commOptionçäe_(v_construct(s_keys);3);  //operationçäe_(v_construct(s_keys);4) //axisNameçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 15b7465d 003f61a0 0 62796241 0 0 2
DistributionAgreement PPInfo CommissionScheduleKey(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table DistributionAgreement PolicyProductInfo CommissionScheduleKeyçäIF (EXISTS('Table DistributionAgreement PolicyProductInfo CommissionScheduleKey';e_(v_construct(s_keys);0); //carrierCodeçäe_(v_construct(s_keys);1) //distributionAgreementCodeçä) ; çä   // then read from the table çä'Table DistributionAgreement PolicyProductInfo CommissionScheduleKey'[e_(v_construct(s_keys);0);  //carrierCodeçäe_(v_construct(s_keys);1) //distributionAgreementCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 62796241 003f61a0 0 3c01e32e 0 0 2
PP FreelookInvestRuleProduct InvestRuleProduct(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct FreelookInvestRuleProduct InvestRuleProductçäIF (EXISTS('Table PolicyProduct FreelookInvestRuleProduct InvestRuleProduct';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //investRuleProductçäe_(v_construct(s_keys);5) //investRuleçä) ; çä   // then read from the table çä'Table PolicyProduct FreelookInvestRuleProduct InvestRuleProduct'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //investRuleProductçäe_(v_construct(s_keys);5) //investRuleçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 3c01e32e 003f61a0 0 dffac7f 0 0 2
PP LP CP PremiumRate TableRef(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct PremiumRate TableRefçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct PremiumRate TableRef';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçäe_(v_construct(s_keys);8); //mortalityAssumptionTypeçäe_(v_construct(s_keys);9) //premiumRateTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct PremiumRate TableRef'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçäe_(v_construct(s_keys);8);  //mortalityAssumptionTypeçäe_(v_construct(s_keys);9) //premiumRateTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 dffac7f 003f61a0 0 54dd36a0 0 0 2
PP LP CPExt CPFeature AdditionalPaymentProvision(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension CoverageProductFeature AdditionalPaymentProvisionçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension CoverageProductFeature AdditionalPaymentProvision';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension CoverageProductFeature AdditionalPaymentProvision'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 54dd36a0 003f61a0 0 708d2bc6 0 0 2
DistributionAgreement PPInfo CommOptionAvailable LogicalExpression(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table DistributionAgreement PolicyProductInfo CommOptionAvailable LogicalExpressionçäIF (EXISTS('Table DistributionAgreement PolicyProductInfo CommOptionAvailable LogicalExpression';e_(v_construct(s_keys);0); //carrierCodeçäe_(v_construct(s_keys);1); //distributionAgreementCodeçäe_(v_construct(s_keys);2) //commOptionçä) ; çä   // then read from the table çä'Table DistributionAgreement PolicyProductInfo CommOptionAvailable LogicalExpression'[e_(v_construct(s_keys);0);  //carrierCodeçäe_(v_construct(s_keys);1);  //distributionAgreementCodeçäe_(v_construct(s_keys);2) //commOptionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 708d2bc6 003f61a0 0 43c71487 0 0 2
PP LP CP DisabilityHealthProvisions ConditionTypeOption(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions ConditionTypeOptionçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions ConditionTypeOption';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct DisabilityHealthProvisions ConditionTypeOption'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 43c71487 003f61a0 0 4cbc8d0f 0 0 2
CommSchedule CommFormula TableRef(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table CommSchedule CommFormula TableRefçäIF (EXISTS('Table CommSchedule CommFormula TableRef';e_(v_construct(s_keys);0); //carrierCodeçäe_(v_construct(s_keys);1) //commScheduleCodeçä) ; çä   // then read from the table çä'Table CommSchedule CommFormula TableRef'[e_(v_construct(s_keys);0);  //carrierCodeçäe_(v_construct(s_keys);1) //commScheduleCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 4cbc8d0f 003f61a0 0 64b905b8 0 0 2
PP LP CP COP PremiumRate(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct PremiumRateçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct PremiumRate';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key"); //CovOpt_Keyçäe_(v_construct(s_keys);10); //mortalityAssumptionTypeçäe_(v_construct(s_keys);11) //premiumRateTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct PremiumRate'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key");  //CovOpt_Keyçäe_(v_construct(s_keys);10);  //mortalityAssumptionTypeçäe_(v_construct(s_keys);11) //premiumRateTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 64b905b8 003f61a0 0 12cbb736 0 0 2
PP CMProduct CommOptionAvailable LogicalExpression LogicalCriteria AxisDef EnumeratedValue(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct CommissionProduct CommOptionAvailable LogicalExpression LogicalCriteria AxisDef EnumeratedValueçäIF (EXISTS('Table PolicyProduct CommissionProduct CommOptionAvailable LogicalExpression LogicalCriteria AxisDef EnumeratedValue';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //commissionAgeCalculationTypeçäe_(v_construct(s_keys);5); //commissionAgePartySelectionçäe_(v_construct(s_keys);6); //participantBasedPartySelectionçäe_(v_construct(s_keys);7); //commOptionçäe_(v_construct(s_keys);8); //operationçäe_(v_construct(s_keys);9) //axisNameçä) ; çä   // then read from the table çä'Table PolicyProduct CommissionProduct CommOptionAvailable LogicalExpression LogicalCriteria AxisDef EnumeratedValue'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //commissionAgeCalculationTypeçäe_(v_construct(s_keys);5);  //commissionAgePartySelectionçäe_(v_construct(s_keys);6);  //participantBasedPartySelectionçäe_(v_construct(s_keys);7);  //commOptionçäe_(v_construct(s_keys);8);  //operationçäe_(v_construct(s_keys);9) //axisNameçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 12cbb736 003f61a0 0 751d286b 0 0 2
IP Fee TableRef JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table InvestProduct Fee TableRef JurisdictionApprovalçäIF (EXISTS('Table InvestProduct Fee TableRef JurisdictionApproval';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2); //feeTypeçä'key3 lookup'("Table InvestProduct Fee TableRef JurisdictionApproval";IP(s_keys;"IInvest_Key");e_(v_construct(s_keys);2);e_(v_construct(s_keys);3)) //jurisdictionçä) ; çä   // then read from the table çä'Table InvestProduct Fee TableRef JurisdictionApproval'[IP(s_keys;"IInvest_Key");  //IInvest_Keyçäe_(v_construct(s_keys);2);  //feeTypeçä'key3 lookup'("Table InvestProduct Fee TableRef JurisdictionApproval";IP(s_keys;"IInvest_Key");e_(v_construct(s_keys);2);e_(v_construct(s_keys);3)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 751d286b 003f61a0 0 652dd1f9 0 0 2
DistributionAgreement(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table DistributionAgreementçäIF (EXISTS('Table DistributionAgreement';e_(v_construct(s_keys);0); //carrierCodeçäe_(v_construct(s_keys);1) //distributionAgreementCodeçä) ; çä   // then read from the table çä'Table DistributionAgreement'[e_(v_construct(s_keys);0);  //carrierCodeçäe_(v_construct(s_keys);1) //distributionAgreementCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 652dd1f9 003f61a0 0 53bcf270 0 0 2
PP CMProduct CommOptionAvailable LogicalExpression(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct CommissionProduct CommOptionAvailable LogicalExpressionçäIF (EXISTS('Table PolicyProduct CommissionProduct CommOptionAvailable LogicalExpression';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //commissionAgeCalculationTypeçäe_(v_construct(s_keys);5); //commissionAgePartySelectionçäe_(v_construct(s_keys);6); //participantBasedPartySelectionçäe_(v_construct(s_keys);7) //commOptionçä) ; çä   // then read from the table çä'Table PolicyProduct CommissionProduct CommOptionAvailable LogicalExpression'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //commissionAgeCalculationTypeçäe_(v_construct(s_keys);5);  //commissionAgePartySelectionçäe_(v_construct(s_keys);6);  //participantBasedPartySelectionçäe_(v_construct(s_keys);7) //commOptionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 53bcf270 003f61a0 0 6ab1b0bb 0 0 2
Party Producer License(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party Producer LicenseçäIF (EXISTS('Table Party Producer License';e_(v_construct(s_keys);0) //partyTypeCodeçä) ; çä   // then read from the table çä'Table Party Producer License'[e_(v_construct(s_keys);0) //partyTypeCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 6ab1b0bb 003f61a0 0 7d3a3639 0 0 2
PP LP CP COP DisabilityHealthProvisions(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisionsçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 7d3a3639 003f61a0 0 56cef448 0 0 2
Party Producer CarrierAppointment(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party Producer CarrierAppointmentçäIF (EXISTS('Table Party Producer CarrierAppointment';e_(v_construct(s_keys);0) //partyTypeCodeçä) ; çä   // then read from the table çä'Table Party Producer CarrierAppointment'[e_(v_construct(s_keys);0) //partyTypeCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 56cef448 003f61a0 0 38d0ab58 0 0 2
PP PolicyProductXLat(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct PolicyProductXLatçäIF (EXISTS('Table PolicyProduct PolicyProductXLat';PP(s_keys;"Policy_Key") //Policy_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct PolicyProductXLat'[PP(s_keys;"Policy_Key") //Policy_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 38d0ab58 003f61a0 0 2a62db83 0 0 2
PP LP CP COPExt LTCDDCalcRules LTCDDBenefitLimits(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension LTCDDCalcRules LTCDDBenefitLimitsçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension LTCDDCalcRules LTCDDBenefitLimits';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension LTCDDCalcRules LTCDDBenefitLimits'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 2a62db83 003f61a0 0 2e666fc 0 0 2
PP PPInfo CommOptionAvailable LogicalExpression LogicalCriteria AxisDef(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria AxisDefçäIF (EXISTS('Table PolicyProduct PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria AxisDef';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //commOptionçäe_(v_construct(s_keys);5); //operationçäe_(v_construct(s_keys);6) //axisNameçä) ; çä   // then read from the table çä'Table PolicyProduct PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria AxisDef'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //commOptionçäe_(v_construct(s_keys);5);  //operationçäe_(v_construct(s_keys);6) //axisNameçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 2e666fc 003f61a0 0 7bc3e093 0 0 2
PP IPInfo Fee(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct InvestProductInfo FeeçäIF (EXISTS('Table PolicyProduct InvestProductInfo Fee';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP IPInfo'(s_keys;"Invest_Key"); //Invest_Keyçäe_(v_construct(s_keys);6) //feeTypeçä) ; çä   // then read from the table çä'Table PolicyProduct InvestProductInfo Fee'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP IPInfo'(s_keys;"Invest_Key");  //Invest_Keyçäe_(v_construct(s_keys);6) //feeTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 7bc3e093 003f61a0 0 47fcce10 0 0 2
PP IPInfoExt RV RVByVolume(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct InvestProductInfo OLifEExtension InvestProductInfoExtension RateVariation RateVariationByVolumeçäIF (EXISTS('Table PolicyProduct InvestProductInfo OLifEExtension InvestProductInfoExtension RateVariation RateVariationByVolume';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP IPInfo'(s_keys;"Invest_Key"); //Invest_Keyçäe_(v_construct(s_keys);6) //rateVariationCodeçä) ; çä   // then read from the table çä'Table PolicyProduct InvestProductInfo OLifEExtension InvestProductInfoExtension RateVariation RateVariationByVolume'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP IPInfo'(s_keys;"Invest_Key");  //Invest_Keyçäe_(v_construct(s_keys);6) //rateVariationCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 47fcce10 003f61a0 0 2b25445 0 0 2
PP IPInfo Fee TableRef JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct InvestProductInfo Fee TableRef JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct InvestProductInfo Fee TableRef JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP IPInfo'(s_keys;"Invest_Key"); //Invest_Keyçäe_(v_construct(s_keys);6); //feeTypeçä'key4 lookup'("Table PolicyProduct InvestProductInfo Fee TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");'PP IPInfo'(s_keys;"Invest_Key");e_(v_construct(s_keys);6);e_(v_construct(s_keys);7)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct InvestProductInfo Fee TableRef JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP IPInfo'(s_keys;"Invest_Key");  //Invest_Keyçäe_(v_construct(s_keys);6);  //feeTypeçä'key4 lookup'("Table PolicyProduct InvestProductInfo Fee TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");'PP IPInfo'(s_keys;"Invest_Key");e_(v_construct(s_keys);6);e_(v_construct(s_keys);7)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 2b25445 003f61a0 0 65cf84ef 0 0 2
DistributionAgreement BusinessProcessAllowed(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table DistributionAgreement BusinessProcessAllowedçäIF (EXISTS('Table DistributionAgreement BusinessProcessAllowed';e_(v_construct(s_keys);0); //carrierCodeçäe_(v_construct(s_keys);1); //distributionAgreementCodeçäe_(v_construct(s_keys);2) //administrativeTransactionçä) ; çä   // then read from the table çä'Table DistributionAgreement BusinessProcessAllowed'[e_(v_construct(s_keys);0);  //carrierCodeçäe_(v_construct(s_keys);1);  //distributionAgreementCodeçäe_(v_construct(s_keys);2) //administrativeTransactionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 65cf84ef 003f61a0 0 6124cd97 0 0 2
PP RewardExt TableRef JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct Reward OLifEExtension RewardExtension TableRef JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct Reward OLifEExtension RewardExtension TableRef JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //rewardResultTypeçä'key3 lookup'("Table PolicyProduct Reward OLifEExtension RewardExtension TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4);e_(v_construct(s_keys);5)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct Reward OLifEExtension RewardExtension TableRef JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //rewardResultTypeçä'key3 lookup'("Table PolicyProduct Reward OLifEExtension RewardExtension TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4);e_(v_construct(s_keys);5)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 6124cd97 003f61a0 0 76e049da 0 0 2
PP LP CP Fee(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct FeeçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct Fee';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçäe_(v_construct(s_keys);8) //feeTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct Fee'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçäe_(v_construct(s_keys);8) //feeTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 76e049da 003f61a0 0 332dea64 0 0 2
PP LP CP COP UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key"); //CovOpt_Keyçä'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10)); //underwritingClassçäe_(v_construct(s_keys);11); //underwritingSubClassçä'key6 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10));e_(v_construct(s_keys);11);e_(v_construct(s_keys);12)); //tobaccoPremiumBasisçä'key7 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10));e_(v_construct(s_keys);11);'key6 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10));e_(v_construct(s_keys);11);e_(v_construct(s_keys);12));e_(v_construct(s_keys);13)); //issueGenderçä'key8 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10));e_(v_construct(s_keys);11);'key6 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10));e_(v_construct(s_keys);11);e_(v_construct(s_keys);12));'key7 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10));e_(v_construct(s_keys);11);'key6 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10));e_(v_construct(s_keys);11);e_(v_construct(s_keys);12));e_(v_construct(s_keys);13));e_(v_construct(s_keys);14)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key");  //CovOpt_Keyçä'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10));  //underwritingClassçäe_(v_construct(s_keys);11);  //underwritingSubClassçä'key6 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10));e_(v_construct(s_keys);11);e_(v_construct(s_keys);12));  //tobaccoPremiumBasisçä'key7 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10));e_(v_construct(s_keys);11);'key6 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10));e_(v_construct(s_keys);11);e_(v_construct(s_keys);12));e_(v_construct(s_keys);13));  //issueGenderçä'key8 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10));e_(v_construct(s_keys);11);'key6 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10));e_(v_construct(s_keys);11);e_(v_construct(s_keys);12));'key7 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10));e_(v_construct(s_keys);11);'key6 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct UnderwritingClassProduct OLifEExtension UnderwritingClassProductExtension JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10));e_(v_construct(s_keys);11);e_(v_construct(s_keys);12));e_(v_construct(s_keys);13));e_(v_construct(s_keys);14)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 332dea64 003f61a0 0 5bfe6744 0 0 2
PP LP CP COP DisabilityHealthProvisions DeductionOption(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions DeductionOptionçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions DeductionOption';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions DeductionOption'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 5bfe6744 003f61a0 0 5336325c 0 0 2
PP Authorization(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct AuthorizationçäIF (EXISTS('Table PolicyProduct Authorization';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4) //authorizationKeyçä) ; çä   // then read from the table çä'Table PolicyProduct Authorization'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4) //authorizationKeyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 5336325c 003f61a0 0 69757a10 0 0 2
PP LP CP COP COIRate TableRef JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct COIRate TableRef JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct COIRate TableRef JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key"); //CovOpt_Keyçäe_(v_construct(s_keys);10); //mortalityAssumptionTypeçä'key5 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct COIRate TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10);e_(v_construct(s_keys);11)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct COIRate TableRef JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key");  //CovOpt_Keyçäe_(v_construct(s_keys);10);  //mortalityAssumptionTypeçä'key5 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct COIRate TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10);e_(v_construct(s_keys);11)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 69757a10 003f61a0 0 34f4c89b 0 0 2
PP PPInfo CommOptionAvailable LogicalExpression LogicalCriteria(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteriaçäIF (EXISTS('Table PolicyProduct PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //commOptionçäe_(v_construct(s_keys);5) //operationçä) ; çä   // then read from the table çä'Table PolicyProduct PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //commOptionçäe_(v_construct(s_keys);5) //operationçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 34f4c89b 003f61a0 0 5575a997 0 0 2
PP IPInfo Fee JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct InvestProductInfo Fee JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct InvestProductInfo Fee JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP IPInfo'(s_keys;"Invest_Key"); //Invest_Keyçäe_(v_construct(s_keys);6); //feeTypeçä'key4 lookup'("Table PolicyProduct InvestProductInfo Fee JurisdictionApproval";PP(s_keys;"Policy_Key");'PP IPInfo'(s_keys;"Invest_Key");e_(v_construct(s_keys);6);e_(v_construct(s_keys);7)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct InvestProductInfo Fee JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP IPInfo'(s_keys;"Invest_Key");  //Invest_Keyçäe_(v_construct(s_keys);6);  //feeTypeçä'key4 lookup'("Table PolicyProduct InvestProductInfo Fee JurisdictionApproval";PP(s_keys;"Policy_Key");'PP IPInfo'(s_keys;"Invest_Key");e_(v_construct(s_keys);6);e_(v_construct(s_keys);7)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 5575a997 003f61a0 0 51be944 0 0 2
PP LP CPExt CPFeature RecalcProvision(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension CoverageProductFeature RecalcProvisionçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension CoverageProductFeature RecalcProvision';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension CoverageProductFeature RecalcProvision'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key") //Coverage_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 51be944 003f61a0 0 73b92d18 0 0 2
Party Organization SitusInfo(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party Organization SitusInfoçäIF (EXISTS('Table Party Organization SitusInfo';e_(v_construct(s_keys);0) //partyTypeCodeçä) ; çä   // then read from the table çä'Table Party Organization SitusInfo'[e_(v_construct(s_keys);0) //partyTypeCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 73b92d18 003f61a0 0 1934fc17 0 0 2
PP LP CP Fee TableRef(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct Fee TableRefçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct Fee TableRef';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçäe_(v_construct(s_keys);8) //feeTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct Fee TableRef'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçäe_(v_construct(s_keys);8) //feeTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 1934fc17 003f61a0 0 1863eb7f 0 0 2
PP LPExt ArrangementProduct ArrangementOptProduct AllocTypeProduct(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct AllocTypeProductçäIF (EXISTS('Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct AllocTypeProduct';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4) //arrTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct AllocTypeProduct'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4) //arrTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 1863eb7f 003f61a0 0 377c97da 0 0 2
IP FeeExt MinBalanceCalcRule(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table InvestProduct Fee OLifEExtension FeeExtension MinBalanceCalcRuleçäIF (EXISTS('Table InvestProduct Fee OLifEExtension FeeExtension MinBalanceCalcRule';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2); //feeTypeçäe_(v_construct(s_keys);3); //balanceTypeçäe_(v_construct(s_keys);4) //sequenceNumberçä) ; çä   // then read from the table çä'Table InvestProduct Fee OLifEExtension FeeExtension MinBalanceCalcRule'[IP(s_keys;"IInvest_Key");  //IInvest_Keyçäe_(v_construct(s_keys);2);  //feeTypeçäe_(v_construct(s_keys);3);  //balanceTypeçäe_(v_construct(s_keys);4) //sequenceNumberçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 377c97da 003f61a0 0 1a0945ca 0 0 2
IP IPInfoExt RV RVByVolume(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table InvestProduct InvestProductInfo OLifEExtension InvestProductInfoExtension RateVariation RateVariationByVolumeçäIF (EXISTS('Table InvestProduct InvestProductInfo OLifEExtension InvestProductInfoExtension RateVariation RateVariationByVolume';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2); //productCodeçäe_(v_construct(s_keys);4) //rateVariationCodeçä) ; çä   // then read from the table çäLOOKUPX('Table InvestProduct InvestProductInfo OLifEExtension InvestProductInfoExtension RateVariation RateVariationByVolume';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2); //productCodeçä'table effective date'(e_(v_construct(s_keys);3)); //saleEffectiveDateçäe_(v_construct(s_keys);4); //rateVariationCodeçäfield_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 1a0945ca 003f61a0 0 6b582443 0 0 2
PP LP CP Fee JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct Fee JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct Fee JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçäe_(v_construct(s_keys);8); //feeTypeçä'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct Fee JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8);e_(v_construct(s_keys);9)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct Fee JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçäe_(v_construct(s_keys);8);  //feeTypeçä'key4 lookup'("Table PolicyProduct LifeProduct CoverageProduct Fee JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8);e_(v_construct(s_keys);9)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 6b582443 003f61a0 0 e9def1f 0 0 2
PP LineOfAuthority Exam(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LineOfAuthority ExamçäIF (EXISTS('Table PolicyProduct LineOfAuthority Exam';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //lineOfAuthorityTypeçäe_(v_construct(s_keys);5) //examTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LineOfAuthority Exam'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //lineOfAuthorityTypeçäe_(v_construct(s_keys);5) //examTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 e9def1f 003f61a0 0 76cd569f 0 0 2
PP Authorization AuthorizationTransaction(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct Authorization AuthorizationTransactionçäIF (EXISTS('Table PolicyProduct Authorization AuthorizationTransaction';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //authorizationKeyçäe_(v_construct(s_keys);5) //administrativeTransactionçä) ; çä   // then read from the table çä'Table PolicyProduct Authorization AuthorizationTransaction'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //authorizationKeyçäe_(v_construct(s_keys);5) //administrativeTransactionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 76cd569f 003f61a0 0 167845df 0 0 2
DistributionAgreement PPInfo CommOptionAvailable LogicalExpression LogicalCriteria KeyDef(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table DistributionAgreement PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria KeyDefçäIF (EXISTS('Table DistributionAgreement PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria KeyDef';e_(v_construct(s_keys);0); //carrierCodeçäe_(v_construct(s_keys);1); //distributionAgreementCodeçäe_(v_construct(s_keys);2); //commOptionçäe_(v_construct(s_keys);3); //operationçäe_(v_construct(s_keys);4); //keyTypeçäe_(v_construct(s_keys);5) //keySubTypeçä) ; çä   // then read from the table çä'Table DistributionAgreement PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria KeyDef'[e_(v_construct(s_keys);0);  //carrierCodeçäe_(v_construct(s_keys);1);  //distributionAgreementCodeçäe_(v_construct(s_keys);2);  //commOptionçäe_(v_construct(s_keys);3);  //operationçäe_(v_construct(s_keys);4);  //keyTypeçäe_(v_construct(s_keys);5) //keySubTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 167845df 003f61a0 0 3633d62d 0 0 2
PaymentSourceCC(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PaymentSourceCCçäIF (EXISTS('Table PaymentSourceCC';e_(v_construct(s_keys);0) //PaymentSourceCC_id_extçä) ; çä   // then read from the table çä'Table PaymentSourceCC'[e_(v_construct(s_keys);0) //PaymentSourceCC_id_extçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 3633d62d 003f61a0 0 48f89439 0 0 2
Party Carrier(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party CarrierçäIF (EXISTS('Table Party Carrier';e_(v_construct(s_keys);0) //partyTypeCodeçä) ; çä   // then read from the table çä'Table Party Carrier'[e_(v_construct(s_keys);0) //partyTypeCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 48f89439 003f61a0 0 223b01f6 0 0 2
PP LP CP COP DisabilityHealthProvisions EmploymentClassOption(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions EmploymentClassOptionçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions EmploymentClassOption';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions EmploymentClassOption'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 223b01f6 003f61a0 0 651754e7 0 0 2
Party Producer CarrierAppointment Attachment SignatureInfo(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party Producer CarrierAppointment Attachment SignatureInfoçäIF (EXISTS('Table Party Producer CarrierAppointment Attachment SignatureInfo';e_(v_construct(s_keys);0); //partyTypeCodeçäe_(v_construct(s_keys);1) //signatureCodeçä) ; çä   // then read from the table çä'Table Party Producer CarrierAppointment Attachment SignatureInfo'[e_(v_construct(s_keys);0);  //partyTypeCodeçäe_(v_construct(s_keys);1) //signatureCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 651754e7 003f61a0 0 3d204e23 0 0 2
Party URL(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party URLçäIF (EXISTS('Table Party URL';e_(v_construct(s_keys);0) //partyTypeCodeçä) ; çä   // then read from the table çä'Table Party URL'[e_(v_construct(s_keys);0) //partyTypeCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 3d204e23 003f61a0 0 4fc9037e 0 0 2
PP Ownership QualifiedPlanEntity EntityType(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct Ownership QualifiedPlanEntity EntityTypeçäIF (EXISTS('Table PolicyProduct Ownership QualifiedPlanEntity EntityType';PP(s_keys;"Policy_Key"); //Policy_Keyçä'key2 lookup'("Table PolicyProduct Ownership QualifiedPlanEntity EntityType";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4)) //issueGenderçä) ; çä   // then read from the table çä'Table PolicyProduct Ownership QualifiedPlanEntity EntityType'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'key2 lookup'("Table PolicyProduct Ownership QualifiedPlanEntity EntityType";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4)) //issueGenderçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 4fc9037e 003f61a0 0 1e882058 0 0 2
Party Producer CarrierAppointment DistributionLevel(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party Producer CarrierAppointment DistributionLevelçäIF (EXISTS('Table Party Producer CarrierAppointment DistributionLevel';e_(v_construct(s_keys);0) //partyTypeCodeçä) ; çä   // then read from the table çä'Table Party Producer CarrierAppointment DistributionLevel'[e_(v_construct(s_keys);0) //partyTypeCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 1e882058 003f61a0 0 5e3af6f8 0 0 2
PP LPExt ArrangementProduct ArrangementOptProduct QualifiedPlanEntity EntityType(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct QualifiedPlanEntity EntityTypeçäIF (EXISTS('Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct QualifiedPlanEntity EntityType';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4) //arrTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct QualifiedPlanEntity EntityType'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4) //arrTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 5e3af6f8 003f61a0 0 9038c3e 0 0 2
IP Fee TableRef(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table InvestProduct Fee TableRefçäIF (EXISTS('Table InvestProduct Fee TableRef';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2) //feeTypeçä) ; çä   // then read from the table çä'Table InvestProduct Fee TableRef'[IP(s_keys;"IInvest_Key");  //IInvest_Keyçäe_(v_construct(s_keys);2) //feeTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 9038c3e 003f61a0 0 16bd1a66 0 0 2
PP LP CP COP(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProductçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçäe_(v_construct(s_keys);8) //productCodeçä) ; çä   // then read from the table çäLOOKUPX('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçäe_(v_construct(s_keys);8); //productCodeçä'table effective date'(e_(v_construct(s_keys);9)); //saleEffectiveDateçäfield_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 16bd1a66 003f61a0 0 772101f 0 0 2
PP LP CP COP FeeExt MinBalanceCalcRule(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct Fee OLifEExtension FeeExtension MinBalanceCalcRuleçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct Fee OLifEExtension FeeExtension MinBalanceCalcRule';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key"); //CovOpt_Keyçäe_(v_construct(s_keys);10); //feeTypeçäe_(v_construct(s_keys);11); //balanceTypeçäe_(v_construct(s_keys);12) //sequenceNumberçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct Fee OLifEExtension FeeExtension MinBalanceCalcRule'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key");  //CovOpt_Keyçäe_(v_construct(s_keys);10);  //feeTypeçäe_(v_construct(s_keys);11);  //balanceTypeçäe_(v_construct(s_keys);12) //sequenceNumberçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 772101f 003f61a0 0 56171839 0 0 2
PP LP CP COP DisabilityHealthProvisions MedProviderOption(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions MedProviderOptionçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions MedProviderOption';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions MedProviderOption'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 56171839 003f61a0 0 5497d8e4 0 0 2
PP LP CP COPExt ParticipantProduct(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension ParticipantProductçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension ParticipantProduct';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension ParticipantProduct'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 5497d8e4 003f61a0 0 312fe82d 0 0 2
PP Dividend TableRef JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct Dividend TableRef JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct Dividend TableRef JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //divTypeçäe_(v_construct(s_keys);5); //divOYTOptTypeçä'key4 lookup'("Table PolicyProduct Dividend TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4);e_(v_construct(s_keys);5);e_(v_construct(s_keys);6)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct Dividend TableRef JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //divTypeçäe_(v_construct(s_keys);5);  //divOYTOptTypeçä'key4 lookup'("Table PolicyProduct Dividend TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4);e_(v_construct(s_keys);5);e_(v_construct(s_keys);6)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 312fe82d 003f61a0 0 aa63c44 0 0 2
PP PPInfo CommOptionAvailable LogicalExpression LogicalCriteria KeyDef(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria KeyDefçäIF (EXISTS('Table PolicyProduct PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria KeyDef';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //commOptionçäe_(v_construct(s_keys);5); //operationçäe_(v_construct(s_keys);6); //keyTypeçäe_(v_construct(s_keys);7) //keySubTypeçä) ; çä   // then read from the table çä'Table PolicyProduct PolicyProductInfo CommOptionAvailable LogicalExpression LogicalCriteria KeyDef'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //commOptionçäe_(v_construct(s_keys);5);  //operationçäe_(v_construct(s_keys);6);  //keyTypeçäe_(v_construct(s_keys);7) //keySubTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 aa63c44 003f61a0 0 2e74c52d 0 0 2
PP IPInfo QualifiedPlanEntity(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct InvestProductInfo QualifiedPlanEntityçäIF (EXISTS('Table PolicyProduct InvestProductInfo QualifiedPlanEntity';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP IPInfo'(s_keys;"Invest_Key") //Invest_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct InvestProductInfo QualifiedPlanEntity'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP IPInfo'(s_keys;"Invest_Key") //Invest_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 2e74c52d 003f61a0 0 543284a 0 0 2
PP LoanProvision MinBalanceCalcRule(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LoanProvision MinBalanceCalcRuleçäIF (EXISTS('Table PolicyProduct LoanProvision MinBalanceCalcRule';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //loanTypeçäe_(v_construct(s_keys);5); //balanceTypeçäe_(v_construct(s_keys);6) //sequenceNumberçä) ; çä   // then read from the table çä'Table PolicyProduct LoanProvision MinBalanceCalcRule'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //loanTypeçäe_(v_construct(s_keys);5);  //balanceTypeçäe_(v_construct(s_keys);6) //sequenceNumberçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 543284a 003f61a0 0 6efa304 0 0 2
IP InformationService(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table InvestProduct InformationServiceçäIF (EXISTS('Table InvestProduct InformationService';IP(s_keys;"IInvest_Key") //IInvest_Keyçä) ; çä   // then read from the table çä'Table InvestProduct InformationService'[IP(s_keys;"IInvest_Key") //IInvest_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 6efa304 003f61a0 0 5369235 0 0 2
PP LPExt ArrangementProduct ArrangementOptProduct PaymentModeMethProduct Fee TableRef JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct PaymentModeMethProduct Fee TableRef JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct PaymentModeMethProduct Fee TableRef JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //arrTypeçäe_(v_construct(s_keys);5); //paymentModeçäe_(v_construct(s_keys);6); //paymentMethodçäe_(v_construct(s_keys);7); //feeTypeçä'key6 lookup'("Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct PaymentModeMethProduct Fee TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4);e_(v_construct(s_keys);5);e_(v_construct(s_keys);6);e_(v_construct(s_keys);7);e_(v_construct(s_keys);8)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct PaymentModeMethProduct Fee TableRef JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //arrTypeçäe_(v_construct(s_keys);5);  //paymentModeçäe_(v_construct(s_keys);6);  //paymentMethodçäe_(v_construct(s_keys);7);  //feeTypeçä'key6 lookup'("Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct PaymentModeMethProduct Fee TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4);e_(v_construct(s_keys);5);e_(v_construct(s_keys);6);e_(v_construct(s_keys);7);e_(v_construct(s_keys);8)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 5369235 003f61a0 0 74379bc0 0 0 2
Party Producer CarrierAppointment Fee TableRef(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party Producer CarrierAppointment Fee TableRefçäIF (EXISTS('Table Party Producer CarrierAppointment Fee TableRef';e_(v_construct(s_keys);0); //partyTypeCodeçäe_(v_construct(s_keys);1) //feeTypeçä) ; çä   // then read from the table çä'Table Party Producer CarrierAppointment Fee TableRef'[e_(v_construct(s_keys);0);  //partyTypeCodeçäe_(v_construct(s_keys);1) //feeTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 74379bc0 003f61a0 0 15c52f7d 0 0 2
Party Producer ProducerAgreement DistributionLevel(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party Producer ProducerAgreement DistributionLevelçäIF (EXISTS('Table Party Producer ProducerAgreement DistributionLevel';e_(v_construct(s_keys);0) //partyTypeCodeçä) ; çä   // then read from the table çä'Table Party Producer ProducerAgreement DistributionLevel'[e_(v_construct(s_keys);0) //partyTypeCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 15c52f7d 003f61a0 0 3980cca3 0 0 2
TrustTypeCC(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table TrustTypeCCçäIF (EXISTS('Table TrustTypeCC';e_(v_construct(s_keys);0) //TrustTypeCC_id_extçä) ; çä   // then read from the table çä'Table TrustTypeCC'[e_(v_construct(s_keys);0) //TrustTypeCC_id_extçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 3980cca3 003f61a0 0 570bab63 0 0 2
PP LPExt ArrangementProduct ArrangementOptProduct PaymentModeMethProduct(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct PaymentModeMethProductçäIF (EXISTS('Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct PaymentModeMethProduct';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //arrTypeçäe_(v_construct(s_keys);5); //paymentModeçäe_(v_construct(s_keys);6) //paymentMethodçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct PaymentModeMethProduct'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //arrTypeçäe_(v_construct(s_keys);5);  //paymentModeçäe_(v_construct(s_keys);6) //paymentMethodçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 570bab63 003f61a0 0 23c23eed 0 0 2
Party Producer Registration Exam(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party Producer Registration ExamçäIF (EXISTS('Table Party Producer Registration Exam';e_(v_construct(s_keys);0); //partyTypeCodeçäe_(v_construct(s_keys);1) //examTypeçä) ; çä   // then read from the table çä'Table Party Producer Registration Exam'[e_(v_construct(s_keys);0);  //partyTypeCodeçäe_(v_construct(s_keys);1) //examTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 23c23eed 003f61a0 0 62271988 0 0 2
PP PPInfo CommOptionAvailable LogicalExpression(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct PolicyProductInfo CommOptionAvailable LogicalExpressionçäIF (EXISTS('Table PolicyProduct PolicyProductInfo CommOptionAvailable LogicalExpression';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4) //commOptionçä) ; çä   // then read from the table çä'Table PolicyProduct PolicyProductInfo CommOptionAvailable LogicalExpression'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4) //commOptionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 62271988 003f61a0 0 7096629d 0 0 2
PP LP CP COP Fee TableRef JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct Fee TableRef JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct Fee TableRef JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key"); //CovOpt_Keyçäe_(v_construct(s_keys);10); //feeTypeçä'key5 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct Fee TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10);e_(v_construct(s_keys);11)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct Fee TableRef JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key");  //CovOpt_Keyçäe_(v_construct(s_keys);10);  //feeTypeçä'key5 lookup'("Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct Fee TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'PP LP CP COP'(s_keys;"CovOpt_Key");e_(v_construct(s_keys);10);e_(v_construct(s_keys);11)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 7096629d 003f61a0 0 600ba0ac 0 0 2
IP IPInfoExt RV RVByDuration(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table InvestProduct InvestProductInfo OLifEExtension InvestProductInfoExtension RateVariation RateVariationByDurationçäIF (EXISTS('Table InvestProduct InvestProductInfo OLifEExtension InvestProductInfoExtension RateVariation RateVariationByDuration';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2); //productCodeçäe_(v_construct(s_keys);4) //rateVariationCodeçä) ; çä   // then read from the table çäLOOKUPX('Table InvestProduct InvestProductInfo OLifEExtension InvestProductInfoExtension RateVariation RateVariationByDuration';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2); //productCodeçä'table effective date'(e_(v_construct(s_keys);3)); //saleEffectiveDateçäe_(v_construct(s_keys);4); //rateVariationCodeçäfield_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 600ba0ac 003f61a0 0 427a17f8 0 0 2
PP LP(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProductçäIF (EXISTS('Table PolicyProduct LifeProduct';PP(s_keys;"Policy_Key") //Policy_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct'[PP(s_keys;"Policy_Key") //Policy_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 427a17f8 003f61a0 0 7cff9097 0 0 2
PP CMProduct CommOptionAvailable(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct CommissionProduct CommOptionAvailableçäIF (EXISTS('Table PolicyProduct CommissionProduct CommOptionAvailable';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //commissionAgeCalculationTypeçäe_(v_construct(s_keys);5); //commissionAgePartySelectionçäe_(v_construct(s_keys);6); //participantBasedPartySelectionçäe_(v_construct(s_keys);7) //commOptionçä) ; çä   // then read from the table çä'Table PolicyProduct CommissionProduct CommOptionAvailable'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //commissionAgeCalculationTypeçäe_(v_construct(s_keys);5);  //commissionAgePartySelectionçäe_(v_construct(s_keys);6);  //participantBasedPartySelectionçäe_(v_construct(s_keys);7) //commOptionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 7cff9097 003f61a0 0 20484908 0 0 2
PP LPExt ArrangementProduct ArrangementOptProduct Attachment AttachmentReference(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct Attachment AttachmentReferenceçäIF (EXISTS('Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct Attachment AttachmentReference';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4) //arrTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct Attachment AttachmentReference'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4) //arrTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 20484908 003f61a0 0 e6b5303 0 0 2
Party Producer License Fee(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party Producer License FeeçäIF (EXISTS('Table Party Producer License Fee';e_(v_construct(s_keys);0); //partyTypeCodeçäe_(v_construct(s_keys);1) //feeTypeçä) ; çä   // then read from the table çä'Table Party Producer License Fee'[e_(v_construct(s_keys);0);  //partyTypeCodeçäe_(v_construct(s_keys);1) //feeTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 e6b5303 003f61a0 0 7e33b48c 0 0 2
PP IPInfo RateVariationKey(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct InvestProductInfo RateVariationKeyçäIF (EXISTS('Table PolicyProduct InvestProductInfo RateVariationKey';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP IPInfo'(s_keys;"Invest_Key") //Invest_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct InvestProductInfo RateVariationKey'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP IPInfo'(s_keys;"Invest_Key") //Invest_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 7e33b48c 003f61a0 0 130d592 0 0 2
IP IPInfo FeeExt MinBalanceCalcRule(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table InvestProduct InvestProductInfo Fee OLifEExtension FeeExtension MinBalanceCalcRuleçäIF (EXISTS('Table InvestProduct InvestProductInfo Fee OLifEExtension FeeExtension MinBalanceCalcRule';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2); //productCodeçäe_(v_construct(s_keys);4); //feeTypeçäe_(v_construct(s_keys);5); //balanceTypeçäe_(v_construct(s_keys);6) //sequenceNumberçä) ; çä   // then read from the table çäLOOKUPX('Table InvestProduct InvestProductInfo Fee OLifEExtension FeeExtension MinBalanceCalcRule';IP(s_keys;"IInvest_Key"); //IInvest_Keyçäe_(v_construct(s_keys);2); //productCodeçä'table effective date'(e_(v_construct(s_keys);3)); //saleEffectiveDateçäe_(v_construct(s_keys);4); //feeTypeçäe_(v_construct(s_keys);5); //balanceTypeçäe_(v_construct(s_keys);6); //sequenceNumberçäfield_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 130d592 003f61a0 0 48ed4200 0 0 2
PP LoanProvision OLifEExtension LoanProvisionExtension TableRef(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LoanProvision OLifEExtension LoanProvisionExtension TableRefçäIF (EXISTS('Table PolicyProduct LoanProvision OLifEExtension LoanProvisionExtension TableRef';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4) //loanTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LoanProvision OLifEExtension LoanProvisionExtension TableRef'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4) //loanTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 48ed4200 003f61a0 0 15867eaa 0 0 2
Party Producer License Attachment(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party Producer License AttachmentçäIF (EXISTS('Table Party Producer License Attachment';e_(v_construct(s_keys);0) //partyTypeCodeçä) ; çä   // then read from the table çä'Table Party Producer License Attachment'[e_(v_construct(s_keys);0) //partyTypeCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 15867eaa 003f61a0 0 293c7859 0 0 2
JurisdictionCC(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table JurisdictionCCçäIF (EXISTS('Table JurisdictionCC';e_(v_construct(s_keys);0) //JurisdictionCC_id_extçä) ; çä   // then read from the table çä'Table JurisdictionCC'[e_(v_construct(s_keys);0) //JurisdictionCC_id_extçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 293c7859 003f61a0 0 161642c 0 0 2
PP LP CP UnderwritingClassProduct UnderwritingClassProductXLat(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct UnderwritingClassProductXLatçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct UnderwritingClassProductXLat';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct UnderwritingClassProductXLat";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8)); //underwritingClassçäe_(v_construct(s_keys);9); //underwritingSubClassçä'key5 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct UnderwritingClassProductXLat";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct UnderwritingClassProductXLat";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8));e_(v_construct(s_keys);9);e_(v_construct(s_keys);10)); //tobaccoPremiumBasisçä'key6 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct UnderwritingClassProductXLat";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct UnderwritingClassProductXLat";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8));e_(v_construct(s_keys);9);'key5 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct UnderwritingClassProductXLat";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct UnderwritingClassProductXLat";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8));e_(v_construct(s_keys);9);e_(v_construct(s_keys);10));e_(v_construct(s_keys);11)) //issueGenderçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct UnderwritingClassProductXLat'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct UnderwritingClassProductXLat";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8));  //underwritingClassçäe_(v_construct(s_keys);9);  //underwritingSubClassçä'key5 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct UnderwritingClassProductXLat";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct UnderwritingClassProductXLat";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8));e_(v_construct(s_keys);9);e_(v_construct(s_keys);10));  //tobaccoPremiumBasisçä'key6 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct UnderwritingClassProductXLat";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct UnderwritingClassProductXLat";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8));e_(v_construct(s_keys);9);'key5 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct UnderwritingClassProductXLat";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");'key3 lookup'("Table PolicyProduct LifeProduct CoverageProduct UnderwritingClassProduct UnderwritingClassProductXLat";PP(s_keys;"Policy_Key");'PP LP CP'(s_keys;"Coverage_Key");e_(v_construct(s_keys);8));e_(v_construct(s_keys);9);e_(v_construct(s_keys);10));e_(v_construct(s_keys);11)) //issueGenderçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 161642c 003f61a0 0 673b1aa8 0 0 2
PP Attachment(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct AttachmentçäIF (EXISTS('Table PolicyProduct Attachment';PP(s_keys;"Policy_Key") //Policy_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct Attachment'[PP(s_keys;"Policy_Key") //Policy_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 673b1aa8 003f61a0 0 3849e88 0 0 2
PP LPExt ArrangementProduct ArrangementOptProduct(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProductçäIF (EXISTS('Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4) //arrTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct OLifEExtension LifeProductExtension ArrangementProduct ArrangementOptProduct'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4) //arrTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 3849e88 003f61a0 0 27438045 0 0 2
Party Organization OrganizationFinancialData(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party Organization OrganizationFinancialDataçäIF (EXISTS('Table Party Organization OrganizationFinancialData';e_(v_construct(s_keys);0) //partyTypeCodeçä) ; çä   // then read from the table çä'Table Party Organization OrganizationFinancialData'[e_(v_construct(s_keys);0) //partyTypeCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 27438045 003f61a0 0 a80f879 0 0 2
PP LP CPExt CPFeature AdditionalPaymentProvision Fee(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension CoverageProductFeature AdditionalPaymentProvision FeeçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension CoverageProductFeature AdditionalPaymentProvision Fee';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçäe_(v_construct(s_keys);8) //feeTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct OLifEExtension CoverageProductExtension CoverageProductFeature AdditionalPaymentProvision Fee'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçäe_(v_construct(s_keys);8) //feeTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 a80f879 003f61a0 0 520e37af 0 0 2
PP LP CP COPExt RV RVByVolume(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension RateVariation RateVariationByVolumeçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension RateVariation RateVariationByVolume';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key"); //CovOpt_Keyçäe_(v_construct(s_keys);10) //rateVariationCodeçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension RateVariation RateVariationByVolume'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key");  //CovOpt_Keyçäe_(v_construct(s_keys);10) //rateVariationCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 520e37af 003f61a0 0 68eb504f 0 0 2
PP AdminTransactionProduct QualifiedPlanEntity EntityType(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct AdminTransactionProduct QualifiedPlanEntity EntityTypeçäIF (EXISTS('Table PolicyProduct AdminTransactionProduct QualifiedPlanEntity EntityType';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4) //transTypeçä) ; çä   // then read from the table çä'Table PolicyProduct AdminTransactionProduct QualifiedPlanEntity EntityType'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4) //transTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 68eb504f 003f61a0 0 3e783cc1 0 0 2
PP LoanProvision RV TableRef JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LoanProvision RateVariation TableRef JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct LoanProvision RateVariation TableRef JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //loanTypeçäe_(v_construct(s_keys);5); //rateVariationCodeçä'key4 lookup'("Table PolicyProduct LoanProvision RateVariation TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4);e_(v_construct(s_keys);5);e_(v_construct(s_keys);6)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct LoanProvision RateVariation TableRef JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //loanTypeçäe_(v_construct(s_keys);5);  //rateVariationCodeçä'key4 lookup'("Table PolicyProduct LoanProvision RateVariation TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4);e_(v_construct(s_keys);5);e_(v_construct(s_keys);6)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 3e783cc1 003f61a0 0 32d21c75 0 0 2
PP LP CP COP DisabilityHealthProvisions BenePeriodSickOption(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions BenePeriodSickOptionçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions BenePeriodSickOption';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct DisabilityHealthProvisions BenePeriodSickOption'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 32d21c75 003f61a0 0 7b5faa82 0 0 2
PP FreelookInvestRuleProduct JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct FreelookInvestRuleProduct JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct FreelookInvestRuleProduct JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4); //investRuleProductçä'key3 lookup'("Table PolicyProduct FreelookInvestRuleProduct JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4);e_(v_construct(s_keys);5)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct FreelookInvestRuleProduct JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4);  //investRuleProductçä'key3 lookup'("Table PolicyProduct FreelookInvestRuleProduct JurisdictionApproval";PP(s_keys;"Policy_Key");e_(v_construct(s_keys);4);e_(v_construct(s_keys);5)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 7b5faa82 003f61a0 0 72fa6784 0 0 2
Party Producer License Fee TableRef(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party Producer License Fee TableRefçäIF (EXISTS('Table Party Producer License Fee TableRef';e_(v_construct(s_keys);0); //partyTypeCodeçäe_(v_construct(s_keys);1) //feeTypeçä) ; çä   // then read from the table çä'Table Party Producer License Fee TableRef'[e_(v_construct(s_keys);0);  //partyTypeCodeçäe_(v_construct(s_keys);1) //feeTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 72fa6784 003f61a0 0 70cf56c9 0 0 2
PP LP CP COPExt AgeAmtProduct(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension AgeAmtProductçäIF (EXISTS('Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension AgeAmtProduct';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key"); //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä) ; çä   // then read from the table çä'Table PolicyProduct LifeProduct CoverageProduct CovOptionProduct OLifEExtension CovOptionProductExtension AgeAmtProduct'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP LP CP'(s_keys;"Coverage_Key");  //Coverage_Keyçä'PP LP CP COP'(s_keys;"CovOpt_Key") //CovOpt_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 70cf56c9 003f61a0 0 2418ae17 0 0 2
PP IPInfoExt RV TableRef JurisdictionApproval(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct InvestProductInfo OLifEExtension InvestProductInfoExtension RateVariation TableRef JurisdictionApprovalçäIF (EXISTS('Table PolicyProduct InvestProductInfo OLifEExtension InvestProductInfoExtension RateVariation TableRef JurisdictionApproval';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP IPInfo'(s_keys;"Invest_Key"); //Invest_Keyçäe_(v_construct(s_keys);6); //rateVariationCodeçä'key4 lookup'("Table PolicyProduct InvestProductInfo OLifEExtension InvestProductInfoExtension RateVariation TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");'PP IPInfo'(s_keys;"Invest_Key");e_(v_construct(s_keys);6);e_(v_construct(s_keys);7)) //jurisdictionçä) ; çä   // then read from the table çä'Table PolicyProduct InvestProductInfo OLifEExtension InvestProductInfoExtension RateVariation TableRef JurisdictionApproval'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP IPInfo'(s_keys;"Invest_Key");  //Invest_Keyçäe_(v_construct(s_keys);6);  //rateVariationCodeçä'key4 lookup'("Table PolicyProduct InvestProductInfo OLifEExtension InvestProductInfoExtension RateVariation TableRef JurisdictionApproval";PP(s_keys;"Policy_Key");'PP IPInfo'(s_keys;"Invest_Key");e_(v_construct(s_keys);6);e_(v_construct(s_keys);7)) //jurisdictionçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 2418ae17 003f61a0 0 1dcc3987 0 0 2
IP OLifEExtension InvestProductExtension TableRef(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table InvestProduct OLifEExtension InvestProductExtension TableRefçäIF (EXISTS('Table InvestProduct OLifEExtension InvestProductExtension TableRef';IP(s_keys;"IInvest_Key") //IInvest_Keyçä) ; çä   // then read from the table çä'Table InvestProduct OLifEExtension InvestProductExtension TableRef'[IP(s_keys;"IInvest_Key") //IInvest_Keyçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 1dcc3987 003f61a0 0 7f37e11 0 0 2
PP LoanProvision(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct LoanProvisionçäIF (EXISTS('Table PolicyProduct LoanProvision';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4) //loanTypeçä) ; çä   // then read from the table çä'Table PolicyProduct LoanProvision'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4) //loanTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 7f37e11 003f61a0 0 628b197a 0 0 2
PP Fee TableRef(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct Fee TableRefçäIF (EXISTS('Table PolicyProduct Fee TableRef';PP(s_keys;"Policy_Key"); //Policy_Keyçäe_(v_construct(s_keys);4) //feeTypeçä) ; çä   // then read from the table çä'Table PolicyProduct Fee TableRef'[PP(s_keys;"Policy_Key");  //Policy_Keyçäe_(v_construct(s_keys);4) //feeTypeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 628b197a 003f61a0 0 270d7f26 0 0 2
Party Producer License Attachment SignatureInfo(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table Party Producer License Attachment SignatureInfoçäIF (EXISTS('Table Party Producer License Attachment SignatureInfo';e_(v_construct(s_keys);0); //partyTypeCodeçäe_(v_construct(s_keys);1) //signatureCodeçä) ; çä   // then read from the table çä'Table Party Producer License Attachment SignatureInfo'[e_(v_construct(s_keys);0);  //partyTypeCodeçäe_(v_construct(s_keys);1) //signatureCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
F1 270d7f26 003f61a0 0 0 0 0 2
PP IPInfoExt RV TableRef(s_keys; field_name)
Funktion
 // Looks up the plan info for field_name from table Table PolicyProduct InvestProductInfo OLifEExtension InvestProductInfoExtension RateVariation TableRefçäIF (EXISTS('Table PolicyProduct InvestProductInfo OLifEExtension InvestProductInfoExtension RateVariation TableRef';PP(s_keys;"Policy_Key"); //Policy_Keyçä'PP IPInfo'(s_keys;"Invest_Key"); //Invest_Keyçäe_(v_construct(s_keys);6) //rateVariationCodeçä) ; çä   // then read from the table çä'Table PolicyProduct InvestProductInfo OLifEExtension InvestProductInfoExtension RateVariation TableRef'[PP(s_keys;"Policy_Key");  //Policy_Keyçä'PP IPInfo'(s_keys;"Invest_Key");  //Invest_Keyçäe_(v_construct(s_keys);6) //rateVariationCodeçä](field_name) ; çä   // Else return error messageçä"NoProdInfoFound"çä)
A0 003f4280 0 0 0 0 0 0

T0 003f42ec 0 0 0 0 0 0

I0 003f4358 0 0 0 0 0 0

-
O0
E0
L0
B0
P0
F387
003f2928
003f46f0
003f4870
003f49a8
003f4b98
003f4e18
003f4f78
01e607b0
01e605a8
01e60cf0
01e60cf1
01e60cf2
003f5008
003f5fe0
003f61a0
003f6350
7b781350
7b32e79a
5bf686a2
72a27f7d
e63c24b
739c85c1
7f486c0b
232c243b
1fa2c94d
3435aac2
78ca28a3
6b5520ef
5c659c74
568402f0
40ddbb2e
13e9fb9a
24a68650
e4871fb
6014468b
3efb825
174b2e39
31621849
45b1b376
64315360
77e2a4bc
adcfd41
36c1fe52
e0b7ca
48fde05b
6085cf6e
4ac69cdf
2541f1dc
146ddc08
5b50d7c2
593d778e
123da30a
21e364d
9d8d54c
47972e21
3e41ccf5
68b98eb0
4725874a
5aadd7e9
5f7feb0d
2150571d
1d205b05
50255e69
25306dea
606f518d
41828a5
6e12ccfa
7e1f0b5b
58bc7805
276dbf63
4cac81f1
253d1d2f
bf7fc6d
10ea1650
40d47b21
1c761e9c
7b83c54f
29c18b3
22a74834
4d9dc4c4
2b48a658
3381d450
4cc61876
4acb3e76
375892a
780fb5ea
345e3881
59128d04
145a6c0d
f57c3fa
31408d5b
493e1104
4348caae
6a9985af
31238556
627aef00
238d9a62
4da88b2d
2f3406cc
2e427fd6
6a6da67
679fdb03
3a3d3f0d
4f3b96b6
4cbcad08
176548f4
195f43f8
759e1f6d
71360e8a
73197e4f
4cf8b35b
28fa81d6
5f8a5658
32fee67
7e293f0
698166e5
532a7de2
53904a8b
44fa3cd4
7ccbcfbc
1491b7ad
6da6f428
5f2724e6
7ed8c9f5
21d0a9d9
761ede9
37e78264
1e443510
74e614c5
639dc017
1b714a64
1a36c0aa
7c30add
5ef90311
4eb5d92b
13ff5d59
286f1963
168c61d
9a4e9ec
ea970ab
67c0468e
516d5719
1348e84d
47e62bbf
7a274d40
71a125e
41564968
4e993304
665fd25d
107b2dc5
16952fcf
1be344cb
8fc8bd6
63cdc8d2
198f5730
66c1c711
332c2b7c
135b4365
11ab10b7
6620a7d
3e9538e4
d8806ce
67bb9739
5b29d0d
7b524073
39f138ef
5541b841
562f19c5
30d784ed
274e9e2a
4c3371ab
9a5094
18d84b6e
7d7345e9
7675b2ff
49cd92ea
1e64c1b8
3643890
1c6e9499
76f82632
c2b5dcb
6521bb50
7264c196
2d6ee1ca
3585392f
386cc79c
4d07d74e
24ca6298
17843501
62e710c1
17d9fbb6
34c3be40
58ed6607
13238a9f
386ef73c
71ff16e4
374d4f73
2758cf3c
5e554e4a
45f512f5
10d61014
30110ddd
11916936
5cffd337
27d9bd0
1f893998
3c8e5c90
31e04d13
4b76c858
8f29aae
1307ef8b
b09232b
4b4996a0
7bbb13f0
76558e62
38674851
481ef519
7b142f20
7cd439e4
7b318fee
5f904532
4e55daae
a218d13
24322d1
3a8a3f76
40387ecd
5a452984
4773c13e
49ef4a56
16512d47
1fe8e019
740d1151
56b7e156
158957dc
6fcf54d4
3990df7b
198d3b7f
73a56cfc
10d40991
272c385d
52c86669
3d9a5703
745bcce7
4ddd14fc
5bb694ed
1f30e1bc
fb0ae63
366dc5f8
43aabe5e
5fe5debb
4a7838c3
2ed231da
7cd6ded6
2fc9e042
4a9c8f6
6ad4a0c7
35bd5387
171f1432
6bf4ac26
36d14571
90cc3fe
70bb3af6
48e7bfef
13073141
400c6693
310cd30
31a27dfb
59b60fb8
989ced7
28939911
3efb06a4
817bc00
4b58e531
40841fea
4227b1dc
39bf2140
3c5abaa2
52cfaf8c
24f64a50
51925456
42ac0b80
30aa6972
4d66a935
722b2bd
97f88b5
4c6dab49
34b615d8
4184ccbb
121ad858
72336144
721bf055
3d33bbcc
6ca3abcd
15b7465d
62796241
3c01e32e
dffac7f
54dd36a0
708d2bc6
43c71487
4cbc8d0f
64b905b8
12cbb736
751d286b
652dd1f9
53bcf270
6ab1b0bb
7d3a3639
56cef448
38d0ab58
2a62db83
2e666fc
7bc3e093
47fcce10
2b25445
65cf84ef
6124cd97
76e049da
332dea64
5bfe6744
5336325c
69757a10
34f4c89b
5575a997
51be944
73b92d18
1934fc17
1863eb7f
377c97da
1a0945ca
6b582443
e9def1f
76cd569f
167845df
3633d62d
48f89439
223b01f6
651754e7
3d204e23
4fc9037e
1e882058
5e3af6f8
9038c3e
16bd1a66
772101f
56171839
5497d8e4
312fe82d
aa63c44
2e74c52d
543284a
6efa304
5369235
74379bc0
15c52f7d
3980cca3
570bab63
23c23eed
62271988
7096629d
600ba0ac
427a17f8
7cff9097
20484908
e6b5303
7e33b48c
130d592
48ed4200
15867eaa
293c7859
161642c
673b1aa8
3849e88
27438045
a80f879
520e37af
68eb504f
3e783cc1
32d21c75
7b5faa82
72fa6784
70cf56c9
2418ae17
1dcc3987
7f37e11
628b197a
270d7f26
A0
T0
!10
003f46f0 -2 -2
Description: Converts the date to format YYYYMMDD.çä çäModification Log:çä03/07/2007 CSC Illustrations ILLUS001  Modified function for performanceçä10/31/2007 CSC Initial Calculation/Ruleçä
003f49a8 -2 -2
Description: Checks that Key2 exists in table lookup
003f4b98 -2 -2
Description: Checks that Key3 exists in table lookup
003f4e18 -2 -2
Description: Checks that Key4 exists in table lookup
003f4f78 -2 -2
Description: Checks that Key5 exists in table lookup
01e607b0 -2 -2
Description: Checks that Key6 exists in table lookup
01e605a8 -2 -2
Description: Checks that Key7 exists in table lookup
01e60cf0 -2 -2
Description: Checks that Key8 exists in table lookup
01e60cf1 -2 -2
Description: Checks that Key9 exists in table lookup
01e60cf2 -2 -2
Description: Checks that Key10 exists in table lookup
;Offset=00000000
