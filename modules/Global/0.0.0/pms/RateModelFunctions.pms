;1	08.12.2016 13:38:33	jlawrie2	
X0 4534ad4 0 4543518 0 0 0 0

X0 4543518 4534ad4 4543598 0 0 0 0
-- All Tests - Common RateModel Functions --
X1 4543598 4543518 4543618 4543698 0 0 2
Death Benefit Option Key- A
'Death Benefit Option Key'("(VUL1PA!CCOI!01/01/2007!35!11!1!!!1!!!!1)")
A
X1 4543618 4543598 0 0 0 0 2
Death Benefit Option Key- B
'Death Benefit Option Key'("(VUL1PA!CCOI!01/01/2007!35!11!1!!!1!!!!2)")
B
X1 4543698 4543518 4543718 4543798 0 0 2
Detail Parm Validation- Underwriter_Class
'Detail Parm Validation'(v_("Underwriting_Class");("(VUL1PA!CCOI!01/01/2007!35!11!1!2!3!1!1)");0)
0
X1 4543718 4543698 0 0 0 0 2
Detail Parm Validation- Smoke Code
'Detail Parm Validation'(v_("Smoke_Code");("(VUL1PA!CCOI!01/01/2007!35!11!1!2!3!1!1)");0)
1
X1 4543798 4543518 4543818 4543918 0 0 2
Gender Code Key- M
'Gender Code Key'("(VUL1PA!CCOI!01/01/2007!35!11!1!!3!1!!!!1)")
M
X1 4543818 4543798 0 4543898 0 0 2
Gender Code Key- F
'Gender Code Key'("(VUL1PA!CCOI!01/01/2007!35!11!2!!3!1!!!!1)")
F
X1 4543898 4543798 0 0 0 0 2
Gender Code Key- U
'Gender Code Key'("(VUL1PA!CCOI!01/01/2007!35!11!3!!3!1!!!!1)")
U
X1 4543918 4543518 4543998 4543a18 0 0 2
Parm Validation- 0
'Parm Validation'(v_("Underwriting_Class");("(VUL1PA!CCOI!01/01/2007!35!11!1!2!3!1!1)"))
0
X1 4543998 4543918 0 0 0 0 2
Parm Validation- 1
'Parm Validation'(v_("Smoke_Code");("(VUL1PA!CCOI!01/01/2007!35!11!1!2!3!1!1)"))
1
X1 4543a18 4543518 4543a98 4543b18 0 0 2
Range Error- 0
'Range Error'("UL1PA";"CCOI";"Issue_Age"; 30)
0
X1 4543a98 4543a18 0 0 0 0 2
Range Error- 1
'Range Error'("UL1PA";"CCOI";"Smooke_Code"; 4)
1
X1 4543b18 4543518 4543b98 4543d18 0 0 2
SetParameter- Issue_Age
SetParameter("Issue_Age";("(VUL1PA!CCOI!01/01/2007!35!11!1!2!3!1!1)"))
35
X1 4543b98 4543b18 0 4543c98 0 0 2
SetParameter- Smoke_Code
SetParameter("Smoke_Code";("(VUL1PA!CCOI!01/01/2007!35!11!1!2!2!1!1)"))
2
X1 4543c98 4543b18 0 4543c18 0 0 2
SetParameter - Gender
SetParameter("Gender";"(SPIA1PA!MORTIMPROVE!20060101!60!2)")
2
X1 4543c18 4543b18 0 0 0 0 2
SetParameter- Interest_GuarPeriod
SetParameter("Interest_GuarPeriod";"(MULTPER!CURRINT!20990101!12!1000500005!00!0!36)")
36
X1 4543d18 4543518 4543d98 4543e18 0 0 2
Smoke Code Key- NS
'Smoke Code Key'("(VUL1PA!CCOI!01/01/2007!35!11!1!!1!1!!!!1)")
NS
X1 4543d98 4543d18 0 0 0 0 2
Smoke Code Key- S
'Smoke Code Key'("(VUL1PA!CCOI!01/01/2007!35!11!1!!2!1!!!!1)")
S
X1 4543e18 4543518 4543e98 0 0 0 2
Underwriting Class Key- STD
'Underwriting Class Key'("(VUL1PA!CCOI!01/01/2007!35!11!1!1!3!1!!!!1)")
STD
X1 4543e98 4543e18 0 0 0 0 2
Underwriting Class Key- PRF
'Underwriting Class Key'("(VUL1PA!CCOI!01/01/2007!35!11!1!2!3!1!!!!1)")
PRF
O0 453496c 0 0 0 0 0 0

E0 45349e4 0 0 0 0 0 0

L0 4534a5c 0 0 0 0 0 0

B0 4534c3c 0 0 0 0 0 0

P3 4534b4c 0 4543f18 0 0 0 2

--description
Common sub-model containing common functions needed and used throughout the rate models.çä çäValidation, common rate table build access keys, and ACORD lookup functions are some of the items contained here.çä çäRELEASE LOG:çäRELEASE 1501 - PAC039 DIAçäRELEASE 1301 - wmA-J DevelopmentçäRELEASE wmA 1001 - ENH922çäRELEASE 1101 - PAC011 DERA&VERAçä
LICENSENAME
"CSC US internal use only - Workbench"
COMPILERVERSION
"5.5.1"
P13 4543f18 4534b4c 0 0 0 0 2
RateModel Functions
IncType
mandatory
IncRule

IncValue

OUTPUT Comment
"Rate Model Functions for all products"
OUTPUT Runtime Version
"1.0.0"
OUTPUT Runtime Date
"12/12/2016"
OUTPUT Source Version Computer
"VPM_SERVER"
OUTPUT Source Version File
"RateModelFunctions.PMS"
OUTPUT Source Version Number
'GEN VersionInfo'
OUTPUT Source Version Date
"12/12/2016"
OUTPUT Source Version Author
"CSC"
OUTPUT Source Version Comment
"PA1603 Delivery"
OUTPUT Audit History Block
"12/12/2016 PA1603 Delivery"
F0 4534bc4 0 4543f98 0 0 0 0

F1 4543f98 4534bc4 4544018 4544418 0 0 2
--Validation Functions--
Funktion

F1 4544018 4543f98 4544098 0 0 0 2
Parm Validation(v;s)
Funktion
SUMX(x;0;V_LENGTH(v) - 1;'Detail Parm Validation'(v;s;#x)) > 0
F1 4544098 4544018 4544118 4544218 0 0 2
Detail Parm Validation(v;s;x)
Funktion
CASE( /*Parameter*/ E_(v;x);çä  "Issue_Age";"Issue_Age_PW";"Issue_Age_WP" : 'Range Error'(SetParameter("product_Code";s);SetParameter("rate_Type";s);E_(v;x);SetParameter("Issue_Age";s));çä  "Duration";"Duration_PW";"Duration_WP" : 'Range Error'(SetParameter("product_Code";s);SetParameter("rate_Type";s);E_(v;x);SetParameter("Duration";s));çä  "Attained_Age";"Attained_Age_PW";"Attained_Age_WP" : 'Range Error'(SetParameter("product_Code";s);SetParameter("rate_Type";s);E_(v;x);SetParameter("Issue_Age";s) + SetParameter("Duration";s) - 1);çä  "Smoke_Code";"Gender_Code";"Underwriting_Class";"Death_Benefit_Option";"Band_Code";"LookupValue";"Invest_Rate_Type";"Invest_Rate_Sub_Type";"EmploymentClass_Code";"BenefitPeriod_Code";"EliminationPeriod_Code" : 'List Error'(E_(v;x);SetParameter(E_(v;x);s));çä   /*else nothing*/  : 0)çä
F1 4544118 4544098 0 4544198 0 0 2
SetParameter(parm_type;s)
Funktion
IF ( /*Parm exists for rate type?*/ EXISTS('TABLE Parm Position';E_(V_CONSTRUCT(s);1);parm_type) ; çä   /*Then use that parm*/ IF (V_LENGTH(V_CONSTRUCT(s)) >= 'TABLE Parm Position'[E_(V_CONSTRUCT(s);1); parm_type] ; çä    E_(V_CONSTRUCT(s);'TABLE Parm Position'[E_(V_CONSTRUCT(s);1); parm_type]) ; çä    -99999çä  ) ; çä /*else, check for default parm position*/ IF ( /*parm exists for wildcard rate type?*/ EXISTS('TABLE Parm Position';"*";parm_type) ; çä   /*Yes*/ IF (V_LENGTH(V_CONSTRUCT(s)) >= 'TABLE Parm Position'["*"; parm_type] ; çä    E_(V_CONSTRUCT(s);'TABLE Parm Position'["*"; parm_type]) ; çä    -99999çä  ) ; çä /*No - do nothing*/ 'GEN Vector Blank'çä)çä)
F1 4544198 4544098 0 0 0 0 2
SetVectorParameter(parm_type;s)
Funktion
IF ( /*Parm exists for rate type?*/ EXISTS('TABLE Parm Position';E_(s;1);parm_type) ; çä   /*Then use that parm*/ IF (V_LENGTH(s) >= 'TABLE Parm Position'[E_(s;1); parm_type] ; çä    E_(s;'TABLE Parm Position'[E_(s;1); parm_type]) ; çä    -99999çä  ) ; çä /*else, check for default parm position*/ IF ( /*parm exists for wildcard rate type?*/ EXISTS('TABLE Parm Position';"*";parm_type) ; çä   /*Yes*/ IF (V_LENGTH(s) >= 'TABLE Parm Position'["*"; parm_type] ; çä    E_(s;'TABLE Parm Position'["*"; parm_type]) ; çä    -99999çä  ) ; çä /*No - do nothing*/ 'GEN Vector Blank'çä)çä)
F1 4544218 4544018 0 4544298 0 0 2
List Error(input_name; value)
Funktion
CASE( /*Input name*/ input_name;çä   /*gender*/ "Gender_Code" : NOT(EXISTS('TABLE Gender Code';value));çä   /*Smoke*/ "Smoke_Code" : NOT(EXISTS('TABLE Smoke Code';value));çä   /*Underwriting class*/ "Underwriting_Class" : NOT(EXISTS('TABLE Underwriting Class';value));çä   /*Band*/ "Band_Code" : NOT(EXISTS('TABLE Band Code';value));çä   /*Death benefit option*/ "Death_Benefit_Option" : NOT(EXISTS('TABLE Death Benefit Option';value));çä   /*Invest rate type*/ "Invest_Rate_Type" : NOT(EXISTS('TABLE Invest Rate Type';value));çä   /*Invest rate subtype*/ "Invest_Rate_Sub_Type" : NOT(EXISTS('TABLE Invest Rate Sub Type';value));çä   /*Employment Class Code*/ "EmploymentClass_Code" : NOT(EXISTS('TABLE EmploymentClass Code';value));çä   /*Benefit Period Code*/ "BenefitPeriod_Code" : NOT(EXISTS('TABLE BenefitPeriod Code';value));çä   /*Elimination Period Code*/ "EliminationPeriod_Code" : NOT(EXISTS('TABLE EliminationPeriod Code';value));çä   /*else*/  : 0)çä
F1 4544298 4544018 4544318 0 0 0 2
Range Error(product; rate; name; value)
Funktion
IF ( /*Check exact match*/ NOT(EXISTS('TABLE Range Error';product;rate;name)) ; çä   /*No match*/ IF ( /*check wildcard rate type*/ NOT(EXISTS('TABLE Range Error';product;"*";name)) ; çä     /*No Match*/ IF ( /*Check wild card product type*/ NOT(EXISTS('TABLE Range Error';"*";rate;name)) ; çä       /*No match*/ IF ( /*Check wild card rate & product*/ NOT(EXISTS('TABLE Range Error';"*";"*";name)) ; çä         /*Give up*/ 1 ; çä         //1 errorçä/*found match*/'Range Check'("*";"*";name;value)çä      ) ; çä     /*found match*/ 'Range Check'("*";rate;name;value)çä  ) ; çä /*found match*/ 'Range Check'(product;"*";name;value)çä) ; çä /*found match*/ 'Range Check'(product;rate;name;value)çä)
F1 4544318 4544298 0 0 0 0 2
Range Check(product; rate; name; value)
Funktion
NOT('TABLE Range Error'[product; rate; name].MIN <= value && 'TABLE Range Error'[product; rate; name].MAX >= value)
F1 4544418 4534bc4 4544498 4544918 0 0 2
-- Common Rate Table Build Access Keys --
Funktion

F1 4544498 4544418 0 4544518 0 0 2
Common RateModel Access Table ID Key(s)
Funktion
SetParameter("Table_Code";s)
F1 4544518 4544418 0 4544598 0 0 2
Common RateModel Access ChargeBasedOn Key(table_name; s)
Funktion
IF ( /*Key exists?*/ EXISTS(table(table_name);'Common RateModel Access Table ID Key'(s);SetParameter("Rule_Code";s)) ; çä   // Match found.  Use ChargeBasedOn value as the search key.çäSetParameter("Rule_Code";s) ; çä   // ElseçäIF ( /*try match with wildcard */ EXISTS(table(table_name);'Common RateModel Access Table ID Key'(s);"*") ; çä     // Use wildcard for ChargeBasedOnçä"*" ; çä     // Can't be found even with a wildcardçä"nomatch"çä  )çä)
F1 4544598 4544418 0 4544618 0 0 2
Common RateModel Access Jurisdiction Key(table_name; s)
Funktion
IF ( /*Key exists?*/ EXISTS(table(table_name);'Common RateModel Access Table ID Key'(s);'Common RateModel Access ChargeBasedOn Key'(table_name;s);SetParameter("State_Code";s)) ; çä   // Use State_Code in the search keyçäSetParameter("State_Code";s) ; çä   // ElseçäIF ( /*try match with wildcard */ EXISTS(table(table_name);'Common RateModel Access Table ID Key'(s);'Common RateModel Access ChargeBasedOn Key'(table_name;s);"*") ; çä     // Use wildcardçä"*" ; çä     // Can't be found even with wildcardçä"nomatch"çä  )çä)
F1 4544618 4544418 0 4544698 0 0 2
Common RateModel Access Gender Key(table_name; s)
Funktion
IF ( /*Key exists?*/ EXISTS(table(table_name);'Common RateModel Access Table ID Key'(s);'Common RateModel Access ChargeBasedOn Key'(table_name;s);'Common RateModel Access Jurisdiction Key'(table_name;s);'Gender Code Key'(s)) ; çä   // Use Gender Code in the search keyçä'Gender Code Key'(s) ; çä   // ElseçäIF ( /*try match with wildcard */ EXISTS(table(table_name);'Common RateModel Access Table ID Key'(s);'Common RateModel Access ChargeBasedOn Key'(table_name;s);'Common RateModel Access Jurisdiction Key'(table_name;s);"*") ; çä     // Use wildcardçä"*" ; çä     // Can't be found even with a wildcardçä"nomatch"çä  )çä)
F1 4544698 4544418 0 4544718 0 0 2
Common RateModel Access Underwriting Class Key(table_name; s)
Funktion
IF ( /*Key exists?*/ EXISTS(table(table_name);'Common RateModel Access Table ID Key'(s);'Common RateModel Access ChargeBasedOn Key'(table_name;s);'Common RateModel Access Jurisdiction Key'(table_name;s);'Common RateModel Access Gender Key'(table_name;s);'Underwriting Class Key'(s)) ; çä   // Use Underwriting Class in the search keyçä'Underwriting Class Key'(s) ; çä   // ElseçäIF ( /*try match with wildcard */ EXISTS(table(table_name);'Common RateModel Access Table ID Key'(s);'Common RateModel Access ChargeBasedOn Key'(table_name;s);'Common RateModel Access Jurisdiction Key'(table_name;s);'Common RateModel Access Gender Key'(table_name;s);"*") ; çä     // Use a wildcard for Underwriting Classçä"*" ; çä     // Can't be found even with a wildcardçä"nomatch"çä  )çä)
F1 4544718 4544418 0 4544798 0 0 2
Common RateModel Access Smoke Code Key(table_name; s)
Funktion
IF ( /*Key exists?*/ EXISTS(table(table_name);'Common RateModel Access Table ID Key'(s);'Common RateModel Access ChargeBasedOn Key'(table_name;s);'Common RateModel Access Jurisdiction Key'(table_name;s);'Common RateModel Access Gender Key'(table_name;s);'Common RateModel Access Underwriting Class Key'(table_name;s);'Smoke Code Key'(s)) ; çä   // Use Smoker Code in search keyçä'Smoke Code Key'(s) ; çä   // ElseçäIF ( /*try match with wildcard */ EXISTS(table(table_name);'Common RateModel Access Table ID Key'(s);'Common RateModel Access ChargeBasedOn Key'(table_name;s);'Common RateModel Access Jurisdiction Key'(table_name;s);'Common RateModel Access Gender Key'(table_name;s);'Common RateModel Access Underwriting Class Key'(table_name;s);"*") ; çä     // Use wildcard for Smoker Codeçä"*" ; çä     // Can't be found even with a wildcardçä"nomatch"çä  )çä)
F1 4544798 4544418 0 4544818 0 0 2
Common RateModel Access Band Code Key(table_name; s)
Funktion
IF ( /*Key exists?*/ EXISTS(table(table_name);'Common RateModel Access Table ID Key'(s);'Common RateModel Access ChargeBasedOn Key'(table_name;s);'Common RateModel Access Jurisdiction Key'(table_name;s);'Common RateModel Access Gender Key'(table_name;s);'Common RateModel Access Underwriting Class Key'(table_name;s);'Common RateModel Access Smoke Code Key'(table_name;s);SetParameter("Band_Code";s)) ; çä   // Use Band Code in the search keyçäSetParameter("Band_Code";s) ; çä   // ElseçäIF ( /*try match with wildcard */ EXISTS(table(table_name);'Common RateModel Access Table ID Key'(s);'Common RateModel Access ChargeBasedOn Key'(table_name;s);'Common RateModel Access Jurisdiction Key'(table_name;s);'Common RateModel Access Gender Key'(table_name;s);'Common RateModel Access Underwriting Class Key'(table_name;s);'Common RateModel Access Smoke Code Key'(table_name;s);"*") ; çä     // Use wildcard for Band Codeçä"*" ; çä     // Can't be found even with a wildcard çä"nomatch"çä  )çä)
F1 4544818 4544418 0 4544898 0 0 2
Common RateModel AttainedAge(s)
Funktion
SetParameter("Issue_Age";s) + SetParameter("Duration";s) - 1
F1 4544898 4544418 0 0 0 0 2
Common RateModel SpouseAttainedAge(s)
Funktion
SetParameter("Spouse_Issue_Age";s) + SetParameter("Duration";s) - 1
F1 4544918 4534bc4 4544998 4544f18 0 0 2
--ACORD Lookup Functions--
Funktion

F1 4544998 4544918 0 4544a18 0 0 2
Gender Code Key(s)
Funktion
'TABLE Gender Code'[SetParameter("Gender_Code";s)].characters
F1 4544a18 4544918 0 4544a98 0 0 2
Underwriting Class Key(s)
Funktion
'TABLE Underwriting Class'[SetParameter("Underwriting_Class";s)].characters
F1 4544a98 4544918 0 4544b18 0 0 2
Smoke Code Key(s)
Funktion
'TABLE Smoke Code'[SetParameter("Smoke_Code";s)].characters
F1 4544b18 4544918 0 4544b98 0 0 2
Death Benefit Option Key(s)
Funktion
'TABLE Death Benefit Option'[SetParameter("Death_Benefit_Option";s)].character
F1 4544b98 4544918 0 4544c18 0 0 2
Payment Frequency Key(s)
Funktion
'TABLE Payment Frequency'[SetParameter("Frequency_Code";s)].characters
F1 4544c18 4544918 0 4544c98 0 0 2
Load Type Parm Key(s)
Funktion
'TABLE Load Type Parm'[SetParameter("Load_Type";s)].characters
F1 4544c98 4544918 0 4544d18 0 0 2
State Code Key(s)
Funktion
'TABLE State Code'[SetParameter("State_Code";s)].characters
F1 4544d18 4544918 0 4544d98 0 0 2
Age Calc Type Key(s)
Funktion
'TABLE Age Calc Type'[SetParameter("Age_Calc_Type";s)].characters
F1 4544d98 4544918 0 4544e18 0 0 2
EmploymentClass Code Key(s)
Funktion
'TABLE EmploymentClass Code'[SetParameter("EmploymentClass_Code";s)].EmpClass
F1 4544e18 4544918 0 4544e98 0 0 2
BenefitPeriod Code Key(s)
Funktion
'TABLE BenefitPeriod Code'[SetParameter("BenefitPeriod_Code";s)].character
F1 4544e98 4544918 0 1c07a9b 0 0 2
EliminationPeriod In Days Code Key(s)
Funktion
'TABLE EliminationPeriod Code'[SetParameter("EliminationPeriod_Code";s)].ElimDays
F1 1c07a9b 4544918 0 0 0 0 2
Income Option Key(s)
Funktion
SetParameter("Income_Option";s)
F1 4544f18 4534bc4 4544f98 4545498 0 0 2
-- Common Int Rate Table Build Access Keys --
Funktion

F1 4544f98 4544f18 0 4545018 0 0 2
Common Guaranteed Interest Rate(tableName; s)
Funktion
LOOKUPX(table(tableName);'Common IntRateModel Access Carrier Code'(s);'Common IntRateModel Access Jurisdiction'(tableName;s);'Common Interest Eff Date'(tableName;s);"Int_Rate")
F1 4545018 4544f18 0 4545098 0 0 2
Common IntRateModel Access Carrier Code(s)
Funktion
SetParameter("Carrier_Code";s)
F1 4545098 4544f18 0 4545118 0 0 2
Common IntRateModel Access Jurisdiction(tableName; s)
Funktion
IF ( /*Key exists?*/ EXISTS(table(tableName);'Rate CarrierCode'(s);'Rate Jurisdiction'(s)) ; çä   // Use State_Code in the search keyçä'Rate Jurisdiction'(s) ; çä   // ElseçäIF ( /*try match with wildcard */ EXISTS(table(tableName);'Rate CarrierCode'(s);"***") ; çä     // Use wildcardçä"***" ; çä     // Can't be found even with wildcardçä"nomatch"çä  )çä)
F1 4545118 4544f18 0 4545198 0 0 2
Common Interest Date Cell(tableName; s)
Funktion
cell(table(tableName);SetParameter("Rate_Ren_Date";s);4)
F1 4545198 4544f18 0 4545218 0 0 2
Common Interest Eff Date(tableName; s)
Funktion
LOOKUPX(table(tableName);'Common IntRateModel Access Carrier Code'(s);'Common IntRateModel Access Jurisdiction'(tableName;s);SetParameter("Issue_Date";s);"Eff_Date")
F1 4545218 4544f18 0 4545298 0 0 2
Common Interest Rate Cell(tableName; s)
Funktion
cell(table(tableName);SetParameter("Rate_Ren_Date";s);6)
F1 4545298 4544f18 0 4545318 0 0 2
Common Interest Rate Eff Date(tableName; s)
Funktion
LOOKUPX(table(tableName);'Common IntRateModel Access Carrier Code'(s);'Common IntRateModel Access Jurisdiction'(tableName;s);SetParameter("Rate_Eff_Date";s);"Rec_Per_Start_Date")
F1 4545318 4544f18 0 4545398 0 0 2
Common Interest Rate(tableName; s)
Funktion
LOOKUPX(table(tableName);'Common IntRateModel Access Carrier Code'(s);'Common IntRateModel Access Jurisdiction'(tableName;s);'Common Interest Rate Eff Date'(tableName;s);SetParameter("Rate_Ren_Date";s);"Int_Rate")
F1 4545398 4544f18 0 4545418 0 0 2
Common Number of Rates(tableName; s)
Funktion
LOOKUPX(table(tableName);'Common IntRateModel Access Carrier Code'(s);'Common IntRateModel Access Jurisdiction'(tableName;s);'Common Interest Rate Eff Date'(tableName;s); //'SetParameter'("Rate_Ren_Date";s);çä'LOOKUP Date'('Rate TransEffDate'(s));"Sequence")
F1 4545418 4544f18 0 0 0 0 2
Common Interest OpenDate(tableName; s)
Funktion
LOOKUPX(table(tableName);'Rate CarrierCode'(s);'Common IntRateModel Access Jurisdiction'(tableName;s);'LOOKUP Date'('Rate Open Date'(s));"Rec_Per_Start_Date")
F1 4545498 4534bc4 4545518 4582f88 0 0 2
-- Common Int Rate Access Functions --
Funktion

F1 4545518 4545498 4545598 4545c18 0 0 2
-- Int Rate Vector Readability --
Funktion

F1 4545598 4545518 0 4545618 0 0 2
Rate CarrierCode(s)
Funktion
E_(V_CONSTRUCT(s);3)
F1 4545618 4545518 0 4545698 0 0 2
Rate RateType(s)
Funktion
E_(V_CONSTRUCT(s);1)
F1 4545698 4545518 0 4545718 0 0 2
Rate End Period(s)
Funktion
E_(V_CONSTRUCT(s);6)
F1 4545718 4545518 0 4545798 0 0 2
Rate Existing Rates Ind(s)
Funktion
E_(V_CONSTRUCT(s);12)
F1 4545798 4545518 0 4545818 0 0 2
Rate Guar Duration(s)
Funktion
E_(V_CONSTRUCT(s);10)
F1 4545818 4545518 0 4545898 0 0 2
Rate GuarType(s)
Funktion
E_(V_CONSTRUCT(s);5)
F1 4545898 4545518 0 4545918 0 0 2
Rate Jurisdiction(s)
Funktion
E_(V_CONSTRUCT(s);4)
F1 4545918 4545518 0 4545998 0 0 2
Rate TransEffDate(s)
Funktion
'Reverse Table Date'(E_(V_CONSTRUCT(s);2))
F1 4545998 4545518 0 4545a18 0 0 2
Rate Start Year(s)
Funktion
E_(V_CONSTRUCT(s);11)
F1 4545a18 4545518 0 4545a98 0 0 2
Rate Start Period(s)
Funktion
E_(V_CONSTRUCT(s);7)
F1 4545a98 4545518 0 4545b18 0 0 2
Rate Policy EffDate(s)
Funktion
'Reverse Table Date'(E_(V_CONSTRUCT(s);9))
F1 4545b18 4545518 0 4545b98 0 0 2
Rate Open Date(s)
Funktion
'Reverse Table Date'(E_(V_CONSTRUCT(s);8))
F1 4545b98 4545518 0 0 0 0 2
Rate GuarSubType(s)
Funktion
E_(V_CONSTRUCT(s);13)
F1 4545c18 4545498 4581f08 4582288 0 0 2
-- Misc --
Funktion

F1 4581f08 4545c18 0 4581f88 0 0 2
Rate Compare Renewal to Guarantee(yearIndex; counter; s)
Funktion
IF (yearIndex <> -1 ; çä  'DATE Is Date1 Less Than Date2'('Rate Open Date'(s);'Rate SubAccount RatesRenewalDate'(yearIndex;0;s)) && 'DATE Is Date1 Less Than Date2'('Rate GuaranteeDate'(s);'Rate SubAccount RatesRenewalDate'(yearIndex;0;s)) ; çä  'DATE Is Date1 Less Than Date2'('Rate GuaranteeDate'(s);'Reverse Table Date'(cell(table("TABLE Current Interest Rate");counter;4)))çä)
F1 4581f88 4545c18 0 4582008 0 0 2
Rate SubAccount monthIndex(counter; s)
Funktion
IF ('Rate GuarType'(s) EQUAL "1000500019" || 'Rate GuarType'(s) EQUAL "1000500011" || 'Rate GuarType'(s) EQUAL "1000500003" || 'Rate GuarType'(s) EQUAL "1000500013" ; çä  ABS(MONTH('Increase Date By Months'('Rate Last Guarantee Date'(0;s);'Rate Guar Duration'(s) * counter)) - MONTH('Rate Open Date'(s))) ; çä  ABS(MONTH('Increase Date By Months'('Rate Last Guarantee Date'(0;s);'Rate Guar Duration'(s) * counter)) - MONTH('Rate Policy EffDate'(s)))çä)
F1 4582008 4545c18 4582088 4582188 0 0 2
Rate SubAccount yearIndex(counter; s)
Funktion
IF ('Rate GuarType'(s) ALIKE 'GEN Vector Blank' ; çä  'Duration Year'('Increase Date By Months'('Rate Last Guarantee Date'(0;s);'Rate Guar Duration'(s) * counter);'Rate Policy EffDate'(s)) - 1 ; çä  CASE('Rate GuarType'(s);çä    1000500019;1000500011;1000500003 : 'Duration Year'('Increase Date By Months'( //'Rate Policy EffDate'(s);çä//'Calc Last Anniversary Date'('Rate Policy EffDate'(s); 'Rate Open Date'(s));çä'Rate Last Guarantee Date'(0;s);'Rate Guar Duration'(s) * counter);'Rate Open Date'(s)) - 1;çä    1000500013 : counter;çä     : 'Duration Year'('Increase Date By Months'( //'Rate Policy EffDate'(s);çä//'Calc Last Anniversary Date'('Rate Policy EffDate'(s); 'Rate Open Date'(s));çä'Rate Last Guarantee Date'(0;s);'Rate Guar Duration'(s) * counter);'Rate Policy EffDate'(s)) - 1)çäçä)
F1 4582088 4582008 4582108 0 0 0 2
Rate Last Guarantee Date(i; s)
Funktion
IF ('DATE Is Date1 Less Than or Equal to Date2'('Increase Date By Months'('Rate Policy EffDate'(s);'Rate Guar Duration'(s) * i);'Rate Open Date'(s)) ; çä  'Rate Last Guarantee Date'(i + 1;s) ; çä  CASE('Rate GuarType'(s);çä    "1000500019";"1000500011";"1000500003" : 'Rate Open Date'(s);çä    "1000500013" : 'Rate MFND date'(s);çä     : 'Increase Date By Months'('Rate Policy EffDate'(s);'Rate Guar Duration'(s) * (i - 1)))çäçä)
F1 4582108 4582088 0 0 0 0 2
Rate MFND date(s)
Funktion
CASE('Rate GuarSubType'(s);çä  1000500001 : 'Start of the Month Date'('Rate Open Date'(s));çä   //- Month Beginningçä1000500002 : 'Start of Next Month Date'('Rate Open Date'(s));çä   //- Month Endçä1000500003 : 'Last CalendarQtr Beg'('Rate Open Date'(s));çä   //- Quarter Beginningçä1000500004 : 'Next CalendarQtr Beg'('Rate Open Date'(s));çä   //- Quarter Endçä : "")çä
F1 4582188 4545c18 0 4582208 0 0 2
Rate Renewal Method(s)
Funktion
IF ('Rate GuarType'(s) ALIKE 'GEN Vector Blank' ; çä  0 ; çä  CASE('Rate GuarType'(s);çä    1000500012;1000500004;1000500008;1000500016;1000500001;1000500009;1000500006;1000500002;1000500010;1000500014 : "Annual";çä    1000500020;1000500024;1000500017;1000500018;1000500022 : "Counter";çä    1000500013;1000500011;1000500003;1000500007;1000500019;1000500015;1000500023 : "Repeating";çä     : 0)çäçä)
F1 4582208 4545c18 0 0 0 0 2
Start of the Month Date(date1)
Funktion
MONTH(date1) & "/" & "01" & "/" & YEAR(date1)
F1 4582288 4545498 4582308 0 0 0 2
Rate Vector(s)
Funktion
CASE('Rate Renewal Method'(s);çä  "Annual" : 'Rate Vector Annual Rec'('Rate End Period'(s) - 1;s;"");çä  "Counter" : 'Rate Vector Continuous Rec'('Rate End Period'(s);s;"");çä  "Repeating" : 'Rate Vector Repeating Rec'('Rate End Period'(s);s;""))çä
F1 4582308 4582288 0 4582388 0 0 2
Rate Vector Repeating Rec(counter; s; vectorRates)
Funktion
IF (counter = 'Rate Start Period'(s) ; çä  V_(V_('Rate Open Date'(s);'Rate with Date'('Rate SubAccount RatesRenewalDate'('Rate SubAccount yearIndex'(counter;s);'Rate SubAccount monthIndex'(counter;s);s);s))) ; çä  V_INSERT('Rate Vector Repeating Rec'(counter - 1;s;vectorRates);V_('Increase Date By Months'('Rate Last Guarantee Date'(0;s);'Rate Guar Duration'(s) * counter);'Rate with Date'('Rate SubAccount RatesRenewalDate'('Rate SubAccount yearIndex'(counter;s);'Rate SubAccount monthIndex'(counter;s);s);s));V_LENGTH('Rate Vector Repeating Rec'(counter - 1;s;vectorRates)))çä)
F1 4582388 4582288 4582408 4582488 0 0 2
Rate Vector Continuous Rec(counter; s; vectorRates)
Funktion
IF (counter = 'Rate Start Period'(s) && 'Rate Existing Rates Ind'(s) = 0 ; çä  IF ('Rate GuarPeriodInd Continuous'(counter;s;vectorRates) ; çä    V_(V_REPLACE('Rate with Counter'('Rate Start Period'(s);s);'DATE Max of Date1 and Date2'('Reverse Table Date'(E_('Rate with Counter'(counter;s);0));'Rate Open Date'(s)); //'Reverse Table Date'(E_('Rate with Counter'('Rate Start Period'(s); s);0));çä0)) ; çä    V_(V_('DATE Max of Date1 and Date2'('Rate SubAccount RatesRenewalDate'(0;0;s);'Rate Open Date'(s));'Rate with Date'('Rate SubAccount RatesRenewalDate'(0;0;s);s));V_('Rate GuaranteeDate'(s);'Rate with Date'('Rate GuaranteeDate'(s);s)))çä  ) ; çäIF (counter = 'Rate Start Period'(s) ; çä  V_(V_REPLACE('Rate with Counter'(counter;s);'Reverse Table Date'(E_('Rate with Counter'(counter;s);0));0)) ; çä  IF ('Rate Compare Renewal to Guarantee'(-1;counter;s) ; çä    V_INSERT('Rate Vector Continuous Rec'(counter - 1;s;vectorRates);V_REPLACE('Rate with Counter'(counter;s);'Reverse Table Date'(E_('Rate with Counter'(counter;s);0));0);V_LENGTH('Rate Vector Continuous Rec'(counter - 1;s;vectorRates))) ; çä    'Rate Vector Continuous Rec'(counter - 1;s;vectorRates)çä  )çä)çä)
F1 4582408 4582388 0 0 0 0 2
Rate GuarPeriodInd Continuous(yearIndex; s; vectorRates)
Funktion
'DATE Is Date1 Greater than or equal Date2'('DATE Max of Date1 and Date2'('Rate SubAccount RatesRenewalDate'('Rate Start Year'(s) - 1;0;s);'Rate Open Date'(s));'Rate GuaranteeDate'(s)) || 'DATE Is Date1 Less Than or Equal to Date2'('Rate TransEffDate'(s);'Increase Date By Months'('Rate Policy EffDate'(s);'Rate Guar Duration'(s)))
F1 4582488 4582288 4582508 4582588 0 0 2
Rate Vector Annual Rec(yearIndex; s; vectorRates)
Funktion
IF (yearIndex < 'Rate Start Period'(s) && NOT('Rate Existing Rates Ind'(s)) ; çä   //then lookup first and guarantee rate if applicableçäIF ('Rate GuarPeriodInd'(yearIndex;s;vectorRates) ; çä    V_(V_('DATE Max of Date1 and Date2'('Rate SubAccount RatesEffectiveDate'(yearIndex;0;s);'Rate Open Date'(s));'Rate with Date'('Rate SubAccount RatesRenewalDate'(yearIndex;0;s);s))) ; çä    V_( //Open date and rateçäV_('DATE Max of Date1 and Date2'('Rate SubAccount RatesEffectiveDate'(yearIndex;0;s);'Rate Open Date'(s));'Rate with Date'('Rate SubAccount RatesRenewalDate'(yearIndex;0;s);s)); //Guarantee period end date plus new rateçäV_('Rate GuaranteeDate'(s);'Rate with Date'('Rate SubAccount RatesRenewalDate'(yearIndex + 'Rate GuaranteeIndex'(s);0;s);s)))çä  ) ; çä //else lookup next rateçäIF (yearIndex < 'Rate Start Period'(s) ; çä  'GEN Vector Blank' ; çä  IF ('Rate Compare Renewal to Guarantee'(yearIndex;0;s) ; çä    V_INSERT('Rate Vector Annual Rec'(yearIndex - 1;s;vectorRates);V_('Rate SubAccount RatesEffectiveDate'(yearIndex;0;s);'Rate with Date'('Rate SubAccount RatesRenewalDate'(yearIndex;0;s);s));V_LENGTH('Rate Vector Annual Rec'(yearIndex - 1;s;vectorRates))) ; çä    'Rate Vector Annual Rec'(yearIndex - 1;s;vectorRates)çä  )çä)çä)
F1 4582508 4582488 0 0 0 0 2
Rate GuarPeriodInd(yearIndex; s; vectorRates)
Funktion
 //Is the renewal date after the guarantee periodçä'DATE Is Date1 Greater than or equal Date2'('DATE Max of Date1 and Date2'('Rate SubAccount RatesRenewalDate'(yearIndex;0;s);'Rate Open Date'(s));'Rate GuaranteeDate'(s)) ||  //Does the transeff date fall within the guarantee periodçä'DATE Is Date1 Less Than or Equal to Date2'('Rate TransEffDate'(s);'Increase Date By Months'('Rate SubAccount RatesEffectiveDate'(yearIndex;0;s);'Rate Guar Duration'(s)))
F1 4582588 4582288 4582608 4582a88 0 0 2
Rate SubAccount RatesRenewalDate(yearIndex; monthIndex; s)
Funktion
IF ('Rate GuarType'(s) ALIKE 'GEN Vector Blank' ; çä  'Rate TransEffDate'(s) ; çä  CASE('Rate GuarType'(s);çä    1000500007;1000500005;1000500004;1000500008;1000500001;1000500006;1000500002;1000500017 : 'Rate Last Anniversary Rates Renewal Date'(yearIndex;s);çä    1000500013 : 'Rate Calendar Month Rates Renewal Date'(yearIndex;monthIndex;s);çä    1000500011 : 'Rate Rep Calendar Year Rates Renewal Date'(yearIndex;monthIndex;s);çä    1000500003 : 'Rate Rep Anniversary Year Rates Renewal Date'(yearIndex;monthIndex;s);çä    1000500009;1000500015;1000500016;1000500012;1000500014;1000500010 : 'Rate Last Calendar Year Rates Renewal Date'(yearIndex;s);çä    1000500019;1000500020;1000500024;1000500018;1000500022 : 'Rate OpenDate Renewal Date'(yearIndex;monthIndex;s);çä    1000500023 : 'Rate IssueDate Renewal Date'(yearIndex;monthIndex;s);çä     //"ISSUE", "REPET":â'Rate IssueDate Renewal Date'(yearIndex; monthIndex; s);çä : 'Rate TransEffDate'(s))çäçä)
F1 4582608 4582588 0 4582708 0 0 2
Rate OpenDate Renewal Date(yearIndex; monthIndex; s)
Funktion
'Increase Date By Months'('Increase Date By Years'('Rate Open Date'(s);yearIndex);monthIndex)
F1 4582708 4582588 0 4582788 0 0 2
Rate Last Calendar Year Rates Renewal Date(yearIndex; s)
Funktion
IF (yearIndex = 0 && 'Rate GuarType'(s) EQUAL "1000500014" ; çä  'Rate Open Date'(s) ; çä  'DATE Last Calendar Year Beginning'('Increase Date By Years'('Rate Policy EffDate'(s);yearIndex + IF ('Rate GuarType'(s) EQUAL "1000500015" ; çä    0 ; çä    'Years Between Dates'('Rate Open Date'(s);'Rate Policy EffDate'(s))çä  ) //çä + IF (yearIndex = 0 ; çä  'Rate YearIndex'(s) ; çä  0çä)))çä)
F1 4582788 4582588 0 4582808 0 0 2
Rate Last Anniversary Rates Renewal Date(yearIndex; s)
Funktion
IF (yearIndex = 0 && 'Rate GuarType'(s) EQUAL "1000500006" ; çä  'Rate Open Date'(s) ; çä  'Calc Last Anniversary Date'('Rate Policy EffDate'(s);'Increase Date By Years'('Rate Open Date'(s);yearIndex))çä)
F1 4582808 4582588 0 4582908 0 0 2
Rate IssueDate Renewal Date(yearIndex; monthIndex; s)
Funktion
'Increase Date By Months'('Increase Date By Years'('Rate Policy EffDate'(s);yearIndex);monthIndex)
F1 4582908 4582588 0 4582988 0 0 2
Rate Rep Calendar Year Rates Renewal Date(yearIndex; monthIndex; s)
Funktion
'DATE Last Calendar Year Beginning'('Increase Date By Months'('Increase Date By Years'('Rate Open Date'(s);yearIndex);monthIndex))
F1 4582988 4582588 0 4582a08 0 0 2
Rate Rep Anniversary Year Rates Renewal Date(yearIndex; monthIndex; s)
Funktion
'Calc Last Anniversary Date'('Rate Policy EffDate'(s);'Increase Date By Months'('Increase Date By Years'('Rate Open Date'(s);yearIndex);monthIndex))
F1 4582a08 4582588 0 0 0 0 2
Rate Calendar Month Rates Renewal Date(yearIndex; monthIndex; s)
Funktion
IF (yearIndex = 'Rate Start Period'(s) ; çä  'Rate Open Date'(s) ; çä  IF ('Rate GuarSubType'(s) EQUAL "1000500003" || 'Rate GuarSubType'(s) EQUAL "1000500004" ; çä    'Increase Date By Months'('Rate Last Guarantee Date'(0;s);'Rate Guar Duration'(s) * yearIndex) ; çä    'Increase Date By Months'('Rate Last Guarantee Date'(0;s);'Rate Guar Duration'(s) * yearIndex)çä  )çä)
F1 4582a88 4582288 0 4582b08 0 0 2
Rate SubAccount RatesEffectiveDate(yearIndex; monthIndex; s)
Funktion
IF ('Rate GuarType'(s) ALIKE 'GEN Vector Blank' ; çä  'Rate TransEffDate'(s) ; çä  CASE('Rate GuarType'(s);çä    1000500004;1000500008;1000500001;1000500006;1000500002 : 'Rate Last Anniversary Rates Renewal Date'(yearIndex;s);çä    1000500009;1000500016;1000500012;1000500014;1000500010 : 'Rate Last Calendar Year Rates Renewal Date'(yearIndex;s);çä    1000500019;1000500013;1000500020;1000500024;1000500018;1000500022 : 'Rate OpenDate Renewal Date'(yearIndex;monthIndex;s);çä     //"ISSUE", "REPET":â'Rate IssueDate Renewal Date'(yearIndex; monthIndex; s);çä : 'Rate TransEffDate'(s))çäçä)
F1 4582b08 4582288 0 4582b88 0 0 2
Rate with Counter(counter; s)
Funktion
V_(cell(table("TABLE Current Interest Rate");counter;4);MAX(IF ('Rate RateType'(s) ALIKE "ADMINGUARINTRATES" ; çä  0 ; çä  cell(table("TABLE Current Interest Rate");counter;6)çä);LOOKUPX(table("TABLE Guaranteed Interest Rate");'Rate CarrierCode'(s);'Common IntRateModel Access Jurisdiction'("TABLE Guaranteed Interest Rate";s);'LOOKUP Date'('Rate Policy EffDate'(s)); //CELL(TABLE("TABLE Current Interest Rate"); counter; 4);çä"Int_Rate")))
F1 4582b88 4582288 0 4582c08 0 0 2
Rate with Date(date1; s)
Funktion
IF (('Rate GuarType'(s) EQUAL "1000500020" || 'Rate GuarType'(s) EQUAL "1000500004" || 'Rate GuarType'(s) EQUAL "1000500012") && 'DATE Is Date1 Less Than or Equal to Date2'(date1;'Rate GuaranteeDate'(s)) ; çä  IF ('Rate RateType'(s) ALIKE "ADMINGUARINTRATES" ; çä    0 ; çä    LOOKUPX(table("TABLE Current Interest Rate");'Rate CarrierCode'(s);'Common IntRateModel Access Jurisdiction'("TABLE Current Interest Rate";s);'Common Interest OpenDate'("TABLE Current Interest Rate";s);MAX('LOOKUP Date'(date1);'Common Interest OpenDate'("TABLE Current Interest Rate";s));"Int_Rate")çä  ) ; çäMAX(IF ('Rate RateType'(s) ALIKE "ADMINGUARINTRATES" ; çä  0 ; çä  LOOKUPX(table("TABLE Current Interest Rate");'Rate CarrierCode'(s);'Common IntRateModel Access Jurisdiction'("TABLE Current Interest Rate";s);'Common Interest OpenDate'("TABLE Current Interest Rate";s);MAX('LOOKUP Date'(date1);'Common Interest OpenDate'("TABLE Current Interest Rate";s));"Int_Rate")çä);LOOKUPX(table("TABLE Guaranteed Interest Rate");'Rate CarrierCode'(s);'Common IntRateModel Access Jurisdiction'("TABLE Guaranteed Interest Rate";s);'LOOKUP Date'('Rate Policy EffDate'(s));"Int_Rate"))çä)
F1 4582c08 4582288 0 4582c88 0 0 2
Rate Interest Rec Date(tablename; date1; s)
Funktion
LOOKUPX(table(tableName);'Common IntRateModel Access Carrier Code'(s);'Common IntRateModel Access Jurisdiction'(tableName;s);'LOOKUP Date'(date1);"Rec_Per_Start_Date")
F1 4582c88 4582288 0 4582d08 0 0 2
TEST DATEFUNC(date1)
Funktion
MONTH(date1)
F1 4582d08 4582288 4582d88 0 0 0 2
--Date functions
Funktion

F1 4582d88 4582d08 0 4582e08 0 0 2
Rate GuaranteeDate(s)
Funktion
IF ('Rate GuarType'(s) ALIKE 'GEN Vector Blank' ; çä  'Rate Open Date'(s) ; çä  CASE('Rate GuarType'(s);çä    1000500009;1000500017;1000500001 : 'Increase Date By Months'('Calc Last Anniversary Date'('Rate Policy EffDate'(s);'Rate Open Date'(s));'Rate Guar Duration'(s));çä    1000500019;1000500012;1000500004;1000500023;1000500020 : 'Increase Date By Months'('Rate Policy EffDate'(s);'Rate Guar Duration'(s));çä    1000500006;1000500014;1000500002;1000500018;1000500010;1000500022 : 'Increase Date By Months'('Rate Open Date'(s);'Rate Guar Duration'(s));çä     : 'Rate Open Date'(s) //1çä)çäçä)
F1 4582e08 4582d08 0 4582e88 0 0 2
Rate GuaranteeIndex(s)
Funktion
IF ('Rate GuarType'(s) ALIKE 'GEN Vector Blank' ; çä  0 ; çä  CASE('Rate GuarType'(s);çä     //Policyçä1000500002 : IF ('Rate DayMonth'('Rate Policy EffDate'(s);'Rate GuaranteeDate'(s)) && 'Rate DayMonth'('Rate Open Date'(s);'Rate Policy EffDate'(s)) ; çä      1 ; çä      0çä    );çä   //Calendarçä1000500010 : IF (YEAR('Rate GuaranteeDate'(s)) > YEAR('Rate Open Date'(s)) ; çä    YEAR('Rate GuaranteeDate'(s)) - YEAR('Rate Open Date'(s)) ; çä    0çä  );çä1000500001;1000500009 : ('Rate Guar Duration'(s) DIV 12);çä : 0)çäçä)
F1 4582e88 4582d08 0 4582f08 0 0 2
Rate YearIndex(s)
Funktion
IF ('Rate GuarType'(s) ALIKE 'GEN Vector Blank' ; çä  0 ; çä  CASE('Rate GuarType'(s);çä    1000500016;1000500008;1000500012;1000500010 : IF ('Rate DayMonth'('Rate Open Date'(s);'Rate Policy EffDate'(s)) ; çä      1 ; çä      0çä    );çä   : 0)çäçä)
F1 4582f08 4582d08 0 0 0 0 2
Rate DayMonth(date1; date2)
Funktion
IF (MONTH(date1) < MONTH(date2) ; çä  1 ; çä  IF (MONTH(date1) > MONTH(date2) ; çä    0 ; çä    IF (DAY(date1) < DAY(date2) ; çä      1 ; çä      0çä    )çä)çä)
F1 4582f88 4534bc4 4583008 49f6d8ef 0 0 2
-- Banded Surrender Charges Band Entry Retrieval  --
Funktion

F1 4583008 4582f88 4583088 0 0 0 2
Common Banded Rate Vector(tableName; s)
Funktion
'GEN Vector Unique Elements'(VECTORX(tableRow;1;TABROWS(table(tableName));IF ('Common Table Row Key'(#tableRow;tableName) ALIKE 'Concat Table Lookup Keys'(tableName;s) ; çä  cell(table(tableName);#tableRow;7) ; çä  VOIDçä));0;"";0;0)
F1 4583088 4583008 0 4583108 0 0 2
Concat Table Lookup Keys(tableName; s)
Funktion
'Common RateModel Access Table ID Key'(s) & 'Common RateModel Access ChargeBasedOn Key'(tableName;s) & 'Common RateModel Access Jurisdiction Key'(tableName;s) & 'Common RateModel Access Gender Key'(tableName;s) & 'Common RateModel Access Underwriting Class Key'(tableName;s) & 'Common RateModel Access Smoke Code Key'(tableName;s)
F1 4583108 4583008 4583188 0 0 0 2
Common Table Row Key(tableRow; tableName)
Funktion
'Common Table Row Key rec'(tableRow; tableName; V_LENGTH(CELLX(TABLE(tableName); tableRow; "TableIdentity".."Smoke_Code"))-1; "")
F1 4583188 4583108 0 0 0 0 2
Common Table Row Key rec(tableRow; tableName; counter; string)
Funktion
IF(counter < 0;çä çäââstring;çä çäââ'Common Table Row Key rec'(tableRow; tableName; counter-1; string)çäââ&çäââE_(CELLX(TABLE(tableName); tableRow; "TableIdentity".."Smoke_Code"); counter)çäââçä)çä
F1 49f6d8ef 4534bc4 720de516 6eabdd6b 0 0 2
-- Generic Table Access Functions --
Funktion

F1 720de516 49f6d8ef 0 37c22a9b 0 0 2
Table Access 1 Column(tableName; value1; columnName)
Funktion
IF (EXISTS(table(tableName);'Column 1 Value'(tableName;value1)) ; çä  table(tableName)['Column 1 Value'(tableName;value1)](columnName) ; çä   //â"NoRateFound"çäerror("RNF1:NoRateFound " & tablename & "; " & value1)çä)
F1 37c22a9b 49f6d8ef 0 5dfd1170 0 0 2
Table Access 2 Column(tableName; value1; value2; columnName)
Funktion
IF (EXISTS(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2)) ; çä  table(tableName)['Column 1 Value'(tableName;value1); 'Column 2 Value'(tableName;value1;value2)](columnName) ; çä   //â"NoRateFound"çäerror("RNF1:NoRateFound " & tablename & "; " & value1 & "; " & value2)çä)
F1 5dfd1170 49f6d8ef 0 12fa210e 0 0 2
Table Access 3 Column(tableName; value1; value2; value3; columnName)
Funktion
IF (EXISTS(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);'Column 3 Value'(tableName;value1;value2;value3)) ; çä  table(tableName)['Column 1 Value'(tableName;value1); 'Column 2 Value'(tableName;value1;value2); 'Column 3 Value'(tableName;value1;value2;value3)](columnName) ; çä   //â"NoRateFound"çäerror("RNF1:NoRateFound " & tablename & "; " & value1 & "; " & value2 & "; " & value3)çä)
F1 12fa210e 49f6d8ef 0 318fa3da 0 0 2
Table Access 4 Column(tableName; value1; value2; value3; value4; columnName)
Funktion
IF (EXISTS(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);'Column 3 Value'(tableName;value1;value2;value3);'Column 4 Value'(tableName;value1;value2;value3;value4)) ; çä  table(tableName)['Column 1 Value'(tableName;value1); 'Column 2 Value'(tableName;value1;value2); 'Column 3 Value'(tableName;value1;value2;value3); 'Column 4 Value'(tableName;value1;value2;value3;value4)](columnName) ; çä   //â"NoRateFound"çäerror("RNF1:NoRateFound " & tablename & "; " & value1 & "; " & value2 & "; " & value3 & "; " & value4)çä)
F1 318fa3da 49f6d8ef 0 3ca66add 0 0 2
Table Access 5 Column(tableName; value1; value2; value3; value4; value5; columnName)
Funktion
IF (EXISTS(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);'Column 3 Value'(tableName;value1;value2;value3);'Column 4 Value'(tableName;value1;value2;value3;value4);'Column 5 Value'(tableName;value1;value2;value3;value4;value5)) ; çä  table(tableName)['Column 1 Value'(tableName;value1); 'Column 2 Value'(tableName;value1;value2); 'Column 3 Value'(tableName;value1;value2;value3); 'Column 4 Value'(tableName;value1;value2;value3;value4); 'Column 5 Value'(tableName;value1;value2;value3;value4;value5)](columnName) ; çä   //â"NoRateFound"çä//   error("RNF1:" &tablename&"; "&value1&"; "&value2&"; "&value3&"; "&value4&"; "&value5)çäerror("RNF1:NoRateFound " & tablename & "; " & value1 & "; " & value2 & "; " & value3 & "; " & value4 & "; " & value5)çä)
F1 3ca66add 49f6d8ef 0 24700089 0 0 2
Table Access 6 Column(tableName; value1; value2; value3; value4; value5; value6; columnName)
Funktion
IF (EXISTS(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);'Column 3 Value'(tableName;value1;value2;value3);'Column 4 Value'(tableName;value1;value2;value3;value4);'Column 5 Value'(tableName;value1;value2;value3;value4;value5);'Column 6 Value'(tableName;value1;value2;value3;value4;value5;value6)) ; çä  table(tableName)['Column 1 Value'(tableName;value1); 'Column 2 Value'(tableName;value1;value2); 'Column 3 Value'(tableName;value1;value2;value3); 'Column 4 Value'(tableName;value1;value2;value3;value4); 'Column 5 Value'(tableName;value1;value2;value3;value4;value5); 'Column 6 Value'(tableName;value1;value2;value3;value4;value5;value6)](columnName) ; çä   //â"NoRateFound" çäerror("RNF1:NoRateFound " & tablename & "; " & value1 & "; " & value2 & "; " & value3 & "; " & value4 & "; " & value5 & "; " & value6)çä)
F1 24700089 49f6d8ef 0 4cade4fe 0 0 2
Table Access 7 Column(tableName; value1; value2; value3; value4; value5; value6; value7; columnName)
Funktion
IF (EXISTS(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);'Column 3 Value'(tableName;value1;value2;value3);'Column 4 Value'(tableName;value1;value2;value3;value4);'Column 5 Value'(tableName;value1;value2;value3;value4;value5);'Column 6 Value'(tableName;value1;value2;value3;value4;value5;value6);'Column 7 Value'(tableName;value1;value2;value3;value4;value5;value6;value7)) ; çä  table(tableName)['Column 1 Value'(tableName;value1); 'Column 2 Value'(tableName;value1;value2); 'Column 3 Value'(tableName;value1;value2;value3); 'Column 4 Value'(tableName;value1;value2;value3;value4); 'Column 5 Value'(tableName;value1;value2;value3;value4;value5); 'Column 6 Value'(tableName;value1;value2;value3;value4;value5;value6); 'Column 7 Value'(tableName;value1;value2;value3;value4;value5;value6;value7)](columnName) ; çä   //â"NoRateFound"çäerror("RNF1:NoRateFound " & tablename & "; " & value1 & "; " & value2 & "; " & value3 & "; " & value4 & "; " & value5 & "; " & value6 & "; " & value7)çä)
F1 4cade4fe 49f6d8ef 0 241d2fca 0 0 2
Table Access 8 Column(tableName; value1; value2; value3; value4; value5; value6; value7; value8; columnName)
Funktion
IF (EXISTS(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);'Column 3 Value'(tableName;value1;value2;value3);'Column 4 Value'(tableName;value1;value2;value3;value4);'Column 5 Value'(tableName;value1;value2;value3;value4;value5);'Column 6 Value'(tableName;value1;value2;value3;value4;value5;value6);'Column 7 Value'(tableName;value1;value2;value3;value4;value5;value6;value7);'Column 8 Value'(tableName;value1;value2;value3;value4;value5;value6;value7;value8)) ; çä  table(tableName)['Column 1 Value'(tableName;value1); 'Column 2 Value'(tableName;value1;value2); 'Column 3 Value'(tableName;value1;value2;value3); 'Column 4 Value'(tableName;value1;value2;value3;value4); 'Column 5 Value'(tableName;value1;value2;value3;value4;value5); 'Column 6 Value'(tableName;value1;value2;value3;value4;value5;value6); 'Column 7 Value'(tableName;value1;value2;value3;value4;value5;value6;value7); 'Column 8 Value'(tableName;value1;value2;value3;value4;value5;value6;value7;value8)](columnName) ; çä   //â"NoRateFound"çäerror("RNF1:NoRateFound " & tablename & "; " & value1 & "; " & value2 & "; " & value3 & "; " & value4 & "; " & value5 & "; " & value6 & "; " & value7 & "; " & value8)çä)
F1 241d2fca 49f6d8ef 2917e6d0 0 0 0 2
Table Access 9 Column(tableName; value1; value2; value3; value4; value5; value6; value7; value8; value9; columnName)
Funktion
IF (EXISTS(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);'Column 3 Value'(tableName;value1;value2;value3);'Column 4 Value'(tableName;value1;value2;value3;value4);'Column 5 Value'(tableName;value1;value2;value3;value4;value5);'Column 6 Value'(tableName;value1;value2;value3;value4;value5;value6);'Column 7 Value'(tableName;value1;value2;value3;value4;value5;value6;value7);'Column 8 Value'(tableName;value1;value2;value3;value4;value5;value6;value7;value8);'Column 9 Value'(tableName;value1;value2;value3;value4;value5;value6;value7;value8;value9)) ; çä  table(tableName)['Column 1 Value'(tableName;value1); 'Column 2 Value'(tableName;value1;value2); 'Column 3 Value'(tableName;value1;value2;value3); 'Column 4 Value'(tableName;value1;value2;value3;value4); 'Column 5 Value'(tableName;value1;value2;value3;value4;value5); 'Column 6 Value'(tableName;value1;value2;value3;value4;value5;value6); 'Column 7 Value'(tableName;value1;value2;value3;value4;value5;value6;value7); 'Column 8 Value'(tableName;value1;value2;value3;value4;value5;value6;value7;value8); 'Column 9 Value'(tableName;value1;value2;value3;value4;value5;value6;value7;value8;value9)](columnName) ; çä   //â"NoRateFound"çäerror("RNF1:NoRateFound " & tablename & "; " & value1 & "; " & value2 & "; " & value3 & "; " & value4 & "; " & value5 & "; " & value6 & "; " & value7 & "; " & value8 & "; " & value9)çä)
F1 2917e6d0 241d2fca 0 1aa2c393 0 0 2
Column 1 Value(tableName; value1)
Funktion
IF (EXISTS(table(tableName);value1) ; çä  value1 ; çä  IF (EXISTS(table(tableName);"*") ; çä    "*" ; çä    IF (ISNUMBER(value1) && V_LENGTH(value1) = 0 ; çä      LOOKUPX(table(tableName);value1;cell(table(tableName);0;1)) ; çä      "NoRateFound"çä    )çä)çä)
F1 1aa2c393 241d2fca 0 5648d939 0 0 2
Column 2 Value(tableName; value1; value2)
Funktion
IF (EXISTS(table(tableName);'Column 1 Value'(tableName;value1);value2) ; çä  value2 ; çä  IF (EXISTS(table(tableName);'Column 1 Value'(tableName;value1);"*") ; çä    "*" ; çä    IF (ISNUMBER(value2) && V_LENGTH(value2) = 0 && ('Column 1 Value'(tableName;value1) NOTALIKE "NoRateFound") ; çä      LOOKUPX(table(tableName);'Column 1 Value'(tableName;value1);value2;cell(table(tableName);0;2)) ; çä      "NoRateFound"çä    )çä)çä)
F1 5648d939 241d2fca 0 5bfb1650 0 0 2
Column 3 Value(tableName; value1; value2; value3)
Funktion
IF (EXISTS(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);value3) ; çä  value3 ; çä  IF (EXISTS(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);"*") ; çä    "*" ; çä    IF (ISNUMBER(value3) && V_LENGTH(value3) = 0 && ('Column 2 Value'(tableName;value1;value2) NOTALIKE "NoRateFound") ; çä      LOOKUPX(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);value3;cell(table(tableName);0;3)) ; çä      "NoRateFound"çä    )çä)çä)
F1 5bfb1650 241d2fca 0 7e2bbf44 0 0 2
Column 4 Value(tableName; value1; value2; value3; value4)
Funktion
IF (EXISTS(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);'Column 3 Value'(tableName;value1;value2;value3);value4) ; çä  value4 ; çä  IF (EXISTS(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);'Column 3 Value'(tableName;value1;value2;value3);"*") ; çä    "*" ; çä    IF (ISNUMBER(value4) && V_LENGTH(value4) = 0 && ('Column 3 Value'(tableName;value1;value2;value3) NOTALIKE "NoRateFound") ; çä      LOOKUPX(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);'Column 3 Value'(tableName;value1;value2;value3);value4;cell(table(tableName);0;4)) ; çä      "NoRateFound"çä    )çä)çä)
F1 7e2bbf44 241d2fca 0 288dfc66 0 0 2
Column 5 Value(tableName; value1; value2; value3; value4; value5)
Funktion
IF (EXISTS(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);'Column 3 Value'(tableName;value1;value2;value3);'Column 4 Value'(tableName;value1;value2;value3;value4);value5) ; çä  value5 ; çä  IF (EXISTS(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);'Column 3 Value'(tableName;value1;value2;value3);'Column 4 Value'(tableName;value1;value2;value3;value4);"*") ; çä    "*" ; çä    IF (ISNUMBER(value5) && V_LENGTH(value5) = 0 && ('Column 4 Value'(tableName;value1;value2;value3;value4) NOTALIKE "NoRateFound") ; çä      LOOKUPX(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);'Column 3 Value'(tableName;value1;value2;value3);'Column 4 Value'(tableName;value1;value2;value3;value4);value5;cell(table(tableName);0;5)) ; çä      "NoRateFound"çä    )çä)çä)
F1 288dfc66 241d2fca 0 4851dc69 0 0 2
Column 6 Value(tableName; value1; value2; value3; value4; value5; value6)
Funktion
IF (EXISTS(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);'Column 3 Value'(tableName;value1;value2;value3);'Column 4 Value'(tableName;value1;value2;value3;value4);'Column 5 Value'(tableName;value1;value2;value3;value4;value5);value6) ; çä  value6 ; çä  IF (EXISTS(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);'Column 3 Value'(tableName;value1;value2;value3);'Column 4 Value'(tableName;value1;value2;value3;value4);'Column 5 Value'(tableName;value1;value2;value3;value4;value5);"*") ; çä    "*" ; çä    IF (ISNUMBER(value6) && V_LENGTH(value6) = 0 && ('Column 5 Value'(tableName;value1;value2;value3;value4;value5) NOTALIKE "NoRateFound") ; çä      LOOKUPX(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);'Column 3 Value'(tableName;value1;value2;value3);'Column 4 Value'(tableName;value1;value2;value3;value4);'Column 5 Value'(tableName;value1;value2;value3;value4;value5);value6;cell(table(tableName);0;6)) ; çä      "NoRateFound"çä    )çä)çä)
F1 4851dc69 241d2fca 0 118007f4 0 0 2
Column 7 Value(tableName; value1; value2; value3; value4; value5; value6; value7)
Funktion
IF (EXISTS(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);'Column 3 Value'(tableName;value1;value2;value3);'Column 4 Value'(tableName;value1;value2;value3;value4);'Column 5 Value'(tableName;value1;value2;value3;value4;value5);'Column 6 Value'(tableName;value1;value2;value3;value4;value5;value6);value7) ; çä  value7 ; çä  IF (EXISTS(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);'Column 3 Value'(tableName;value1;value2;value3);'Column 4 Value'(tableName;value1;value2;value3;value4);'Column 5 Value'(tableName;value1;value2;value3;value4;value5);'Column 6 Value'(tableName;value1;value2;value3;value4;value5;value6);"*") ; çä    "*" ; çä    IF (ISNUMBER(value7) && V_LENGTH(value7) = 0 && ('Column 6 Value'(tableName;value1;value2;value3;value4;value5;value6) NOTALIKE "NoRateFound") ; çä      LOOKUPX(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);'Column 3 Value'(tableName;value1;value2;value3);'Column 4 Value'(tableName;value1;value2;value3;value4);'Column 5 Value'(tableName;value1;value2;value3;value4;value5);'Column 6 Value'(tableName;value1;value2;value3;value4;value5;value6);value7;cell(table(tableName);0;7)) ; çä      "NoRateFound"çä    )çä)çä)
F1 118007f4 241d2fca 0 69991663 0 0 2
Column 8 Value(tableName; value1; value2; value3; value4; value5; value6; value7; value8)
Funktion
IF (EXISTS(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);'Column 3 Value'(tableName;value1;value2;value3);'Column 4 Value'(tableName;value1;value2;value3;value4);'Column 5 Value'(tableName;value1;value2;value3;value4;value5);'Column 6 Value'(tableName;value1;value2;value3;value4;value5;value6);'Column 7 Value'(tableName;value1;value2;value3;value4;value5;value6;value7);value8) ; çä  value8 ; çä  IF (EXISTS(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);'Column 3 Value'(tableName;value1;value2;value3);'Column 4 Value'(tableName;value1;value2;value3;value4);'Column 5 Value'(tableName;value1;value2;value3;value4;value5);'Column 6 Value'(tableName;value1;value2;value3;value4;value5;value6);'Column 7 Value'(tableName;value1;value2;value3;value4;value5;value6;value7);"*") ; çä    "*" ; çä    IF (ISNUMBER(value8) && V_LENGTH(value8) = 0 && ('Column 7 Value'(tableName;value1;value2;value3;value4;value5;value6;value7) NOTALIKE "NoRateFound") ; çä      LOOKUPX(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);'Column 3 Value'(tableName;value1;value2;value3);'Column 4 Value'(tableName;value1;value2;value3;value4);'Column 5 Value'(tableName;value1;value2;value3;value4;value5);'Column 6 Value'(tableName;value1;value2;value3;value4;value5;value6);'Column 7 Value'(tableName;value1;value2;value3;value4;value5;value6;value7);value8;cell(table(tableName);0;8)) ; çä      "NoRateFound"çä    )çä)çä)
F1 69991663 241d2fca 0 0 0 0 2
Column 9 Value(tableName; value1; value2; value3; value4; value5; value6; value7; value8; value9)
Funktion
IF (EXISTS(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);'Column 3 Value'(tableName;value1;value2;value3);'Column 4 Value'(tableName;value1;value2;value3;value4);'Column 5 Value'(tableName;value1;value2;value3;value4;value5);'Column 6 Value'(tableName;value1;value2;value3;value4;value5;value6);'Column 7 Value'(tableName;value1;value2;value3;value4;value5;value6;value7);'Column 8 Value'(tableName;value1;value2;value3;value4;value5;value6;value7;value8);value9) ; çä  value9 ; çä  IF (EXISTS(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);'Column 3 Value'(tableName;value1;value2;value3);'Column 4 Value'(tableName;value1;value2;value3;value4);'Column 5 Value'(tableName;value1;value2;value3;value4;value5);'Column 6 Value'(tableName;value1;value2;value3;value4;value5;value6);'Column 7 Value'(tableName;value1;value2;value3;value4;value5;value6;value7);'Column 8 Value'(tableName;value1;value2;value3;value4;value5;value6;value7;value8);"*") ; çä    "*" ; çä    IF (ISNUMBER(value9) && V_LENGTH(value9) = 0 && ('Column 8 Value'(tableName;value1;value2;value3;value4;value5;value6;value7;value8) NOTALIKE "NoRateFound") ; çä      LOOKUPX(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);'Column 3 Value'(tableName;value1;value2;value3);'Column 4 Value'(tableName;value1;value2;value3;value4);'Column 5 Value'(tableName;value1;value2;value3;value4;value5);'Column 6 Value'(tableName;value1;value2;value3;value4;value5;value6);'Column 7 Value'(tableName;value1;value2;value3;value4;value5;value6;value7);'Column 8 Value'(tableName;value1;value2;value3;value4;value5;value6;value7;value8);value9;cell(table(tableName);0;9)) ; çä      "NoRateFound"çä    )çä)çä)
F1 6eabdd6b 4534bc4 7c2b4d44 0 0 0 2
-- Generic Table Lookupx Functions --
Funktion

F1 7c2b4d44 6eabdd6b 0 66770a5c 0 0 2
Table Lookupx 1 Column(tableName; value1; columnName)
Funktion
LOOKUPX(table(tableName);value1;columnName)
F1 66770a5c 6eabdd6b 0 5f8c6144 0 0 2
Table Lookupx 2 Column(tableName; value1; value2; columnName)
Funktion
IF (EXISTS(table(tableName);'Column 1 Value'(tableName;value1)) ; çä  LOOKUPX(table(tableName);'Column 1 Value'(tableName;value1);value2;columnName) ; çä   //â"NoRateFound"çäerror("RNF1:NoRateFound " & tablename & "; " & value1 & "; " & value2)çä)
F1 5f8c6144 6eabdd6b 0 6b382dd2 0 0 2
Table Lookupx 3 Column(tableName; value1; value2; value3; columnName)
Funktion
IF (EXISTS(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2)) ; çä  LOOKUPX(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);value3;columnName) ; çä   //â"NoRateFound"çäerror("RNF1:NoRateFound " & tablename & "; " & value1 & "; " & value2 & "; " & value3)çä)
F1 6b382dd2 6eabdd6b 0 2e6a90d7 0 0 2
Table Lookupx 4 Column(tableName; value1; value2; value3; value4; columnName)
Funktion
IF (EXISTS(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);'Column 3 Value'(tableName;value1;value2;value3)) ; çä  LOOKUPX(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);'Column 3 Value'(tableName;value1;value2;value3);value4;columnName) ; çä   //â"NoRateFound"çäerror("RNF1:NoRateFound " & tablename & "; " & value1 & "; " & value2 & "; " & value3 & "; " & value4)çä)
F1 2e6a90d7 6eabdd6b 0 38ce6d25 0 0 2
Table Lookupx 5 Column(tableName; value1; value2; value3; value4; value5; columnName)
Funktion
IF (EXISTS(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);'Column 3 Value'(tableName;value1;value2;value3);'Column 4 Value'(tableName;value1;value2;value3;value4)) ; çä  LOOKUPX(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);'Column 3 Value'(tableName;value1;value2;value3);'Column 4 Value'(tableName;value1;value2;value3;value4);value5;columnName) ; çä   //â"NoRateFound"çä//   error("RNF1:" &tablename&"; "&value1&"; "&value2&"; "&value3&"; "&value4&"; "&value5)çäerror("RNF1:NoRateFound " & tablename & "; " & value1 & "; " & value2 & "; " & value3 & "; " & value4 & "; " & value5)çä)
F1 38ce6d25 6eabdd6b 0 23739b8 0 0 2
Table Lookupx 6 Column(tableName; value1; value2; value3; value4; value5; value6; columnName)
Funktion
IF (EXISTS(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);'Column 3 Value'(tableName;value1;value2;value3);'Column 4 Value'(tableName;value1;value2;value3;value4);'Column 5 Value'(tableName;value1;value2;value3;value4;value5)) ; çä  LOOKUPX(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);'Column 3 Value'(tableName;value1;value2;value3);'Column 4 Value'(tableName;value1;value2;value3;value4);'Column 5 Value'(tableName;value1;value2;value3;value4;value5);value6;columnName) ; çä   //â"NoRateFound" çäerror("RNF1:NoRateFound " & tablename & "; " & value1 & "; " & value2 & "; " & value3 & "; " & value4 & "; " & value5 & "; " & value6)çä)
F1 23739b8 6eabdd6b 0 13045b22 0 0 2
Table Lookupx 7 Column(tableName; value1; value2; value3; value4; value5; value6; value7; columnName)
Funktion
IF (EXISTS(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);'Column 3 Value'(tableName;value1;value2;value3);'Column 4 Value'(tableName;value1;value2;value3;value4);'Column 5 Value'(tableName;value1;value2;value3;value4;value5);'Column 6 Value'(tableName;value1;value2;value3;value4;value5;value6)) ; çä  LOOKUPX(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);'Column 3 Value'(tableName;value1;value2;value3);'Column 4 Value'(tableName;value1;value2;value3;value4);'Column 5 Value'(tableName;value1;value2;value3;value4;value5);'Column 6 Value'(tableName;value1;value2;value3;value4;value5;value6);value7;columnName) ; çä   //â"NoRateFound"çäerror("RNF1:NoRateFound " & tablename & "; " & value1 & "; " & value2 & "; " & value3 & "; " & value4 & "; " & value5 & "; " & value6 & "; " & value7)çä)
F1 13045b22 6eabdd6b 0 1d4952ca 0 0 2
Table Lookupx 8 Column(tableName; value1; value2; value3; value4; value5; value6; value7; value8; columnName)
Funktion
IF (EXISTS(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);'Column 3 Value'(tableName;value1;value2;value3);'Column 4 Value'(tableName;value1;value2;value3;value4);'Column 5 Value'(tableName;value1;value2;value3;value4;value5);'Column 6 Value'(tableName;value1;value2;value3;value4;value5;value6);'Column 7 Value'(tableName;value1;value2;value3;value4;value5;value6;value7)) ; çä  LOOKUPX(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);'Column 3 Value'(tableName;value1;value2;value3);'Column 4 Value'(tableName;value1;value2;value3;value4);'Column 5 Value'(tableName;value1;value2;value3;value4;value5);'Column 6 Value'(tableName;value1;value2;value3;value4;value5;value6);'Column 7 Value'(tableName;value1;value2;value3;value4;value5;value6;value7);value8;columnName) ; çä   //â"NoRateFound"çäerror("RNF1:NoRateFound " & tablename & "; " & value1 & "; " & value2 & "; " & value3 & "; " & value4 & "; " & value5 & "; " & value6 & "; " & value7 & "; " & value8)çä)
F1 1d4952ca 6eabdd6b 0 539ae3db 0 0 2
Table Lookupx 9 Column(tableName; value1; value2; value3; value4; value5; value6; value7; value8; value9; columnName)
Funktion
IF (EXISTS(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);'Column 3 Value'(tableName;value1;value2;value3);'Column 4 Value'(tableName;value1;value2;value3;value4);'Column 5 Value'(tableName;value1;value2;value3;value4;value5);'Column 6 Value'(tableName;value1;value2;value3;value4;value5;value6);'Column 7 Value'(tableName;value1;value2;value3;value4;value5;value6;value7);'Column 8 Value'(tableName;value1;value2;value3;value4;value5;value6;value7;value8)) ; çä  LOOKUPX(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);'Column 3 Value'(tableName;value1;value2;value3);'Column 4 Value'(tableName;value1;value2;value3;value4);'Column 5 Value'(tableName;value1;value2;value3;value4;value5);'Column 6 Value'(tableName;value1;value2;value3;value4;value5;value6);'Column 7 Value'(tableName;value1;value2;value3;value4;value5;value6;value7);'Column 8 Value'(tableName;value1;value2;value3;value4;value5;value6;value7;value8);value9;columnName) ; çä   //â"NoRateFound"çäerror("RNF1:NoRateFound " & tablename & "; " & value1 & "; " & value2 & "; " & value3 & "; " & value4 & "; " & value5 & "; " & value6 & "; " & value7 & "; " & value8 & "; " & value9)çä)
F1 539ae3db 6eabdd6b 0 0 0 0 2
Table Lookupx 10 Column(tableName; value1; value2; value3; value4; value5; value6; value7; value8; value9; value10;columnName)
Funktion
IF (EXISTS(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);'Column 3 Value'(tableName;value1;value2;value3);'Column 4 Value'(tableName;value1;value2;value3;value4);'Column 5 Value'(tableName;value1;value2;value3;value4;value5);'Column 6 Value'(tableName;value1;value2;value3;value4;value5;value6);'Column 7 Value'(tableName;value1;value2;value3;value4;value5;value6;value7);'Column 8 Value'(tableName;value1;value2;value3;value4;value5;value6;value7;value8);'Column 9 Value'(tableName;value1;value2;value3;value4;value5;value6;value7;value8;value9)) ; çä  LOOKUPX(table(tableName);'Column 1 Value'(tableName;value1);'Column 2 Value'(tableName;value1;value2);'Column 3 Value'(tableName;value1;value2;value3);'Column 4 Value'(tableName;value1;value2;value3;value4);'Column 5 Value'(tableName;value1;value2;value3;value4;value5);'Column 6 Value'(tableName;value1;value2;value3;value4;value5;value6);'Column 7 Value'(tableName;value1;value2;value3;value4;value5;value6;value7);'Column 8 Value'(tableName;value1;value2;value3;value4;value5;value6;value7;value8);'Column 9 Value'(tableName;value1;value2;value3;value4;value5;value6;value7;value8;value9);value10;columnName) ; çä   //â"NoRateFound"çäerror("RNF1:NoRateFound " & tablename & "; " & value1 & "; " & value2 & "; " & value3 & "; " & value4 & "; " & value5 & "; " & value6 & "; " & value7 & "; " & value8 & ";" & value9 & ";" & value10)çä)
A0 4534cb4 0 0 0 0 0 0

T0 4534d2c 0 4583208 0 0 0 0

T1 4583208 4534d2c 4583288 0 0 0 2
-- Rate Access/Rate Model Tables
key
value
T3 4583288 4583208 0 4583308 0 0 3
TABLE AgeType
ACORD
characters
value
2
L
Age Last Birthday
4
N
Age Nearest Birthday
T6 4583308 4583208 0 4583388 0 0 2
TABLE Band Code
ACORD
value
0
No band
1
Band 1
2
Band 2
3
Band 3
*
wildcard
T8 4583388 4583208 0 4583408 0 0 3
TABLE Death Benefit Option
ACORD
Code_Description
character
0
Unknown

1
Level (DB = Face)
A
2
Increasing (DB = Face + Cash)
B
3
Increasing (DB = Face + Return of Cumulative Premiums)

4
Increasing (Face + Simple Percent)

5
Increasing (Face + Compound Percent)

2147483647
Other

T4 4583408 4583208 0 4583488 0 0 3
TABLE Gender Code
ACORD
description
characters
1
Male
M
2
Female
F
3
Unisex
U
T18 4583488 4583208 0 4583508 0 0 2
TABLE Invest Rate Type
ACORD
description
0
Unknown
1
Fixed
2
Variable
3
Coupon
4
Yield
5
Declared
6
Bonus
7
Guaranteed
8
Guaranteed Lifetime
9
Growth
10
Assumed Rate
11
Portfolio
12
Investment Period
13
Variably Funded
14
Cost of Insurance
36
Total Interest Rate
2147483647
Other
T19 4583508 4583208 0 4583588 0 0 2
TABLE Invest Rate Sub Type
key
value1
1
Calendar
6
Duration
8
Rollover
9
Tiered
10
Non-tiered (Portfolio)
11
Deposit Date
1000500001
Calendar Investment Method
1000500002
Treasury Bill
1000500003
Deposit Date
1000500004
Single Period Policy Year
1000500005
Multi Period Policy Year
1000500006
Policy Yr by Duration Investment Method
1000500007
Duration (Portfolio)
1000500008
Indexed Investment (Portfolio)
1000500009
Investment Period Roll Rates
1000500010
Tiered Interest (Portfolio)
1000500011
Portfolio, Non-Tiered Interest
2147483647
Other
T6 4583588 4583208 0 7f47d8a7 0 0 3
TABLE Load Type Parm
key
description
characters
0
Unknown
U
1
Guaranteed
G
2
Midpoint
M
3
Current
C
4
Custom Blended
CB
T114 7f47d8a7 4583208 0 4583688 0 0 3
TABLE Parm Position
RateType
ParameterType__ParmCount
all
*
Product_Code
0
*
Rate_Type
1
*
Effective_Date
2
*
Invest_Rate_Type
3
*
Issue_Age
3
LTCCOLA
Index_Date
3
MORTIMPROVE
Attained_Age
3
SSTD
LookupValue
3
UNITVAL
Carrier_Code
3
ADMINCURRINT
Carrier_Code
3
ADMINCURRINTRATES
Carrier_Code
3
ADMINCURRINTCOUNTER
Carrier_Code
3
ADMINCURRINTCOUNTERDATE
Carrier_Code
3
*
Duration
4
*
Invest_Rate_Sub_Type
4
MORTIMPROVE
Gender
4
ADMINCURRINT
State_Code
4
ADMINCURRINTRATES
State_Code
4
ADMINCURRINTCOUNTER
State_Code
4
ADMINCURRINTCOUNTERDATE
State_Code
4
*
Carrier_Code
5
*
Gender_Code
5
ADMINCURRINT
Rate_Eff_Date
5
ADMINCURRINTRATES
Rate_Eff_Date
5
ADMINCURRINTCOUNTER
Rate_Eff_Date
5
ADMINCURRINTCOUNTERDATE
Rate_Eff_Date
5
LEF
Spouse_Issue_Age
5
*
Period_Code
6
*
Underwriting_Class
6
*
EmploymentClass_Code
6
ADMINCURRINT
Rate_Ren_Date
8
ADMINCURRINTRATES
Rate_Ren_Date
8
ADMINCURRINTCOUNTER
Rate_Ren_Date
8
ADMINCURRINTCOUNTERDATE
Rate_Ren_Date
8
*
Band_Date
7
*
Limit
7
*
Smoke_Code
7
ADMINCURRINT
Lookup_Type
7
ADMINCURRINTRATES
Lookup_Type
7
ADMINCURRINTCOUNTER
Lookup_Type
7
ADMINCURRINTCOUNTERDATE
Lookup_Type
7
*
Band_Code
8
*
Life_Indicator
8
*
BenefitPeriod_Code
8
ADMINCURRINT
Issue_Date
9
ADMINCURRINTRATES
Issue_Date
9
ADMINCURRINTCOUNTER
Issue_Date
9
ADMINCURRINTCOUNTERDATE
Issue_Date
9
*
State_Code
9
*
EliminationPeriod_Code
10
*
Table_Code
10
*
Rule_Code
11
*
Death_Benefit_Option
12
*
LookupValue
13
*
SpecialClassCode
15
MORT
Age_Calc_Type
14
MORT_Info
Age_Calc_Type
14
MORT_BaseYear
Age_Calc_Type
14
SELFACT
Income_Option
14
CURRINT
Duration
7
CURRINT
Life_Indicator
6
*
Interest_GuarPeriod
7
*
Area_Code
16
*
Qual_Status
17
*
Qual_Type
18
PREMTAX
Carrier_Code
15
BABSON
Duration
7
POLSPREAD
Life_Indicator
6
POLSPREAD
Certain_Years
7
POLSPREAD
Deferral_Years
8
POLSPREAD
Gender
9
POLSPREAD
Issue_Age
10
POLSPREAD
Spouse_Issue_Age
11
POLSPREAD
Income_Option
12
EXPCHARGE
Income_Option
3
EXPCHARGE
Certain_Years
4
EXPCHARGE
Issue_Age
5
CEXPTRANSFEEAMT
FinAct_Type
12
CEXPTRANSFEEPCT
FinAct_Type
12
CEXPTRANSFEEAMT
Carrier_Code
13
CEXPREDEMPPCT
Fund_Type
13
CEXPREDEMTHRHLD
Fund_Type
13
CEXPREDEMPMAX
Fund_Type
13
CEXPREDEMPDAYS
Fund_Type
13
CEXPREDEMPPCT
ArrSub_Type
14
CEXPREDEMTHRHLD
ArrSub_Type
14
CEXPREDEMPMAX
ArrSub_Type
14
CEXPREDEMPDAYS
ArrSub_Type
14
CEXPTRANSFEEPCT
Carrier_Code
15
CEXPREDEMPPCT
Carrier_Code
15
CEXPREDEMTHRHLD
Carrier_Code
15
CEXPREDEMPMAX
Carrier_Code
15
CEXPREDEMPDAYS
Carrier_Code
15
FFREEPCT
Carrier_Code
12
PCHGPCT
Carrier_Code
12
PFREEPCT
Carrier_Code
12
FCHGPCT
Carrier_Code
12
CEXPAMT
Carrier_Code
13
CEXPSETUPFEEAMT
Carrier_Code
13
CEXPREMWVRAMT
Carrier_Code
13
CEXPPCT
Carrier_Code
13
GEXPPCT
Carrier_Code
13
CEXPSETUPFEEPCT
Carrier_Code
13
CEXPREMWVRPCT
Carrier_Code
13
CEXPMAX
Carrier_Code
13
CEXPREMWVRMAX
Carrier_Code
13
PCHGAMT
Carrier_Code
13
FCHGAMT
Carrier_Code
13
LCHGRATE
Carrier_Code
15
LCHGAMT
Carrier_Code
15
LSECRATE
Carrier_Code
15
PREMBON
Carrier_Code
12
GMCSVPCT
Carrier_Code
12
T33 4583688 4583208 0 4583708 0 0 3
TABLE Payment Frequency
Key
Description
characters
1
Annual or Annually
A
2
Semi-Annual (twice a year)
SA
3
Quarter or Quarterly
Q
4
Month or Monthly
M
5
Semi-Monthly (twice a month)
SM
6
Week or Weekly
W
7
Bi-Weekly (every two weeks)
BW
8
Day or Daily
D
9
Single Payment
SP
10
Monthly for Nine months
M9M
11
Random
R
12
Every 4 weeks (4 weekly)
?
13
Monthly for 10 months
?
14
Monthly for 8 months
?
15
Every 2 months
?
16
Every 4 months
?
17
Every 5 months
?
18
Every 7 months
?
19
Every 8 months
?
21
Every 10 months
?
22
Every 11 months
?
23
Fiscal Quarterly mode of payment
?
24
Every three weeks
?
25
Payments made 7 times per year.
?
26
Payments made 11 times per year.
?
27
Payments made 14 times per year.
?
28
Payments made 28 times per year.
?
29
Payment made 5 times a year
?
30
Annual Calendar
?
40
Lifetime
?
99
None
?
100
Any Paymode is allowed
?
T89 4583708 4583208 0 4583788 0 0 5
TABLE Range Error
Product_Code
Rate_Type
Field
min
max
*
*
Issue_Age
18
80
*
*
Duration
0
82
*
MORT
Duration
0
121
*
MORT
Attained_Age
18
120
*
*
Attained_Age
18
95
*
*
Issue_Age_PW
18
60
*
*
Duration_PW
0
47
*
*
Attained_Age_PW
18
65
*
GIR
Issue_Age
0
40
*
ADB
Issue_Age
0
40
CTRPA
*
Issue_Age
0
40
DI1PA
*
Issue_Age
18
64
DI2PA
*
Issue_Age
18
64
EIA1PA
*
Issue_Age
18
75
EIA1PA
*
Duration
1
97
EIA1PA
*
Attained_Age
18
115
EIA2PA
*
Issue_Age
18
75
EIA2PA
*
Duration
1
97
EIA2PA
*
Attained_Age
18
115
EIUL1PA
*
Issue_Age
18
60
EIUL1PA
*
Duration
1
103
EIUL1PA
*
Attained_Age
18
100
EIUL2PA
*
Issue_Age
0
80
EIUL2PA
*
Duration
1
121
EIUL2PA
*
Attained_Age
1
121
INDP10Y
*
Issue_Age
18
75
INDP10Y
*
Duration
0
81
INDP10Y
*
Attained_Age
18
99
INDP10Y
*
Issue_Age_PW
19
55
INDP10Y
*
Duration_PW
0
41
INDP10Y
*
Age_PW
19
59
INDP20Y
*
Issue_Age
18
75
INDP20Y
*
Duration
0
81
INDP20Y
*
Attained_Age
18
99
INDP5Y
*
Issue_Age
18
75
INDP5Y
*
Duration
0
81
INDP5Y
*
Attained_Age
18
99
UL1PA
*
Duration
1
100
UL1PA
*
Issue_Age
0
80
UL1PA
*
Attained_Age
0
100
UL2PA
*
Duration
1
121
UL2PA
*
Issue_Age
0
80
UL2PA
*
Attained_Age
1
121
JSUL1PA
*
Duration
1
121
JSUL1PA
*
Issue_Age
0
80
JSUL1PA
*
Attained_Age
1
121
VUL1PA
*
Duration
1
82
VUL1PA
*
Issue_Age
18
60
VUL1PA
*
Attained_Age
18
100
VUL2PA
*
Duration
1
121
VUL2PA
*
Issue_Age
0
80
VUL2PA
*
Attained_Age
1
121
JSVUL1PA
*
Duration
1
121
JSVUL1PA
*
Issue_Age
0
80
JSVUL1PA
*
Attained_Age
1
121
FPA1PA
*
Duration
1
97
FPA1PA
*
Issue_Age
18
120
FPA1PA
*
Attained_Age
18
115
SPDA1PA
*
Duration
1
115
SPDA1PA
*
Issue_Age
0
75
SPDA1PA
*
Attained_Age
0
115
WL1PA
*
Issue_Age
0
90
WL1PA
*
Duration
1
100
WL1PA
*
Attained_Age
0
100
WL2PA
*
Issue_Age
0
100
WL2PA
*
Duration
1
121
WL2PA
*
Attained_Age
0
121
PUAR1PA
*
Duration
1
121
PUAR2PA
*
Duration
1
121
BIR1PA
*
Duration
1
121
VA1PA
*
Duration
1
115
SPIA1PA
*
Attained_Age
0
115
SPIA1PA
*
Issue_Age
0
115
SPIA1PA
*
Duration
0
115
UL1PA_PPA2PA
*
Duration
1
121
UL2PA_PPA2PA
*
Duration
1
121
VUL1PA_PPA2PA
*
Duration
1
121
VUL2PA_PPA2PA
*
Duration
1
121
JSUL1PA_PPA2PA
*
Duration
1
121
JSVUL1PA_PPA2PA
*
Duration
1
121
EIUL1PA_PPA2PA
*
Duration
1
121
EIUL1PA_PPA2PA
*
Duration
1
121
JSEIUL1PA_PPA2PA
*
Duration
1
121
DIA1PA
*
Issue_Age
0
120
DIA1PA
*
Duration
0
120
PAY1WMAJ
*
Issue_Age
0
120
PAY1WMAJ
*
Duration
0
120
LTC1PA
*
Issue_Age
40
80
T3 4583788 4583208 0 4583808 0 0 3
TABLE Smoke Code
ACORD
description
characters
1
NonSmoker
NS
2
Smoker
S
T54 4583808 4583208 0 4583888 0 0 3
TABLE State Code
ACORD
description
characters
1
Alabama
AL
2
Alaska
AK
4
Arizona
AZ
5
Arkansas
AR
6
California
CA
7
Colorado
CO
8
Connecticut
CT
9
Delaware
DE
10
District of Columbia
DC
12
Florida
FL
13
Georgia
GA
15
Hawaii
HI
16
Idaho
ID
17
Illinois
IL
18
Indiana
IN
19
Iowa
IA
20
Kansas
KS
21
Kentucky
KY
22
Louisiana
LA
23
Maine
ME
25
Maryland
MD
26
Massachussetts
MA
27
Michigan
MI
28
Minnesota
MN
29
Mississippi
MS
30
Missouri
MO
31
Montana
MT
32
Nebraska
NE
33
Nevada
NV
34
New Hampshire
NH
35
New Jersey
NJ
36
New Mexico
NM
37
New York
NY
38
North Carolina
NC
39
North Dakota
ND
41
Ohio
OH
42
Oklahoma
OK
43
Oregon
OR
45
Pennsylvania
PA
46
Puerto Rico
PR
47
Rhode Island
RI
48
South Carolina
SC
49
South Dakota
SD
50
Tennessee
TN
51
Texas
TX
52
Utah
UT
53
Vermont
VT
54
Virgin Islands
VI
55
Virginia
VA
56
Washington
WA
57
West Virginia
WV
58
Wisconsin
WI
59
Wyoming
WY
T3 4583888 4583208 0 4583908 0 0 3
TABLE Underwriting Class
ACORD
description
characters
1
Standard
STD
2
Preferred
PRF
T12 4583908 4583208 0 4583988 0 0 4
TABLE Table Rating
ACORD
character
value
factor
2
A
125%
1.25
3
AA
137.50%
1.38
4
B
150%
1.5
6
C
175%
1.75
7
D
200%
2
8
E
225%
2.25
9
F
250%
2.5
11
H
300%
3
13
J
350%
3.5
15
L
400%
4
19
P
500%
5
T5 4583988 4583208 0 4583a08 0 0 3
TABLE Age Calc Type
ACORD
description
characters
1
Age Next Birthday
ANXB
2
Age Last Birthday
ALB
3
Age Near Birthday, days
ANB
4
Age Near Birthday, months
ANB
T137 4583a08 4583208 0 4583a88 0 0 5
TABLE Range Error for VERA
Product_Code
Rate_Type
Field
min
max
*
*
Attained_Age
18
95
*
*
Attained_Age_PW
18
65
*
*
Duration
1
82
*
*
Duration_PW
0
47
*
*
Issue_Age
18
80
*
*
Issue_Age_PW
18
60
*
GIR
Issue_Age
0
40
AIR1PA
*
Attained_Age
1
101
AIR1PA
*
Duration
1
101
AIR1PA
*
Issue_Age
0
100
AIR2PA
*
Attained_Age
1
121
AIR2PA
*
Duration
1
121
AIR2PA
*
Issue_Age
0
120
BIR1PA
*
Attained_Age
1
101
BIR1PA
*
Duration
1
121
BIR1PA
*
Issue_Age
0
100
CTRPA
*
Attained_Age
1
66
CTRPA
*
Duration
1
66
CTRPA
*
Issue_Age
0
65
EIA1PA
*
Attained_Age
18
115
EIA1PA
*
Duration
1
97
EIA1PA
*
Issue_Age
18
75
EIA2PA
*
Attained_Age
18
115
EIA2PA
*
Duration
1
97
EIA2PA
*
Issue_Age
18
75
EIUL1PA
*
Attained_Age
1
101
EIUL1PA
*
Duration
1
103
EIUL1PA
*
Issue_Age
0
100
EIUL2PA
*
Attained_Age
1
121
EIUL2PA
*
Duration
1
121
EIUL2PA
*
Issue_Age
0
120
FPA1PA
*
Attained_Age
18
115
FPA1PA
*
Duration
1
97
FPA1PA
*
Issue_Age
18
75
INDP10Y
*
Age_PW
19
59
INDP10Y
*
Attained_Age
18
99
INDP10Y
*
Duration
1
81
INDP10Y
*
Duration_PW
1
41
INDP10Y
*
Issue_Age
18
75
INDP10Y
*
Issue_Age_PW
19
55
INDP20Y
*
Attained_Age
18
99
INDP20Y
*
Duration
1
81
INDP20Y
*
Issue_Age
18
75
INDP5Y
*
Attained_Age
18
99
INDP5Y
*
Duration
1
81
INDP5Y
*
Issue_Age
18
75
IP10YPA
GPRM
Attained_Age
19
100
IP10YPA
GPRM
Duration
19
100
IP10YPA
GPRM
Issue_Age
18
99
IP10YPA
PREM
Attained_Age
19
76
IP10YPA
PREM
Duration
19
76
IP10YPA
PREM
Issue_Age
18
75
IP20YPA
GPRM
Attained_Age
19
100
IP20YPA
GPRM
Duration
19
100
IP20YPA
GPRM
Issue_Age
18
99
IP20YPA
PREM
Attained_Age
19
76
IP20YPA
PREM
Duration
19
76
IP20YPA
PREM
Issue_Age
18
75
IP5YPA
GPRM
Attained_Age
19
100
IP5YPA
GPRM
Duration
19
100
IP5YPA
GPRM
Issue_Age
18
99
IP5YPA
PREM
Attained_Age
19
76
IP5YPA
PREM
Duration
19
76
IP5YPA
PREM
Issue_Age
18
75
JSUL1PA
*
Attained_Age
1
122
JSUL1PA
*
Duration
1
122
JSUL1PA
*
Issue_Age
0
121
JSVUL1PA
*
Attained_Age
1
121
JSVUL1PA
*
Duration
1
121
JSVUL1PA
*
Issue_Age
0
80
LTCR1PA
*
Attained_Age
1
101
LTCR1PA
*
Duration
1
101
LTCR1PA
*
Issue_Age
0
100
LTCR2PA
*
Attained_Age
1
101
LTCR2PA
*
Duration
1
101
LTCR2PA
*
Issue_Age
0
100
NHW1PA
*
Attained_Age
19
91
NHW1PA
*
Duration
19
91
NHW1PA
*
Issue_Age
18
90
PITR2PA
*
Attained_Age
1
101
PITR2PA
*
Duration
1
101
PITR2PA
*
Issue_Age
0
100
PITRPA
*
Attained_Age
1
101
PITRPA
*
Duration
1
101
PITRPA
*
Issue_Age
0
100
PITRSPA
CCOI
Attained_Age
19
101
PITRSPA
CCOI
Duration
19
101
PITRSPA
CCOI
Issue_Age
18
100
PITRSPA
GCOI
Attained_Age
19
122
PITRSPA
GCOI
Duration
19
122
PITRSPA
GCOI
Issue_Age
18
121
PPA1PA
*
Attained_Age
19
101
PPA1PA
*
Duration
19
101
PPA1PA
*
Issue_Age
18
100
PUAR1PA
*
Duration
1
121
PUAR2PA
*
Duration
1
121
SPDA1PA
*
Attained_Age
0
115
SPDA1PA
*
Duration
1
115
SPDA1PA
*
Issue_Age
0
75
SPIA1PA
*
Attained_Age
0
115
SPIA1PA
*
Duration
0
115
SPIA1PA
*
Issue_Age
0
85
STR2PA
*
Attained_Age
1
101
STR2PA
*
Duration
1
101
STR2PA
*
Issue_Age
0
100
STRPA
*
Attained_Age
1
101
STRPA
*
Duration
1
101
STRPA
*
Issue_Age
0
100
SVUL1PA
*
Attained_Age
1
122
SVUL1PA
*
Duration
1
122
SVUL1PA
*
Issue_Age
0
121
UL1PA
*
Attained_Age
0
101
UL1PA
*
Duration
0
101
UL1PA
*
Issue_Age
0
100
UL2PA
*
Attained_Age
1
121
UL2PA
*
Duration
1
121
UL2PA
*
Issue_Age
0
120
VA1PA
*
Duration
1
115
VUL1PA
*
Attained_Age
18
101
VUL1PA
*
Duration
1
101
VUL1PA
*
Issue_Age
0
100
VUL2PA
*
Attained_Age
1
121
VUL2PA
*
Duration
1
121
VUL2PA
*
Issue_Age
0
120
WL1PA
*
Attained_Age
0
100
WL1PA
*
Duration
1
100
WL1PA
*
Issue_Age
0
90
WL2PA
*
Attained_Age
0
121
WL2PA
*
Duration
1
121
WL2PA
*
Issue_Age
0
100
ADBPA
*
Attained_Age
0
70
ADBPA
*
Duration
0
70
ADBPA
*
Issue_Age
0
70
GIOPA
*
Attained_Age
1
121
GIOPA
*
Duration
1
121
GIOPA
*
Issue_Age
0
120
T6 4583a88 4583208 0 4583b08 0 0 3
TABLE EmploymentClass Code
key
Description
EmpClass
1
Employment Class A
A
2
Employment Class 2A
2A
3
Employment Class 3A
3A
4
Employment Class 4A
4A
7
Employment Class B
B
T7 4583b08 4583208 0 4583b88 0 0 3
TABLE BenefitPeriod Code
key
value
character
6
1 year (12 months, 52 weeks, 365 Days)
1YEAR
7
2 years (24 months)
2YEAR
10
5 years (60 months)
5YEAR
17
Coverage to age 67
AGE67
18
Lifetime
LIFETIME
48
10 years
10YEAR
T7 4583b88 4583208 0 0 0 0 3
TABLE EliminationPeriod Code
key
value
ElimDays
2
365 days elimination (360 days, 1 year, 12 months)
365
4
30 days elimination (1 month)
30
5
14 days elimination (15 days)
14
6
180 days elimination
180
7
60 days elimination
60
9
90 days elimination (3 months, 13 weeks)
90
I0 4534da4 0 4583c08 0 0 0 0

I0 4583c08 4534da4 0 4583c88 0 0 0
StandardTables.pms
I0 4583c88 4534da4 0 0 0 0 0
DateFunctions.pms
-
O0
E0
L0
B0
P1
4543f18
F58
4543f98
4544018
4544098
4544118
4544198
4544218
4544298
4544318
4544418
4544498
4544518
4544598
4544618
4544698
4544718
4544798
4544818
4544898
4544918
4544998
4544a18
4544a98
4544b18
4544b98
4544c18
4544c98
4544d18
4544d98
4544e18
4544e98
1c07a9b
4544f18
4545498
4545518
4545c18
4581f08
4581f88
4582008
4582188
4582208
4582288
4582308
4582388
4582488
4582588
4582a88
4582b08
4582b88
4582c08
4582c88
4582d08
4582d88
4582e08
4582e88
4582f08
4582f88
49f6d8ef
6eabdd6b
A0
T20
4583208
4583288
4583308
4583388
4583408
4583488
4583508
4583588
7f47d8a7
4583688
4583708
4583788
4583808
4583888
4583908
4583988
4583a08
4583a88
4583b08
4583b88
!184
4544018 -2 -2
Description: This function will cycle through the vector fields requested for validation and route each field independently to the detail validation function.çäExpected parameters:çäâv   =   Vector of literals from the calling function.çäâs   =   Input string from the Rate Access model.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
4544098 -2 -2
Description: This function will validate the individual vector field indicated by the position of the passed parm "x".çä çäExpected parameters:çäâv   =   Vector of literals from the calling function.çäâs   =   Input string from the Rate Access model.çäâx   =   Vector field position (relative to zero).çä çäModification Log:çä08/25/2011 PAC022 DI JL Add Employment Class Code, Benefit Period Code & Elimination Period Codeçä10/31/2007 CSC Initial Calculation/Rule
4544098 0 2

4544118 -2 -2
Description:  This function will extract the requested value from the string parameter passed from the Rate Access model. Internal table T_Parm_Position will translate the literal value (parm_type) to the related position of the requested value, and then return the value from the string.çä çäExpected parameters:çäâparm_typeâLiteral of the requested string value.çäâ             sââInput string from the Rate Access model.çä çäModification Log:çä08/04/2009 - PA1277 - wdp - Adjusted function to return an error value if SetParameter failed.çä10/31/2007 CSC Initial Calculation/Rule
4544118 0 1

4544198 -2 -2
Description:  This function will extract the requested value from the vector parameter passed. Internal table T_Parm_Position will translate the literal value (parm_type) to the related position of the requested value, and then return the value from the vector.çä çäExpected parameters:çäâparm_typeâLiteral of the requested string value.çäâ             sââInput vector.çä çäModification Log:çä07/12/2010 PAC011 DERA&VERA JL Initial Calculation/Rule
4544218 -2 -2
Description: Checks if a 'value' for 'input_name' exists in the table. Returns 1 if doesn't exist; 0 otherwise.çä çäModification Log:çä08/25/2011 PAC022 DI JL Add Employment Class Code, Benefit Period Code & Elimination Period Codeçä10/31/2007 CSC Initial Calculation/Rule
4544298 -2 -2
Description: checks if the 'value' of 'name' has exceeds limits specified for the product and rate typeçä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
4544318 -2 -2
Description: Returns 1, if 'value' of 'name' is outside limits for specified 'product' and 'rate' types. Otherwise 0 if in allowed range.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
4544418 -2 -2
Note that these common build access key functions all assume the following rate table key column structure:çä çä1)  TableIdentityçä2)  ChargeBasedOn (Wildcardable)çä3)  Jurisdiction (Wildcardable)çä4)  Gender (Wildcardable)çä5)  Underwriting Class (Wildcardable)çä6)  Smoker Status (Wildcardable)çä7)  Band (Wildcardable)
4544498 -2 -2
Description: Returns the Table_Code to be used in the rate table search.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
4544518 -2 -2
Description: Returns the ChargeBasedOn value to be used in the rate table search.  The ChargeBasedOn search key will either equal the Rule_Code, a wildcard ("*"), or "nomatch".çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
4544598 -2 -2
Description: Returns the State Code value to be used in the rate table search.  The State Code search key will either equal the State_Code, a wildcard ("*"), or "nomatch".çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
4544618 -2 -2
Description: Returns the Gender value to be used in the rate table search.  The Gender search key will either equal the Gender, a wildcard ("*"), or "nomatch".çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
4544698 -2 -2
Description: Returns the Underwriting Class value to be used in the rate table search.  The Underwriting Class search key will either equal the Underwriting Class, a wildcard ("*"), or "nomatch".çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
4544718 -2 -2
Description: Returns the Smoker Code value to be used in the rate table search.  The Smoker Code search key will either equal the Smoker Code, a wildcard ("*"), or "nomatch".çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
4544798 -2 -2
Description: Returns the Band Code value to be used in the rate table search.  The Band Code search key  will either equal the Band Code, a wildcard ("*"), or "nomatch".çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
4544818 -2 -2
Description: Calculated attained age from issue age and duration parametersçä çäModification Log:çä02/18/2010 - pA1001 - rm - Initial function
4544898 -2 -2
Description: Calculated attained age from issue age and duration parametersçä çäModification Log:çä02/18/2010 - pA1001 - rm - Initial function
4544c18 -2 -2
SS -Prem load charges could be either current or guaranteed.
4544c98 -2 -2
Description:  Returns the two character state code corresponding to the lookup value.â  çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
1c07a9b -2 -2
Description: Income Option Key lookupçä çäModification Log:çä05/08/2014 PA1403 PAC039 DIA JL Initial Calculation/Rule
4544f98 -2 -2
Description: Retrieves the interest rate from the named interest rate table.çä çäModification Logçä10/11/2011 wmA-J CMC Initial Calculation/Rule
4545018 -2 -2
Description: Retrieves the carrier code from the string vector for rate access.çä çäModification Logçä10/11/2011 wmA-J CMC Initial Calculation/Rule
4545098 -2 -2
Description: Retrieves the jurisdiction from the string vector for rate access and replaces with a wildcard if specific jusrisdiction not found.çä çäModification Logçä10/11/2011 wmA-J CMC Initial Calculation/Rule
4545198 -2 -2
Description: Retrieves the effective date from the named interest rate table.çä çäModification Logçä10/11/2011 wmA-J CMC Initial Calculation/Rule
4545298 -2 -2
Description: Retrieves the effective date from the named interest rate table.çä çäModification Logçä10/11/2011 wmA-J CMC Initial Calculation/Rule
4545318 -2 -2
Description: Retrieves the interest rate from the named interest rate table.çä çäModification Logçä10/11/2011 wmA-J CMC Initial Calculation/Rule
4545398 -2 -2
Description: Retrieves the number for rates for the deposit date since the deposit rate was established.çä çäModification Logçä01/24/2013 wmA-J Release 3 Sprint 9 JvdM Changed to TransEffDate.çä10/11/2011 wmA-J CMC Initial Calculation/Rule
4545418 -2 -2
Description: Retrieves the premium date for rate access.çä çäModification Logçä10/11/2011 wmA-J CMC Initial Calculation/Rule
4545598 -2 -2
Description:  Extracts Carrier Code from data passed to the rate model.çä çäModification Log:çä10/11/2011 wmA-J CMC Initial Calculation.
4545618 -2 -2
Description:  Extracts rate type from data passed to the rate model.çä çäModification Log:çä08/20/2012 wmA-J Release 2 Sprint 3 CMC Initial Calculation.
4545698 -2 -2
Description:  Extracts the end period from data passed to the rate model.  This can be a date or a counter.çä çäModification Log:çä10/11/2011 wmA-J CMC Initial Calculation.
4545698 0 1

4545718 -2 -2
Description:  Extracts an indicator for whether or not an existing set of interest rates has been passed to the calculation.çä çäModification Log:çä10/11/2011 wmA-J CMC Initial Calculation.
4545798 -2 -2
Description:  Extracts the Guarantee Duration from data passed to the rate model.  This is assumed to be a number of months.çä çäModification Log:çä10/11/2011 wmA-J CMC Initial Calculation.
4545818 -2 -2
Description:  Extracts Rate Guarantee Type from data passed to the rate model.çä çäModification Log:çä10/11/2011 wmA-J CMC Initial Calculation.
4545898 -2 -2
Description:  Extracts jurisdiction from data passed to the rate model.çä çäModification Log:çä12/18/2012 - WMAJ1301-641 - rm - Jurisdiction element changed to 4çä10/11/2011 wmA-J CMC Initial Calculation.
4545918 -2 -2
Description:  Extracts Transaction Effective Date from data passed to the rate model.çä çäModification Log:çä10/11/2011 wmA-J CMC Initial Calculation.
4545998 -2 -2
Description:  Extracts the start year from data passed to the rate model.çä çäModification Log:çä10/11/2011 wmA-J CMC Initial Calculation.
4545a18 -2 -2
Description:  Extracts the start period from data passed to the rate model.  This can be a date or a counter.çä çäModification Log:çä10/11/2011 wmA-J CMC Initial Calculation.
4545a98 -2 -2
Description:  Extracts the Policy Effective Date from data passed to the rate model.çä çäModification Log:çä10/11/2011 wmA-J CMC Initial Calculation.
4545b18 -2 -2
Description:  Extracts the open date from data passed to the rate model.çä çäModification Log:çä10/11/2011 wmA-J CMC Initial Calculation.
4545b98 -2 -2
Description:  Extracts Rate Guarantee Sub Type from data passed to the rate model.çä çäModification Log:çä05/02/2013 wmA-J Release 4 Sprint 13 JvdM Initial Calc
4581f08 -2 -2
Description:  Compares the renewal date to the guaratee period end date.çä çäModification Log:çä03/01/2013 wmA-J Release 3 Sprint 11 JvdM Added Rate Guarantee Date function.çä02/01/2013 wmA-J Release 3 Sprint 9 JvdM Changed date lookup to Open date.çä10/11/2011 wmA-J CMC Initial Calculation.
4581f88 -2 -2
Description:  Detemine the month on repeating guarantees.çä çäModification Log:çä10/29/2013 - WMAJ-1400 - rm - Added consideration for blank guaranteeType's to prevent "Number expected" errorsçä05/02/2013 wmA-J Release 4 Sprint 13 JvdM Added more methods.çä04/02/2013 wmA-J Release 3 Sprint 12 JvdM Initial Calculation.çä
4582008 -2 -2
Description:  determines the policy year using repeating guarantee periods.çä çäModification Log:çä10/29/2013 - WMAJ-1400 - rm - Added consideration for blank guaranteeType's to prevent "Number expected" errorsçä05/02/2013 wmA-J Release 4 Sprint 13 JvdM Added more methods.çä04/02/2013 wmA-J Release 3 Sprint 12 JvdM Added Rate Last Guarantee Date.çä10/11/2011 wmA-J CMC Initial Calculation.
4582088 -2 -2
Description:  determines the start of the latest guarantee period.çä çäModification Log:çä10/29/2013 - WMAJ-1400 - rm - Added consideration for blank guaranteeType's to prevent "Number expected" errorsçä04/25/2013 wmA-J Release 4 Sprint 13 JvdM Changed second IF to CASE and added 'Start of Next Month Date'('Rate Open Date'(s)).çä04/02/2013 wmA-J Release 3 Sprint 12 JvdM Initial Calculation.
4582108 -2 -2
Description:  Differentiate between the different money funds.çä çäModification Log:çä05/02/2013 wmA-J Release 3 Sprint 13 JvdM Initial Calculation.
4582188 -2 -2
Description:  Boolean function to determine if rates only renew once a year.çä çäModification Log:çä10/29/2013 - WMAJ-1400 - rm - Added consideration for blank guaranteeType's to prevent "Number expected" errorsçä05/02/2013 wmA-J Release 4 Sprint 13 JvdM Added more methods.çä03/01/2013 wmA-J Release 3 Sprint 11 JvdM Changed order around.çä10/13/2011 wmA-J CMC Initial Calculation.
4582208 -2 -2
05/02/2013 wmA-J Release 4 Sprint 13 JvdM Initial Calc
4582288 -2 -2
Description:  Vector of rates to be use with the accumulation factor.çä çäModification Log:çä10/13/2011 wmA-J CMC allowed for switching for different rate access methods.çä10/11/2011 wmA-J CMC Initial Calculation.
4582288 0 2

4582308 -2 -2
Description:  Recursive function to build rate vector.  Multiple rates per year.çä çäModification Log:çä04/02/2013 wmA-J Release 3 Sprint 12 JvdM counter = Start Period instead of 0; added Rate SubAccount monthIndex.çä04/02/2013 wmA-J Release 3 Sprint 12 JvdM Used Rate Last Guarantee Date instead of Open Date.çä10/13/2011 wmA-J CMC Initial Calculation.
4582388 -2 -2
Description:  Recursive function to build rate vector.  Multiple rates per year.çä çäModification Log:çä03/01/2013 wmA-J Release 3 Sprint 11 JvdM Added Rate Guarantee Date function.çä02/01/2013 wmA-J Release 3 Sprint 9 JvdM Additional code for CONT guar type.çä10/13/2011 wmA-J CMC Initial Calculation.
4582408 -2 -2
Description: True if guarantee period is not over or not playing a part.çä çäModification Log:çä03/01/2013 wmA-J Release 3 Sprint 11 JvdM Created seperate function for this.
4582488 -2 -2
Description:  Recursive function to build rate vector.  Builds 1 rate per policy year or calendar year.çä çäModification Log:çä03/01/2013 wmA-J Release 3 Sprint 11 JvdM Added Rate Guarantee Date function.çä02/21/2013 wmA-J Release 3 Sprint 10 JvdM Changed the guarantee to use previous anniversary as a start point.çä10/13/2011 wmA-J CMC Changed name.çä10/11/2011 wmA-J CMC Initial Calculation.
4582488 0 2

4582508 -2 -2
Description: True if guarantee period is not over or not playing a part.çä çäModification Log:çä03/01/2013 wmA-J Release 3 Sprint 11 JvdM Created seperate function for this.
4582588 -2 -2
Description:  Renewal dates for interest rate methods using once a year renewal.çä çäModification Log:çä11/01/2013 - WMAJ-1400 - rm - Added guarantee type 1000500005çä10/29/2013 - WMAJ-1400 - rm - Added consideration for blank guaranteeType's to prevent "Number expected" errorsçä05/02/2013 wmA-J Release 4 Sprint 13 JvdM Added more methods.çä03/01/2013 wmA-J Release 3 Sprint 11 JvdM Changed order around.çä08/02/2012âwmA-J - rm - Replaced TransEffDate with value from vector sçä10/13/2011 wmA-J CMC Added PCAR and CCAR mehtods.çä10/11/2011 wmA-J CMC Initial Calculation.
4582608 -2 -2
Description:  Advances the SubAccount opendate for the given number of years.çä çäModification Log:çä10/13/2011 wmA-J CMC Initial Calculation.
4582708 -2 -2
Description:  Calendar year method renewal date using year parameter.çä çäModification Log:çä10/29/2013 - WMAJ-1400 - rm - Added consideration for blank guaranteeType's to prevent "Number expected" errorsçä04/02/2013 wmA-J Release 3 Sprint 12 JvdM Added a check for 100500015 - REPET(C).çä03/01/2013 wmA-J Release 3 Sprint 11 JvdM Added Rate YearIndex function.çä10/13/2011 wmA-J CMC Changed function name to make it more general.çä10/12/2011 wmA-J CMC Changed Policy EffDate to SubAccount OpenDate for point in time date.çä10/11/2011 wmA-J CMC Initial Calculation.
4582788 -2 -2
Description:  Policy year method renewal date using year parameter.çä çäModification Log:çä10/29/2013 - WMAJ-1400 - rm - Added consideration for blank guaranteeType's to prevent "Number expected" errorsçä10/13/2011 wmA-J CMC Changed function name to make it more general.çä10/12/2011 wmA-J CMC Changed Policy EffDate to SubAccount OpenDate for point in time date.çä10/11/2011 wmA-J CMC Initial Calculation.
4582808 -2 -2
Description:  Advances the SubAccount opendate for the given number of years.çä çäModification Log:çä10/13/2011 wmA-J CMC Initial Calculation.
4582908 -2 -2
Description:  Repeat Calendar Renewal Date.çä çäModification Log:çä04/12/2013 wmA-J Release 3 Sprint 12 JvdM Initial Calc.
4582988 -2 -2
Description:  Repeat Anniversary Renewal Date.çä çäModification Log:çä04/12/2013 wmA-J Release 3 Sprint 12 JvdM Initial Calc.
4582a08 -2 -2
Description:  Renewal dates for interest rate methods using money fund.çä çäModification Log:çä05/02/2013 wmA-J Release 4 Sprint 13 JvdM Initial calc.
4582a88 -2 -2
Description:  Renewal dates for interest rate methods using once a year renewal.çä çäModification Log:çä10/29/2013 - WMAJ-1400 - rm - Added consideration for blank guaranteeType's to prevent "Number expected" errorsçä05/02/2013 wmA-J Release 4 Sprint 13 JvdM Added more methods.çä03/01/2013 wmA-J Release 3 Sprint 11 JvdM Changed order around.çä08/02/2012âwmA-J - rm - Replaced TransEffDate with value from vector sçä10/13/2011 wmA-J CMC Added PCAR and CCAR mehtods.çä10/11/2011 wmA-J CMC Initial Calculation.
4582b08 -2 -2
Description:  Accesses interest rates using a combination of date of deposit counter.çä çäModification Log:çä02/01/2013 wmA-J Release 3 Sprint 9 JvdM Changed cell lookup to policy effdate.çä08/20/2012 wmA-J Release 2 Sprint 3 CMC update to allow for guarantee only valuationçä10/11/2011 wmA-J CMC Initial Calculation.
4582b88 -2 -2
Description:  Accesses interest rates using a combination of date of deposit and rate renewal effective date.çä çäModification Log:çä10/29/2013 - WMAJ-1400 - rm - Added consideration for blank guaranteeType's to prevent "Number expected" errorsçä04/02/2013 wmA-J Release 3 Sprint 12 JvdM Added a check for ISSUE(P) and ISSUE(E).çä02/21/2013 wmA-J Release 3 Sprint 10 JvdM Removed previous change and added the MAX.çä01/24/2013 wmA-J Release 3 Sprint 9 JvdM added the MIN in the function.çä08/20/2012 wmA-J Release 2 Sprint 3 CMC update to allow for guarantee only valuationçä10/11/2011 wmA-J CMC Initial Calculation.
4582b88 0 2

4582c08 -2 -2
Description:  Retrieves the last Rec_Per_Start_Date based on the date1 passed in.çä çäModification Log:çä01/24/2013 wmA-J Release 3 Sprint 9 JvdM Initial Calculation.
4582d88 -2 -2
Description:  Determines the guarantee end date for each guarType.çä çäModification Log:çä10/29/2013 - WMAJ-1400 - rm - Added consideration for blank guaranteeType'sçä05/02/2013 wmA-J Release 4 Sprint 13 JvdM Added more methods.çä03/10/2013 wmA-J Release 3 Sprint 11 JvdM Initial Calculation.
4582e08 -2 -2
Description: Provides for an adjustment to the yearindex based on the guarantee type.çä çäModification Log:çä10/29/2013 - WMAJ-1400 - rm - Added consideration for blank guaranteeType'sçä03/10/2013 wmA-J Release 3 Sprint 11 JvdM Initial Calculation.
4582e88 -2 -2
Description: An adjustment to the yearIndex for certain guarantee types.çä çäModification Log:çä10/29/2013 - WMAJ-1400 - rm - Added consideration for blank guaranteeType's to prevent "Number expected" errorsçä03/10/2013 wmA-J Release 3 Sprint 11 JvdM Initial Calculation.
4582f08 -2 -2
Description: Checks whether date1 is earlier in a calendar year than date2, irrespective of the actual year of either date.çä çäModification Log:çä03/10/2013 wmA-J Release 3 Sprint 11 JvdM Initial Calculation.
4583008 -2 -2
Description:  Returns a vector of the band breaks in the surrender charge tables.çä çäModification Log:çä09/02/2012 WMAJ Release 2 Sprint 1 CMC Initial Calc
4583088 -2 -2
Description:  Builds a string of table lookup dataçä çäModification Log:çä09/02/2012 WMAJ Release 2 Sprint 1 CMC Initial Calc
4583108 -2 -2
Description:  Returns table row key to access band dataçä çäModification Log:çä09/02/2012 WMAJ Release 2 Sprint 1 CMC Initial Calc
4583188 -2 -2
Description:  Recursive function to build table row key to access band dataçä çäModification Log:çä09/02/2012 WMAJ Release 2 Sprint 1 CMC Initial Calc
720de516 -2 -2
Modification Logçä03/05/2014 Added Error Message (ESW)
37c22a9b -2 -2
Modification Logçä03/05/2014 Added Error Message (ESW)
5dfd1170 -2 -2
Modification Logçä03/05/2014 Added Error Message (ESW)
12fa210e -2 -2
Modification Logçä03/05/2014 Added Error Message (ESW)
318fa3da -2 -2
Modification Logçä03/05/2014 Added Error Message (ESW)
3ca66add -2 -2
Modification Logçä03/05/2014 Added Error Message (ESW)
24700089 -2 -2
Modification Logçä03/05/2014 Added Error Message (ESW)
4cade4fe -2 -2
Modification Logçä03/05/2014 Added Error Message (ESW)
241d2fca -2 -2
çäModification Logçä03/05/2014 Added Error Message (ESW)çä12/09/2013 Table Access 9 added (ZT)
2917e6d0 -2 -2
Modification Logçä03/05/2014 Added Control for LOOKUPX when Range is desired (ESW)
1aa2c393 -2 -2
Modification Logçä03/05/2014 Added Control for LOOKUPX when Range is desired (ESW)
5648d939 -2 -2
Modification Logçä03/05/2014 Added Control for LOOKUPX when Range is desired (ESW)
5bfb1650 -2 -2
Modification Logçä03/05/2014 Added Control for LOOKUPX when Range is desired (ESW)
7e2bbf44 -2 -2
Modification Logçä03/05/2014 Added Control for LOOKUPX when Range is desired (ESW)
288dfc66 -2 -2
Modification Logçä03/05/2014 Added Control for LOOKUPX when Range is desired (ESW)
4851dc69 -2 -2
Modification Logçä03/05/2014 Added Control for LOOKUPX when Range is desired (ESW)
118007f4 -2 -2
Modification Logçä03/05/2014 Added Control for LOOKUPX when Range is desired (ESW)
69991663 -2 -2
Modification Logçä03/05/2014 Added Control for LOOKUPX when Range is desired (ESW)
7c2b4d44 -2 -2
Modification Logçä03/05/2014 Added Error Message (ESW)
66770a5c -2 -2
Modification Logçä03/05/2014 Added Error Message (ESW)
5f8c6144 -2 -2
Modification Logçä03/05/2014 Added Error Message (ESW)
6b382dd2 -2 -2
Modification Logçä03/05/2014 Added Error Message (ESW)
2e6a90d7 -2 -2
Modification Logçä03/05/2014 Added Error Message (ESW)
38ce6d25 -2 -2
Modification Logçä03/05/2014 Added Error Message (ESW)
23739b8 -2 -2
Modification Logçä03/05/2014 Added Error Message (ESW)
13045b22 -2 -2
Modification Logçä03/05/2014 Added Error Message (ESW)
1d4952ca -2 -2
çäModification Logçä03/05/2014 Added Error Message (ESW)çä12/09/2013 Table Access 9 added (ZT)
539ae3db -2 -2
çäModification Logçä03/05/2014 Added Error Message (ESW)çä12/09/2013 Table Access 9 added (ZT)
4583508 -2 -2
Added ACORD values from  OLEXT_LU_INVRATEMETH
7f47d8a7 -2 -2
Parameter Position Tableçä çäTypical:çä1 Rate_Typeçä2 Effective Dateçä3 Issue Ageçä4 Policy Durationçä5 Genderçä6 Underwriting Classçä7 Smokeçä8 Bandçä9 Stateçä15 SpecialclassCodeçä16 Area Code  (TaxLocality)çä17 Qualified Statusçä18 Qualification TypeçäCarrier Code = 15 for premium tax, 3 otherwise
7f47d8a7 6 -1
PAC001 - 8/14/2009 - wdp - Added info to lookup COLA Rates for LTCçäPAC001 - 8/20/2009 - wdp - changed ParamterType to Index_Date to avoid confusion with Effective_Date
7f47d8a7 7 -1
18/09/2009 PAC005 DT added MORTIMPROVE for SPIA
7f47d8a7 10 -1
Description: Carrier code position for interest rate access.çä çäModification Logçä10/11/2011 wmA-J CMC Initial Calculation/Rule
7f47d8a7 11 -1
Description: Carrier code position for interest rate access.çä çäModification Logçä10/11/2011 wmA-J CMC Initial Calculation/Rule
7f47d8a7 12 -1
Description: Carrier code position for interest rate access.çä çäModification Logçä10/11/2011 wmA-J CMC Initial Calculation/Rule
7f47d8a7 13 -1
Description: Carrier code position for interest rate access.çä çäModification Logçä10/11/2011 wmA-J CMC Initial Calculation/Rule
7f47d8a7 16 -1
18/09/2009 PAC005 DT added MORTIMPROVE for SPIA
7f47d8a7 17 -1
Description: State code position for interest rate access.çä çäModification Logçä10/11/2011 wmA-J CMC Initial Calculation/Rule
7f47d8a7 18 -1
Description: State code position for interest rate access.çä çäModification Logçä10/11/2011 wmA-J CMC Initial Calculation/Rule
7f47d8a7 19 -1
Description: State code position for interest rate access.çä çäModification Logçä10/11/2011 wmA-J CMC Initial Calculation/Rule
7f47d8a7 20 -1
Description: State code position for interest rate access.çä çäModification Logçä10/11/2011 wmA-J CMC Initial Calculation/Rule
7f47d8a7 23 -1
Description: Rate Effective Date position for interest rate access.çä çäModification Logçä10/11/2011 wmA-J CMC Initial Calculation/Rule
7f47d8a7 24 -1
Description: Rate Effective Date position for interest rate access.çä çäModification Logçä10/11/2011 wmA-J CMC Initial Calculation/Rule
7f47d8a7 25 -1
Description: Rate Effective Date position for interest rate access.çä çäModification Logçä10/11/2011 wmA-J CMC Initial Calculation/Rule
7f47d8a7 26 -1
Description: Rate Effective Date position for interest rate access.çä çäModification Logçä10/11/2011 wmA-J CMC Initial Calculation/Rule
7f47d8a7 30 -1
Decription: The occupational rating for the policy, coverage or rider to which this object is attached. Defines the rating applied to a disability coverage. The rating affects the calculation of the premium for the policy, coverage, or rider. (OLI_LU_EMPLOYMENTCLASS)çä çäModification Log:çä08/25/2011 PAC022 DI JL Modify name for consistency (_Code)çä07/12/2011 PAC022 DI JL Initial Entry
7f47d8a7 31 -1
Description: Rate Renewal Date position for interest rate access.çä çäModification Logçä10/11/2011 wmA-J CMC Initial Calculation/Rule
7f47d8a7 32 -1
Description: Rate Renewal Date position for interest rate access.çä çäModification Logçä10/11/2011 wmA-J CMC Initial Calculation/Rule
7f47d8a7 33 -1
Description: Rate Renewal Date position for interest rate access.çä çäModification Logçä10/11/2011 wmA-J CMC Initial Calculation/Rule
7f47d8a7 34 -1
Description: Rate Renewal Date position for interest rate access.çä çäModification Logçä10/11/2011 wmA-J CMC Initial Calculation/Rule
7f47d8a7 38 -1
Description: Rate Renewal Date position for interest rate access.çä çäModification Logçä10/11/2011 wmA-J CMC Initial Calculation/Rule
7f47d8a7 39 -1
Description: Rate Renewal Date position for interest rate access.çä çäModification Logçä10/11/2011 wmA-J CMC Initial Calculation/Rule
7f47d8a7 40 -1
Description: Rate Renewal Date position for interest rate access.çä çäModification Logçä10/11/2011 wmA-J CMC Initial Calculation/Rule
7f47d8a7 41 -1
Description: Rate Renewal Date position for interest rate access.çä çäModification Logçä10/11/2011 wmA-J CMC Initial Calculation/Rule
7f47d8a7 43 -1
18/09/2009 PAC005 DT added for VARINT SPIA
7f47d8a7 44 -1
Description: Benefit Period for DIçä çäModification Log:çä08/25/2011 PAC022 DI JL Modify name for consistency (_Code)çä08/16/2011 PAC022 DI JL Inital Entry
7f47d8a7 45 -1
Description: Rate Renewal Date position for interest rate access.çä çäModification Logçä10/11/2011 wmA-J CMC Initial Calculation/Rule
7f47d8a7 46 -1
Description: Rate Renewal Date position for interest rate access.çä çäModification Logçä10/11/2011 wmA-J CMC Initial Calculation/Rule
7f47d8a7 47 -1
Description: Rate Renewal Date position for interest rate access.çä çäModification Logçä10/11/2011 wmA-J CMC Initial Calculation/Rule
7f47d8a7 48 -1
Description: Rate Renewal Date position for interest rate access.çä çäModification Logçä10/11/2011 wmA-J CMC Initial Calculation/Rule
7f47d8a7 50 -1
Description: Elimination Period for DIçä çäModification Log:çä08/25/2011 PAC022 DI JL Modify name for consistency (_Code)çä08/23/2011 PAC022 DI JL Moved from 9 to 10 to avoid overlap with Stateçä08/16/2011 PAC022 DI JL Inital Entry
7f47d8a7 63 -1
5/12/2011 wmA-J CMC Added Value
7f47d8a7 64 -1
5/12/2011 wmA-J CMC Added Value
7f47d8a7 65 -1
5/12/2011 wmA-J CMC Added Value
7f47d8a7 66 -1
5/18/2011 wmA-J CMC Added Value
7f47d8a7 67 -1
06/17/2014 PA1501 PAC039 DIA JL Add Babson Duration position
7f47d8a7 68 -1
06/17/2014 PA1501 PAC039 DIA JL Add Polspread Duration position
7f47d8a7 69 -1
07/01/2014 PA1501 PAC039 DIA JL PolSpread Parms
7f47d8a7 70 -1
07/01/2014 PA1501 PAC039 DIA JL PolSpread Parms
7f47d8a7 71 -1
07/01/2014 PA1501 PAC039 DIA JL PolSpread Parms
7f47d8a7 72 -1
07/01/2014 PA1501 PAC039 DIA JL PolSpread Parms
7f47d8a7 73 -1
07/01/2014 PA1501 PAC039 DIA JL PolSpread Parms
7f47d8a7 74 -1
07/01/2014 PA1501 PAC039 DIA JL PolSpread Parms
7f47d8a7 75 -1
07/15/2014 PA1501 PAC039 DIA JL ExpCharge Parms
7f47d8a7 76 -1
07/15/2014 PA1501 PAC039 DIA JL ExpCharge Parms
7f47d8a7 77 -1
07/15/2014 PA1501 PAC039 DIA JL ExpCharge Parms
7f47d8a7 78 -1
12/03/2014 wmA-J 1501 Sprint 9 JvdM Finactivity Parm
7f47d8a7 79 -1
12/03/2014 wmA-J 1501 Sprint 9 JvdM Finactivity Parm
4583708 -2 -2
Modification Log:çä07/25/2016 PAC0204 LTC JL Add LTC1PAçä05/02/2010 ENH992 JL Add Shadow Target Premium (PPA2PA) duration limits
4583708 7 -1
Modification Log:çä çä10/21/2009 NBA Integration CMC PW duration did not correspond to maturity age less minimum issue age.
4583708 8 -1
Modification Log:çä çä10/21/2009 NBA Integration CMC PW duration did not correspond to maturity age coded for some benefits
4583708 12 -1
Modification Log:çä08/25/2011 PAC022 DI JL Add case for DI1PA
4583708 13 -1
Modification Log:çä08/25/2011 PAC022 DI JL Add case for DI2PA
4583708 72 -1
Modification log:çä çä08/18/2009 PAC005 DT Added functionality for SPIA1PA
4583708 73 -1
Modification log:çä çä08/18/2009 PAC005 DT Added functionality for SPIA1PA, assumed max  issue age is 75çä11.02.2010 - PAC010 - VM - changed the max issue age for SPIA1PA to 115 for testing purposes.
4583708 74 -1
Modification log:çä çä09/16/2009 PAC005 DT Added functionality for SPIA1PA
4583708 75 -1
Modification Log:çä05/02/2010 ENH992 JL Add Shadow Target Premium (PPA2PA) duration limits
4583708 76 -1
Modification Log:çä05/02/2010 ENH992 JL Add Shadow Target Premium (PPA2PA) duration limits
4583708 77 -1
Modification Log:çä05/02/2010 ENH992 JL Add Shadow Target Premium (PPA2PA) duration limits
4583708 78 -1
Modification Log:çä05/02/2010 ENH992 JL Add Shadow Target Premium (PPA2PA) duration limits
4583708 79 -1
v
4583708 80 -1
Modification Log:çä05/02/2010 ENH992 JL Add Shadow Target Premium (PPA2PA) duration limits
4583708 81 -1
Modification Log:çä05/02/2010 ENH992 JL Add Shadow Target Premium (PPA2PA) duration limits
4583708 82 -1
Modification Log:çä05/02/2010 ENH992 JL Add Shadow Target Premium (PPA2PA) duration limits
4583708 83 -1
Modification Log:çä05/02/2010 ENH992 JL Add Shadow Target Premium (PPA2PA) duration limits
4583708 84 -1
06/18/2014 PA1501 PAC039 DIA JL Added DIA1PA
4583708 85 -1
06/18/2014 PA1501 PAC039 DIA JL Added DIA1PA
4583708 86 -1
06/18/2014 PA1501 PAC039 DIA JL Added DIA1PA
4583708 87 -1
06/18/2014 PA1501 PAC039 DIA JL Added DIA1PA
4583a08 -2 -2
Modification Log:çä11/09/2010 PAC011 DERA&VERA JL VERA Attainaed Age specifies issue age as 0, and dur as Attained Age; this needs to be allowed for when validating these values. To implement VERA this table needs to replace "TABLE Range Error".
4583a88 -2 -2
Description: Employment classes used with disability insuranceçä çäModification Log:çä08/05/2011 - PAC022 - rm - New table
4583b08 -2 -2
Modification Log:çä07/25/2016 PAC0204 LTC JL Add 18, sort.
4583b88 -2 -2
Description: Disability elimination period before payoutçä çäModification Log:çä07/25/2016 PAC0204 LTC JL Add 14çä08/05/2011 - PAC022 - rm - New table
4543c98 -2 -2
Modification log:çä18/08/2009 PAC005 DT Added test case
;Offset=00000000
