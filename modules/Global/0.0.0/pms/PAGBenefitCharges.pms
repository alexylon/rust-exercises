;1	08.12.2016 13:40:53	jlawrie2	
X0 2031cc 0 0 0 0 0 0

O0 203064 0 0 0 0 0 0

E0 2030dc 0 0 0 0 0 0

L0 203154 0 0 0 0 0 0

B0 203334 0 0 0 0 0 0

P3 203244 0 34805b8 0 0 0 2

--description
Global Benefit Charges model.çä çäRELEASE LOG:çäRELEASE pA 1401
LICENSENAME
"CSC US internal use only - Workbench"
COMPILERVERSION
"5.5.1"
P13 34805b8 203244 0 0 0 0 2
Global Benefit Charges
IncType
mandatory
IncRule

IncValue

OUTPUT Comment
"Global Benefit Charges model"
OUTPUT Runtime Version
"1.0.00"
OUTPUT Runtime Date
"12/12/2016"
OUTPUT Source Version Computer
"VPMS_SERVER"
OUTPUT Source Version File
"PAGBenefitCharges.pms"
OUTPUT Source Version Number
'GEN VersionInfo'
OUTPUT Source Version Date
"12/12/2016"
OUTPUT Source Version Author
"JC/JL"
OUTPUT Source Version Comment
"PA1603 Delivery"
OUTPUT Audit History Block
"12/12/2016 PA1603 Delivery"
F0 2032bc 0 349ef58 0 0 0 0

F1 349ef58 2032bc 349e1e8 0 0 0 2
:BCH
Funktion

F1 349e1e8 349ef58 207660 20d7b8 0 0 2
-- Coverage and CovOption Charge Functions --
Funktion

F1 207660 349e1e8 0 208120 0 0 2
CHG Projected Monthly Total Charges(calcType; bom_cv; pastPremium; yearIndex; monthIndex; vectorSolveParms)
Funktion
'CHG Projected PolicyLevel Charges'(calcType;bom_cv;yearIndex;monthIndex;vectorSolveParms) + 'BCH Projected Monthly Total Charges'(calcType;bom_cv - 'BCH Projected Total Monthly Charges Deducted For NAR'(calcType;bom_cv;yearIndex;monthIndex;vectorSolveParms);pastPremium;yearIndex;monthIndex;vectorSolveParms)
F1 208120 349e1e8 0 208278 0 0 2
CHG Total Proj Mthly Total AdminFee Charge(calcType; bom_cv; yearIndex; monthIndex; vectorSolveParms)
Funktion
'POLFEE Rate'(calcType;'FeeType PolicyFee')
F1 208278 349e1e8 208608 0 0 0 2
BCH Projected Monthly Total Charges(calcType; bom_cv; pastPremium; yearIndex; monthIndex; vectorSolveParms)
Funktion
SUMX(benefitIndex;0; //'Policy Number Of Coverage'(calcType; yearIndex) - 1; çäIF ('SharedVector SolveParms Contains Number of Coverage'(vectorSolveParms) ; çä   //Trueçä'SharedVector SolveParms Number of Coverage'(calcType;vectorSolveParms) - 1 ; çä   //Falseçä'Policy Number Of Coverage'(calcType;yearIndex) - 1çä); //True - coverage chargeçä'BCH Projected Monthly Total Coverage Charge'(calcType;#benefitIndex;bom_cv;pastPremium;yearIndex;monthIndex;vectorSolveParms))
F1 208608 208278 0 208a60 0 0 2
BCH Projected Monthly Total NonNAR Charges(calcType; yearIndex; monthIndex; vectorSolveParms)
Funktion
SUMX(benefitIndex;0;IF ('SharedVector SolveParms Contains Number of Coverage'(vectorSolveParms) ; çä   //Trueçä'SharedVector SolveParms Number of Coverage'(calcType;vectorSolveParms) - 1 ; çä   //Falseçä'Policy Number Of Coverage'(calcType;yearIndex) - 1çä);SUMX(lifeparticipantIndex;0;'Policy Number of LifeParticipant'(calcType;#benefitIndex) - 1;IF ( /*coverage is included and not net amount at risk cost*/ 'BCH Coverage Is Included'(calcType;#benefitIndex;#lifeparticipantIndex;yearIndex;monthIndex;vectorSolveParms) && NOT('Coverage Is NAR Cost'(calcType;#benefitIndex)) ; çä //True - non net amount at risk chargeçä'BCH Projected Monthly Coverage NonNAR Charge'(calcType;#benefitIndex;#lifeparticipantIndex;yearIndex;monthIndex;vectorSolveParms) ; çä //False - 0çä0çä)))
F1 208a60 208278 0 209758 0 0 2
BCH Coverage Is Included(calcType; benefitIndex; lifeparticipantIndex; yearIndex; monthIndex; vectorSolveParms)
Funktion
IF ( /*Excluded for the CalcType*/ 'ACCS ULCV Coverage Excluded For CalcType'(calcType;benefitIndex) ; çä   //Trueçä0 ; çä   //FalseçäIF ( /*7702 Calculation and Illustration*/ 'CalcType 7702 Is Active'(calcType) ; çä    IF (('SharedVector SolveParms StartYear'(vectorSolveParms) < 'Policy Coverage RequestedMaturityDur'(calcType;benefitIndex)) && ('SharedVector SolveParms StartYear'(vectorSolveParms) >= 'Policy Coverage RequestedEffDur'(calcType;benefitIndex)) && ('Std Attained Age'('Policy LifeParticipant IssueAge'(calcType;benefitIndex;lifeparticipantIndex);'Policy Coverage EffDate'(calcType;benefitIndex);'Projection Eff Date'('Policy EffDate';yearIndex;monthIndex)) <=  //'PI PolicyProduct PayToAge'('Policy Coverage ProductCode'(calcType;benefitIndex);'Policy Coverage EffDate'(calcType;benefitIndex))) çä'PI Benefit payToAge'(calcType;'Policy Coverage ProductCode'(calcType;benefitIndex);benefitIndex;'Policy Coverage EffDate'(calcType;benefitIndex))) && (yearIndex - 'Policy Coverage RequestedEffDur'(calcType;benefitIndex) + 1) <= 'PIDRV CoverageProduct MaturityDuration'(calcType;'Policy Coverage EffDate'(calcType;benefitIndex);benefitIndex) && IF (NOT('Std Calling System Is Illustration Based') ; çä      'PolStat is active'('Policy Coverage LifeCovStatus'(calcType;benefitIndex;yearIndex)) || 'PolStat is pending'('Policy Coverage LifeCovStatus'(calcType;benefitIndex;yearIndex)) ; çä      1çä    ) ; çä    1 ; çä    0çä  ) ; çä //TrueçäIF ('Std Calling System Is Illustration Based' ; çä   /*Effective Duration is before the start of the calution andçäâââstart of the calculation is before the maturity duration of the coverage*/ IF ((yearIndex //'SharedVector SolveParms StartYear'(vectorSolveParms)çä >= 'Policy Coverage RequestedEffDur'(calcType;benefitIndex)) && ((yearIndex - 'Policy Coverage RequestedEffDur'(calcType;benefitIndex) + 1) <= MIN('PIDRV CoverageProduct MaturityDuration'(calcType;'Policy Coverage EffDate'(calcType;benefitIndex);benefitIndex);'Policy Coverage RequestedMaturityDur'(calcType;benefitIndex))) && ('Std Attained Age'('Policy LifeParticipant IssueAge'(calcType;benefitIndex;lifeparticipantIndex);'Policy Coverage EffDate'(calcType;benefitIndex);'Projection Eff Date'('Policy EffDate';yearIndex;monthIndex)) <=  //'PI PolicyProduct PayToAge'('Policy Coverage ProductCode'(calcType;benefitIndex);'Policy Coverage EffDate'(calcType;benefitIndex))) çä'PI Benefit payToAge'(calcType;'Policy Coverage ProductCode'(calcType;benefitIndex);benefitIndex;'Policy Coverage EffDate'(calcType;benefitIndex))) && IF (NOT('Std Calling System Is Illustration Based') ; çä    'PolStat is active'('Policy Coverage LifeCovStatus'(calcType;benefitIndex;yearIndex)) ; çä    1çä  ) ; çä   //Trueçä1 ; çä   //Falseçä0çä) ; çä //FalseçäIF ( /*Inforce and non illustration*/ 'Std Coverage Is Inforce'(calcType;benefitIndex;'Policy Coverage EffDate'(calcType;benefitIndex);yearIndex) || 'Std Coverage Is Pending'(calcType;benefitIndex;'Policy EffDate';yearIndex) ; çä //Trueçä1 ; çä //Falseçä0çä)çä)çä)çä)
F1 209758 208278 0 209928 0 0 2
BCH Projected Total Monthly Charges Deducted For NAR(calcType; bom_cv; yearIndex; monthIndex; vectorSolveParms)
Funktion
'BCH Projected Monthly Total NonNAR Charges'(calcType;yearIndex;monthIndex;vectorSolveParms) + 'CHG Projected Admin Charges'(calcType;bom_cv;yearIndex;monthIndex;vectorSolveParms)
F1 209928 208278 2097d8 0 0 0 2
BCH Projected Monthly Total Coverage Charge(calcType; benefitIndex;bom_cv; pastPremium; yearIndex; monthIndex; vectorSolveParms)
Funktion
'BCH Projected Monthly Total Coverage Charge NoWMD'(calcType;benefitIndex;bom_cv;pastPremium;yearIndex;monthIndex;vectorSolveParms)
F1 2097d8 209928 209fc0 20a678 0 0 2
BCH Projected Monthly Total Coverage Charge NoWMD(calcType; benefitIndex; bom_cv; pastPremium; yearIndex; monthIndex; vectorSolveParms)
Funktion
IF ( /*is net amount at risk cost*/ 'Coverage Is NAR Cost'(calcType;benefitIndex) ; çä   //True - Coverage is included in with the net amount at riskçä'BCH COI Projected Monthly Coverage COI Charge'(calcType;benefitIndex;bom_cv;pastPremium;yearIndex;monthIndex;vectorSolveParms) ; çä   //False - Coverage charge is separate from the net amount at riskçäSUMX(lifeparticipantIndex;0;'Policy Number of LifeParticipant'(calcType;benefitIndex) - 1;IF ( /*coverage is included and not net amount at risk cost*/ 'BCH Coverage Is Included'(calcType;benefitIndex;#lifeparticipantIndex;yearIndex;monthIndex;vectorSolveParms) && NOT('Coverage Is NAR Cost'(calcType;benefitIndex)) ; çä     //True - non net amount at risk chargeçä'BCH Projected Monthly Coverage NonNAR Charge'(calcType;benefitIndex;#lifeparticipantIndex;yearIndex;monthIndex;vectorSolveParms) ; çä     //False - 0çä0çä  ))çä)
F1 209fc0 2097d8 0 20a1e8 0 0 2
BCH COI Projected Monthly Coverage COI Charge(calcType; benefitIndex; bom_cv; pastPremium; yearIndex; monthIndex; vectorSolveParms)
Funktion
'ACCS CV Intermediate Round For CalcType'( // COI Chargeçä'NAAR Coverage NetAmountAtRisk'(calcType;benefitIndex;bom_cv;pastPremium;yearIndex;vectorSolveParms) * 0.001 * 'COV COI Rate'(calcType;benefitIndex;yearIndex;vectorSolveParms);calcType)
F1 20a1e8 2097d8 0 0 0 0 2
BCH Projected Monthly Coverage NonNAR Charge(calcType; benefitIndex; lifeparticipantIndex;yearIndex; monthIndex; vectorSolveParms)
Funktion
IF ('PI Benefit benefitTypeCode'(calcType;'Policy Coverage ProductCode'(calcType;benefitIndex);benefitIndex;'Policy Coverage EffDate'(calcType;benefitIndex)) = 34 /*Waiver*/  ; çä  'PREMIUM Projected GrossPremium'(calcType;'SharedVector SolveParms MakePremium'('ULdocs Policy Life PaymentAmt'(calcType;yearIndex;1);yearIndex);'Vector ULCD CVProj Parms'(calcType;yearIndex);yearIndex;monthIndex) * 'BCH COI Rate'(calcType;benefitIndex;lifeparticipantIndex;yearIndex;vectorSolveParms) * 0.001 ; çä  'ACCS CV Intermediate Round For CalcType'(BenefitAmount(calcType;benefitIndex;lifeparticipantIndex;yearIndex;vectorSolveParms) * 0.001 * IF ('Coverage Is NAR Cost'(calcType;benefitIndex) ; çä    0 ; çä    'BCH COI Rate'(calcType;benefitIndex;lifeparticipantIndex;yearIndex;vectorSolveParms)çä  );calcType)çä)
F1 20a678 209928 20a7a8 20a828 0 0 2
--BCH Projected Monthly Total Coverage WMD Charge(calcType;benefitIndex;  non_wmd_cov_charges; yearIndex; monthIndex; vectorSolveParms)
Funktion

F1 20a7a8 20a678 0 20a6f8 0 0 2
BCH Projected LTD Monthly Coverage NonNAR Charge Rec(calcType; benefitIndex;lifeparticipantIndex; yearIndex; monthIndex; vectorSolveParms)
Funktion
'BCH Projected YTD Monthly Coverage NonNAR Charge Rec'(calcType;benefitIndex;lifeparticipantIndex;yearIndex;monthIndex;vectorSolveParms) +  // Previous month premium YTDçäIF ( /*First month in a year*/ yearIndex = 1 ; çä   // Starting a new accumulation periodçä0 ; çä   // Else accumulate from begining of yearçä'BCH Projected LTD Monthly Coverage NonNAR Charge Rec'(calcType;benefitIndex;lifeparticipantIndex;yearIndex - 1;12;vectorSolveParms)çä)
F1 20a6f8 20a678 0 0 0 0 2
BCH Projected YTD Monthly Coverage NonNAR Charge Rec(calcType; benefitIndex;lifeparticipantIndex; yearIndex; monthIndex; vectorSolveParms)
Funktion
'BCH Projected Monthly Coverage NonNAR Charge'(calcType;benefitIndex;lifeparticipantIndex;yearIndex;monthIndex;vectorSolveParms) +  // Previous month premium YTDçäIF ( /*First month in a year*/ monthIndex = 1 ; çä   // Starting a new accumulation periodçä0 ; çä   // Else accumulate from begining of yearçä'BCH Projected YTD Monthly Coverage NonNAR Charge Rec'(calcType;benefitIndex;lifeparticipantIndex;yearIndex;monthIndex - 1;vectorSolveParms)çä)
F1 20a828 209928 20cf38 20d4b8 0 0 2
BCH Coverage Rate Type(benefitIndex; calcType; yearIndex; monthIndex)
Funktion
IF ( /*child term rider*/ 'Coverage Type is Child Term Rider'(calcType;benefitIndex) ; çä   //true - prem rate typeçä"Prem" ; çä   //else - determine rate typeçä'ACCS ULCV Coverage CalcType RateType'(calcType;benefitIndex;yearIndex;monthIndex)çä)
F1 20cf38 20a828 20cfb8 0 0 0 2
BCH COI Rate(calcType; benefitIndex;lifeparticipantIndex; yearIndex; vectorSolveParms)
Funktion
IF ( /*Is coverage active*/ 'Std Coverage Is InForce'(calcType;benefitIndex;'Increase Date By Years'('Benefit EffDate'(benefitIndex);IF ('CalcType 7702 Is Active'(calcType) ; çä  'SharedVector SolveParms StartYear'(vectorSolveParms) - 1 ; çä  yearIndex - 1çä));IF ('CalcType 7702 Is Active'(calcType) ; çä'SharedVector SolveParms StartYear'(vectorSolveParms) ; çäyearIndexçä)) ; çä //trueçä'BCH Single Life COI Rate'(calcType;benefitIndex;lifeparticipantIndex;yearIndex;vectorSolveParms) ; çä //False - coverage is not activeçä0çä)
F1 20cfb8 20cf38 20d038 0 0 0 2
BCH Single Life COI Rate(calcType; benefitIndex; lifeparticipantIndex;yearIndex; vectorSolveParms)
Funktion
('BCH Single Life Unrated COI Rate'(calcType;benefitIndex;lifeparticipantIndex;yearIndex;vectorSolveParms) * IF ('CalcType ShadowCatchUp Is Active'(calcType) ; çä  1 + 0.01 * 'ACCS CalcRule ShadowCatchUp COIIncPct'('Policy CarrierCode';'Policy Coverage ProductCode'(calcType;benefitIndex);TransEffDate) ; çä  1çä) * IF ( /*includes table ratings*/ 'ACCS ULCV Coverage Calc Type Includes Table Ratings'(calcType;benefitIndex) ; çä //True - Base COI times table ratingçäRate('Policy Coverage ProductCode'(calcType;benefitIndex);'CalcType Substandard Identifier';TransEffDate;v_('Policy LifeParticipant PermTableRating'(calcType;benefitIndex;lifeparticipantIndex))) ; çä //False - no table ratingçä1çä) * IF ( /*includes premium loadings*/ 'ACCS ULCV Coverage Calc Type Includes Percentage Loading'(benefitIndex;calcType) ; çä /*times 1 + percentage loadings*/ 1 +  // Permanent percentage loadingçä'Policy LifeParticipant PermPercentageLoading'(calcType;benefitIndex;lifeparticipantIndex) * 0.01 +  // Temporary percentage loadingçäIF ( /*tempory percentage loading is active*/ 'Policy LifeParticipant TempPercentageLoading'(calcType;benefitIndex;lifeparticipantIndex) > 0 && 'Duration Year'('Policy LifeParticipant TempPercentageLoadingStartDate'(calcType;benefitIndex;lifeparticipantIndex);'Policy EffDate') <= yearIndex && 'Duration Year'('Policy LifeParticipant TempPercentageLoadingEndDate'(calcType;benefitIndex;lifeparticipantIndex);'Policy EffDate') >= yearIndex ; çä //temporary percentage loadingçä'Policy LifeParticipant TempPercentageLoading'(calcType;benefitIndex;lifeparticipantIndex) * 0.01 ; çä // Else no active temporary percentage loadingçä0çä) ; çä // Else no percentage loadingçä1çä) * IF ( /*Does temporary table rating exist?*/ 'Policy LifeParticipant TempTableRating'(calcType;benefitIndex;lifeparticipantIndex) > 1 && 'Duration Year'('Policy LifeParticipant TempTableRatingStartDate'(benefitIndex;lifeparticipantIndex);'Policy EffDate') <= yearIndex && 'Duration Year'('Policy LifeParticipant TempTableRatingEndDate'(calcType;benefitIndex;lifeparticipantIndex);'Policy EffDate') >= yearIndex ; çä /*multiply by temp table rating*/ Rate('Policy ProductCode';'CalcType Substandard Identifier';TransEffDate;V_('Policy LifeParticipant TempTableRating'(calcType;benefitIndex;lifeparticipantIndex))) ; çä // Else no table ratingçä1çä)) + IF ( /*includes flat extras*/ 'ACCS ULCV Coverage Calc Type Includes Flat Extras'(calcType;benefitIndex) ; çä //True - sum all the flatsçä// Permanent flatçä'Policy LifeParticipant PermFlatExtraAmt'(calcType;benefitIndex;lifeparticipantIndex) +  // Add 1st temporary flat extra (which is contained in LifeParticipant)çäIF ( /*tempory flat is active*/ 'Policy LifeParticipant TempFlatExtraAmt'(calcType;benefitIndex;lifeparticipantIndex) > 0 && 'Duration Year'('Policy LifeParticipant TempFlatEndDate'(calcType;benefitIndex;lifeparticipantIndex);'Policy EffDate') >= yearIndex ; çä //True - temporary flat amountçä'Policy LifeParticipant TempFlatExtraAmt'(calcType;benefitIndex;lifeparticipantIndex) ; çä //False - no active temporary flat extrasçä0çä) +  // Add additional flat extras (which are contained in SubstandardRating off of LifeParticipant)çäSUMX(flat_extra_ix;0;'Policy LifeParticipant number of SubstandardRating'(calcType;benefitIndex;lifeparticipantIndex) - 1;IF ( /*additional flat is active*/ ('Policy LifeParticipant SubstandardRating TempFlatExtraAmt'(calcType;benefitIndex;lifeparticipantIndex;#flat_extra_ix) > 0) && ('Duration Year'('Policy LifeParticipant SubstandardRating TempFlatEndDate'(calcType;benefitIndex;lifeparticipantIndex;#flat_extra_ix);'Policy EffDate') >= yearIndex) ; çä //True - additional flat amountçä'Policy LifeParticipant SubstandardRating TempFlatExtraAmt'(calcType;benefitIndex;lifeparticipantIndex;#flat_extra_ix) ; çä //False - no active additional flat extrasçä0çä)) ; çä //False - no flat extrasçä0çä)
F1 20d038 20cfb8 20d0b8 0 0 0 2
BCH Single Life Unrated COI Rate(calcType; benefitIndex;lifeparticipantIndex; yearIndex; vectorSolveParms)
Funktion
IF ('PI Use Attributes'("Policy Coverage Unrated CostOfInsuranceRate") ; çä  'STD Policy Coverage Unrated CostOfInsuranceRate'(calcType;benefitIndex;yearIndex) ; çä  'BCH Single Life Unrated COI Rate Access'(calcType;benefitIndex;lifeparticipantIndex;yearIndex;vectorSolveParms)çä)
F1 20d0b8 20d038 20d1b8 0 0 0 2
BCH Single Life Unrated COI Rate Access(calcType; benefitIndex;lifeparticipantIndex; yearIndex; vectorSolveParms)
Funktion
IF ( /*shadow account*/ 'CalcType Shadow Is Active'(calcType) || 'CalcType SHGT Is Active'(calcType) ; çä   //True - shadow account COI rateçä'BCH Single Life ShadowAcct Unrated COI Rate'(calcType;benefitIndex;lifeparticipantIndex;yearIndex;vectorSolveParms) ; çä   //False - regular COI rateçäIF ( /*Is Product Universal Life or Is Product Variable Universal Life or Is Product Indexed Universal Life*/ 'ProductType is Universal Life'('PI PolicyProduct PolicyProductTypeCode'('Policy ProductCode';'Policy EffDate')) || 'ProductType is Variable Universal Life'('PI PolicyProduct PolicyProductTypeCode'('Policy ProductCode';'Policy EffDate')) || 'ProductType is Indexed Universal Life'('PI PolicyProduct PolicyProductTypeCode'('Policy ProductCode';'Policy EffDate')) ; çä    IF ('CalcType Midpoint Is Active'(calcType) ; çä      'BCH Single Life Unrated Midpoint COI Rate Call'(calcType;benefitIndex;lifeparticipantIndex;yearIndex;vectorSolveParms) ; çä      IF ('CalcType ILLUS Is Active'(calcType) || 'CalcType Curr or Guar Is Active'(calcType) || 'CalcType 7702 Is Active'(calcType) || 'CalcType Target Is Active'(calcType) ; çä        'BCH Single Life Unrated COI Rate Call'(calcType;benefitIndex;lifeparticipantIndex;yearIndex;vectorSolveParms) ; çä        IF ('CalcType Assumed Is Active'(calcType) ; çä           //assumed rate calculationçä'BCH Single Life Unrated Assumed COI Rate Call'(calcType;benefitIndex;lifeparticipantIndex;yearIndex;vectorSolveParms) ; çä           //Error Messageçä'Messages SystemMessage'("CA1000";'Message Language';v_('BCH Model Name';"'BCH Single Life Unrated COI Rate Access'"))çä        )çä    )çä) ; çä //Error Messageçä'Messages SystemMessage'("CA1000";'Message Language';v_('BCH Model Name';"'BCH Single Life Unrated COI Rate Access'"))çä)çä)
F1 20d1b8 20d0b8 0 20d2b8 0 0 2
BCH Single Life Unrated Assumed COI Rate Call(calcType; benefitIndex; lifeparticipantIndex;yearIndex; vectorSolveParms)
Funktion
'BCH Single Life Unrated COI Rate Call'(benefitIndex;lifeparticipantIndex;'CalcType Guaranteed'(calcType);yearIndex;vectorSolveParms)
F1 20d2b8 20d0b8 0 20d338 0 0 2
BCH Single Life Unrated COI Rate Call(calcType; benefitIndex; lifeparticipantIndex;yearIndex; vectorSolveParms)
Funktion
IF ( /*Coverage Rate is Pct of Base Rate*/ 'ACCS CalcRule UL COI Rules'('Policy Coverage ProductCode'(calcType;benefitIndex);'BCH Coverage Rate Type'(benefitIndex;calcType;yearIndex;12);"PctOfBaseIndicator";TransEffDate) ; çä   //Trueçä(Rate('Policy Coverage ProductCode'(calcType;'Std BaseCov Index'(calcType));'BCH Coverage Rate Type'(benefitIndex;calcType;yearIndex;12);TransEffDate;'Vector BCH COIRate Parms'(calcType;benefitIndex;lifeparticipantIndex;yearIndex;vectorSolveParms)) * (1 + 'ACCS CalcRule UL COI Rules'('Policy Coverage ProductCode'(calcType;benefitIndex);'BCH Coverage Rate Type'(benefitIndex;calcType;yearIndex;12);"PctOfBase";TransEffDate) / 100)) ; çä   //FalseçäRate('Policy Coverage ProductCode'(calcType;benefitIndex);'BCH Coverage Rate Type'(benefitIndex;calcType;yearIndex;12);TransEffDate;'Vector BCH COIRate Parms'(calcType;benefitIndex;lifeparticipantIndex;yearIndex;vectorSolveParms)) / IF ('BCH Coverage Rate Type'(benefitIndex;calcType;yearIndex;12) ALIKE 'CalcType PREM Identifier' ; çä    12 ; çä    1çä  )çä)
F1 20d338 20d0b8 0 20d438 0 0 2
BCH Single Life ShadowAcct Unrated COI Rate(calcType; benefitIndex;lifeparticipantIndex; yearIndex; vectorSolveParms)
Funktion
IF ( /*base or base increase*/ 'IndicatorCode is Base'('Policy Coverage IndicatorCode'(calcType;benefitIndex)) || 'IndicatorCode is BaseIncrease'('Policy Coverage IndicatorCode'(calcType;benefitIndex)) ; çä   //True - Get shadow account COI rates from shadow account rate modelçäRate('Policy Coverage ProductCode'(calcType;benefitIndex) & "_" & 'Policy CovOption ProductCode'(calcType;'STD Shadow CoverageIndex'(calcType);'STD Shadow coverageOptionIndex'(calcType));IF ('CalcType ShadowCatchUp Is Active'(calcType) ; çä    'ACCS CalcRule ShadowCatchUp COIRateType'('Policy CarrierCode';'Policy Coverage ProductCode'(calcType;benefitIndex);TransEffDate) ; çä    "SCOI"çä  );TransEffDate;'Vector BCH COIRate Parms'(calcType;benefitIndex;lifeparticipantIndex;yearIndex;vectorSolveParms)) ; çä //False - Use guaranteed rider rates from rider rate model for ridersçäRate('Policy Coverage ProductCode'(calcType;benefitIndex);"GCOI";TransEffDate;'Vector BCH COIRate Parms'(calcType;benefitIndex;lifeparticipantIndex;yearIndex;vectorSolveParms))çä)
F1 20d438 20d0b8 0 0 0 0 2
BCH Single Life Unrated Midpoint COI Rate Call(calcType; benefitIndex;lifeparticipantIndex; yearIndex; vectorSolveParms)
Funktion
('BCH Single Life Unrated COI Rate Call'(benefitIndex;lifeparticipantIndex;'CalcType Current'(calcType);yearIndex;vectorSolveParms) + 'BCH Single Life Unrated COI Rate Call'(benefitIndex;lifeparticipantIndex;'CalcType Guaranteed'(calcType);yearIndex;vectorSolveParms)) * 0.5
F1 20d4b8 209928 20d538 20d6b8 0 0 2
Vector BCH COIRate Parms(calcType; benefitIndex;lifeparticipantIndex; yearIndex; vectorSolveParms)
Funktion
'Vector Life Coverage Rate Vector Parms Build'(calcType;'COV Coverage Rate Type'(benefitIndex;calcType;yearIndex;12);benefitIndex;lifeparticipantIndex;yearIndex;vectorSolveParms;'Vector Life Coverage Rate Vector Parms GetQuery'(calcType;'COV Coverage Rate Type'(benefitIndex;calcType;yearIndex;12);benefitIndex;lifeparticipantIndex;yearIndex;vectorSolveParms))
F1 20d538 20d4b8 0 20d5b8 0 0 2
Vector Life Coverage Rate Vector Parms GetQuery(calcType; rateType; benefitIndex; lifeparticipantIndex; yearIndex; vectorParms)
Funktion
v_construct(Rate('Policy Coverage ProductCode'(calcType;benefitIndex);rateType & "_Query";TransEffDate;'Gen Vector Blank'))
F1 20d5b8 20d4b8 0 20d638 0 0 2
Vector Life Coverage Rate Vector Parms Build(calcType; rateType; benefitIndex; lifeparticipantIndex; vectorParms; yearIndex; vectorRateQuery)
Funktion
vectorx(dataItem;0;v_length(vectorRateQuery) - 1;'Vector Life Coverage Rate Vector Parms GetDataItemPair'(calcType;benefitIndex;lifeparticipantIndex;yearIndex;vectorParms;e_(vectorRateQuery;#dataItem)))
F1 20d638 20d4b8 0 0 0 0 2
Vector Life Coverage Rate Vector Parms GetDataItemPair(calcType; benefitIndex; lifeparticipantIndex; vectorParms; yearIndex; dataItem)
Funktion
v_(dataItem;CASE(toupper(dataItem);çä  "ISSUE_AGE" : 'Policy LifeParticipant IssueAge'(calcType;benefitIndex;lifeparticipantIndex);çä  "GENDER" : 'Policy LifeParticipant IssueGender'(calcType;benefitIndex;lifeparticipantIndex);çä  "UNDERWRITING_CLASS" : 'Policy LifeParticipant UnderwritingClass'(calcType;benefitIndex;lifeparticipantIndex;yearIndex);çä  "SMOKERSTATUS" : 'Policy LifeParticipant TobaccoPremiumBasis'(calcType;benefitIndex;lifeparticipantIndex;yearIndex);çä  "REGION" : "Africa";çä  "COUNTRYGROUP" : 'ACCS CalcRule CountryGroup'('Policy ProductCode';TransEffDate;'Life Nationality'(benefitIndex;lifeparticipantIndex));çä  "DURATION" : yearIndex;çä   : ERROR("Data Item not defined in 'Vector Life Coverage Rate Vector Parms GetDataItemPair': ";dataItem))çä)
F1 20d6b8 209928 0 20d738 0 0 2
Vector COV COIRate Parms(calcType; benefitIndex; yearIndex; vectorSolveParms)
Funktion
'Vector Life Coverage Rate Vector Parms Build'(calcType;'COV Coverage Rate Type'(benefitIndex;calcType;yearIndex;12);benefitIndex;0; //lifeparticipantIndex; çäyearIndex;vectorSolveParms;'Vector Life Coverage Rate Vector Parms GetQuery'(calcType;'COV Coverage Rate Type'(benefitIndex;calcType;yearIndex;12);benefitIndex;0; //lifeparticipantIndex; çäyearIndex;vectorSolveParms))
F1 20d738 209928 0 0 0 0 2
Vector COV EXPRate Parms(calcType; benefitIndex; yearIndex; table_identity)
Funktion
v_('Policy LifeParticipant IssueAge'(calcType;benefitIndex;0); // Duration of the specific coverageçäIF (benefitIndex <> 0 ; çä  yearIndex - 'Duration Year'('Policy Coverage EffDate'(calcType;benefitIndex);'Policy EffDate') + 1 ; çä  yearIndexçä);'Policy LifeParticipant IssueGender'(calcType;benefitIndex;0);'Policy LifeParticipant UnderwritingClass'(calcType;benefitIndex;0;yearIndex);'Policy LifeParticipant TobaccoPremiumBasis'(calcType;benefitIndex;0;yearIndex);1; // Band - Not currently used for premium load rate lookups çä'Policy Jurisdiction';table_identity;2; // Rule - Not currently used for premium load rate lookupsçä""; // Death benefit option - Not usedçä""; // Mortality or Morbidity Table - Not usedçä""; // Age Calculation Type - Not usedçä'Policy LifeParticipant SpecialClassCode'(calcType;benefitIndex;0))
F1 20d7b8 349ef58 20d838 0 0 0 2
-- Miscellaneous Functions --
Funktion

F1 20d838 20d7b8 0 20d8b8 0 0 2
BCH Model Name
Funktion
"PAGBenefitCharges"
F1 20d8b8 20d7b8 0 20d938 0 0 2
PLC PrimaryRate RateType(feeType)
Funktion
CASE(feeType;çä  21 : "LCHGRATE";çä  18 : "PREMTAX";çä   : 'Messages SystemMessage'("CA1059";'Message Language';v_('BCH Model Name';"'PLC PrimaryRate RateType'")))çä
F1 20d938 20d7b8 0 0 0 0 2
PLC SecondaryRate RateType(feeType)
Funktion
CASE(feeType;çä  21 : "LSECRATE";çä  18 : "PREMTAX";çä   : 'Messages SystemMessage'("CA1059";'Message Language';v_('BCH Model Name';"'PLC SecondaryRate RateType'")))çä
A0 2033ac 0 0 0 0 0 0

T0 203424 0 0 0 0 0 0

I0 20349c 0 20d9b8 0 0 0 0

I0 20d9b8 20349c 0 0 0 0 0
PAGNetAmountRisk.pms
-
O0
E0
L0
B0
P1
34805b8
F21
349ef58
349e1e8
207660
208120
208278
208608
208a60
209758
209928
2097d8
209fc0
20a1e8
20a678
20a828
20d4b8
20d6b8
20d738
20d7b8
20d838
20d8b8
20d938
A0
T0
!29
208120 -2 -2
çäModification Log:çä1/12/2011 - PAC013 calcType - BT - Restructure
208278 -2 -2
Description:  Returns the total projected charges for the month associated with the Coverages and CovOptions.çä çäModification Log:çä çä1/26/2011 - PAC013 CMC removed extra coverage and coverage option indexçä1/12/2011 - PAC013 calcType - BT - Restructureçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/2/2009 - PA1001 - NT - Use no. coverages from vector if applicable. çä01/11/2009 DT pA1001 cleaned up functionçä03/14/2008 CMC ILLUS001 pA Phase 2  Updated to add vectorSolveParms as a paramters this is used to pass death benefit option to the coi rate functions.çä10/31/2007 CSC Initial Calculation/Rule
208608 -2 -2
Description:  Returns the total projected coverage charges for coverages that aren't part of the NAR.çä çäModification Log:çä11/28/2013 pA-G1401 JC  Added lifeparticipantIndex ,replaced coverageIndex with benefitIndexçä1/12/2011 - PAC013 calcType - BT - Restructureçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/2/2009 - PA1001 - NT - Use no. coverages from vector if applicable. çä01/11/2009 DT pA1001 cleaned up functionçä03/14/2008 CMC ILLUS001 pA Phase 2  Updated to add vectorSolveParms as a paramters this is used to pass death benefit option to the coi rate functions.çä10/31/2007 CSC Initial Calculation/Rule
208a60 -2 -2
Description:  Returns True (i.e. 1) if the particular Coverage is to be included based on the calcType.çä çäModification Log:çä11/28/2013 pA-G1401 JC  Added lifeparticipantIndex ,replaced coverageIndex with benefitIndexçä12/29/2011 pA2110 CMC split inclusion rules between 7702 and illustration.çä11/21/2011 CL Regression CMC added pending status for 7702 calcs.çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä1/12/2011 - PAC013 calcType - BT - Restructureçä07/12/2010 - PAC013 calcType - BT - Remove double calcType parmçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä06/15/2010 RegTest JL - For non-Illus 7702 also check PolStat is activeçä02/22/2010 - wdp - PA1001 - for second and for true part of Is Illustration, added subtraction of coverage effective duration from yearIndex, since coverage maturity duration is used in that checkçä02/16/2010 - wdp - PA1001 - changed CoverageEffDur check to use yearIndex, rather than start yearçä11/12/2009 - wdp - added check so that coverage is not excluded past its RequestedMaturityDurationçä11/10/2009 - wdp - added equals sign for CoverageProduct MaturityDuration checkçä06/03/2009 - DT - PA1013 - added parm yearIndex to 'Std Coverage Is Pending'çä01/11/2009 DT pA1001 cleaned up functionçä09/11/2008 VPM028âModified to allow pending contracts to be includedçä03/17/2008 ILLUS001 pA Phase 2 Updated to allow a start duration to be passed for guideline and sevenpay calculations.çä10/31/2007 CSC Initial Calculation/Rule
208a60 0 2

209928 -2 -2
Description:  Returns the total projected charges for the month associated with the particular Coverage.çä çäModification Log:çä1/12/2011 - PAC013 calcType - BT - Restructureçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä05/21/2010 - Performance - rm - Moved decision to call 'COV Projected Monthly Total Coverage WMD Charge' outside of function.çä03/17/2008 ILLUS001 pA Phase 2 added vectorSolveParms to covoptionfunctions for duration passingçä03/14/2008 CMC ILLUS001 pA Phase 2  Updated to add vectorSolveParms as a paramters this is used to pass death benefit option to the coi rate functions.çä10/31/2007 CSC Initial Calculation/Rule
2097d8 -2 -2
Description:  Returns the total projected charges for the month associated with the particular Coverage not including the waiver of monthly deduction charges.çä çäModification Log:çä1/12/2011 - PAC013 calcType - BT - Restructureçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä01/11/2009 DT pA1001 cleaned up functionçä03/17/2008 ILLUS001 pA Phase 2 added vectorSolveParms to covoptionfunctions for duration passingçä03/14/2008 CMC ILLUS001 pA Phase 2  Updated to add vectorSolveParms as a paramters this is used to pass death benefit option to the coi rate functions.çä10/31/2007 CSC Initial Calculation/Rule
209fc0 -2 -2
Description:  Returns the projected monthly COI charge associated with the particular coverage for the year and month.çä çäModification Log:çä11/28/2013 pA-G1401 JC  Added lifeparticipantIndex ,replaced coverageIndex with benefitIndexçä1/12/2011 - PAC013 calcType - BT - Restructureçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä02/18/2009 CMC Change in the name of the rounding number of decimals function to be çäless product line specificçä01/11/2009 DT pA1001 cleaned up functionçä03/14/2008 CMC ILLUS001 pA Phase 2  Updated to add vectorSolveParms as a paramters this is used to pass death benefit option to the coi rate functions.çä10/31/2007 CSC Initial Calculation/Rule
20a1e8 -2 -2
Description:  Returns the Coverage for the month associated with the particular Coverage for Coverages which are not part of the NAR.çäAssumption:  Base fees will come from the Fee object off of PolicyProduct.  We aren't currently considering fees defined under the CoverageProduct or CovOptionProduct objects.çä çäModification Log:çä11/28/2013 pA-G1401 JC  Added a function to includer waiver of premium.çä11/28/2013 pA-G1401 JC  Added lifeparticipantIndex ,replaced coverageIndex with benefitIndexçä8/13/2012- PAC029 - Integrated Term Rider - JC-Adjusted so that NAR Costs are not passed throughçä2/9/2011 - PAC013 calcType - BT - Restructureçä1/12/2011 - PAC013 calcType - BT - Restructureçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/27/2009 - PAC006 - wdp - Changed function to get number of units from the solve vector, if it is presentçä10/27/2009 - PAC001 - wdp - Added check to make sure ltc claims amounts are not taken into account when calculating Load Target Premiumçä02/18/2009 CMC Change in the name of the rounding number of decimals function to be less product line specific.çä1/18/2009 - NT - pa1001 - cleaned up valuePerUnit (from PD, not Input)çä01/11/2009 DT pA1001 cleaned up functionçä03/14/2008 CMC ILLUS001 pA Phase 2  Updated to add vectorSolveParms as a paramters this is used to pass death benefit option to the coi rate functions.çä10/31/2007 CSC Initial Calculation/Ruleçä
20a678 -2 -2
Description:  Returns the total projected waiver of monthly deduction charges for the month associated with the particular Coverage based on the coverage charges other than WMD.çä çäModification Log:çä1/12/2011 - PAC013 calcType - BT - Restructureçä8/11/2010 - PAC013 calcType - BT - Change order of COV CovOption COI Rate parmsçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä5/21/2010 -pA Performance - rm - Moved validation of WMD existence and inclusion to higher functionçä02/18/2009 CMC Change in the name of the rounding number of decimals function to be çäless product line specific.çä01/11/2009 DT pA1001 cleaned up functionçä03/17/2008 ILLUS001 pA Phase 2 added vectorSolveParms to covoptionfunctions for duration passingçä10/31/2007 CSC Initial Calculation/Rule
20a7a8 -2 -2
Description:  Returns the cumulative life to date Coverage OptionçäModification Log:çä11/28/2013 pA-G1401 JC  Added lifeparticipantIndex ,replaced coverageIndex with benefitIndexçä9/19/2012-PAC027 -  Tax Reporting Changes - JC-Added Function.çä
20a6f8 -2 -2
Description:  Returns the cumulative life to date Coverage OptionçäModification Log:çä11/28/2013 pA-G1401 JC  Added lifeparticipantIndex ,replaced coverageIndex with benefitIndexçä9/19/2012-PAC027 -  Tax Reporting Changes - JC-Added Function.
20a828 -2 -2
Description:  Returns the rate type to use for the particular coverage.çä çäModification Log:çä11/28/2013 pA-G1401 JC  Added lifeparticipantIndex ,replaced coverageIndex with benefitIndexçä04/06/2011 wmA merge regresion CMC changed to use coverage is XX function.çä07/15/2010 CMC wmA Integration ENH1011 Update Policy Coverage LifeCovTypeCode to PI CoverageProduct LifeCovTypeCodeçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä01/11/2009 DT pA1001 cleaned up functionçä10/31/2007 CSC Initial Calculation/Rule
20cf38 -2 -2
Description:  Returns the coi rate for the particular coverage, including substandard ratings.çäAssumption:  Table ratings and flat extras will be applied to joint life coi's in the Frazier blending  functions.çä çäModification Log:çä11/28/2013 pA-G1401 JC  Added lifeparticipantIndex ,replaced coverageIndex with benefitIndexçä03/03/2013 - PAD1213 - JL - Use "Std Coverage is Inforce" instead of "Coverage is Inforce"; use 7702 adjusted yearindex in durational parm for Inforce check.çä12/29/2011 CMC pA2113 updated timing on inforce checkçä1/12/2011 - PAC013 calcType - BT - Restructureçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä06/03/2009 - DT - PA1013 - added parm yearIndex to 'Coverage Is InForce'çä01/11/2009 DT pA1001 cleaned up functionçä03/14/2008 CMC ILLUS001 pA Phase 2  Updated to add vectorSolveParms as a paramters this is used to pass death benefit option to the coi rate functions.çä10/31/2007 CSC Initial Calculation/Rule
20cfb8 -2 -2
Description:  Returns the single life coi rate for the particular coverage, including substandard ratings.çä çäModification Log:çä11/28/2013 pA-G1401 JC  Added lifeparticipantIndex ,replaced coverageIndex with benefitIndexçä10/03/2012 PAC028 Shadow Catch Up JL - Increase COI under Shadow Catch Up calcType by a pct.çä04/24/2012 pA PAD-821 CMC removed vector function all to targetRatefile for temporary table ratings.çä12/29/2011 pA2110 CMC added temp table ratings.çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä1/12/2011 - PAC013 calcType - BT - Restructureçä07/28/2010 ENH922 JL Include Percentage Loadingçä07/12/2010 - PAC013 calcType - BT - Remove double calcType parmçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä01/11/2009 DT pA1001 cleaned up functionçä03/14/2008 CMC ILLUS001 pA Phase 2  Updated to add vectorSolveParms as a paramters this is used to pass death benefit option to the coi rate functions.çä10/31/2007 CSC Initial Calculation/Rule
20d038 -2 -2
Description: Retrieve COI rate from input or internallyçä çäModification Log:çä11/28/2013 pA-G1401 JC  Added lifeparticipantIndex ,replaced coverageIndex with benefitIndexçä1/12/2011 - PAC013 calcType - BT - Restructureçä8/13/2010 - PAC019 Rate Access Var - BT - change nameçä8/11/2010 - PAC019 - Rate Access Var - BT - added input logic and now call 'COV Single Life Unrated COI Rate Access'çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä08/24/2009 - PAC006 - vm - coverted the calcType to a format that is compatible later in coding.çä07/31/2009 - PAC006 - wdp - Added subfunction to simplify function above.çä01/11/2009 DT pA1001 cleaned up functionçä12/04/2008 CSC Added check 'Is Product Indexed Universal Life' with 'Is Product Variable Universal Life'çä11/17/2008 CSC added ILLUS calc type for ULDisbSolve Cash Valueçä03/14/2008 CMC ILLUS001 pA Phase 2  Updated to all vectorSolveParms as a paramters this is used to pass death benefit option to the coi rate functions.çä01/03/2008 CMC ILLUS001 pA Phase 2  updated to allow for assumed illustrations for fixed products and 4 options for variable products.çä03/07/2007 CSC Illustrations ILLUS001 Renamed CONST to Constantçä10/31/2007 CSC Initial Calculation/Rule
20d0b8 -2 -2
Description:  Returns the coi rate for the particular coverage, not including substandard ratings.çä çäModification Log:çä11/28/2013 pA-G1401 JC  Added lifeparticipantIndex ,replaced coverageIndex with benefitIndexçä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä2/9/2011 - PAC013 calcType - BT - Restructureçä2/8/2011 - PAC013 calcType - BT - cleaned up and simplified codeçä1/12/2011 - PAC013 calcType - BT - Restructureçä08/6/2010 - PAC019 - Rate Access Var - BT - rename from "COV Single Life Unrated COI Rate" to "COV Single Life Unrated COI Rate Access"çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä04/28/2010 ENH922 JL Add Shadow Target Premium ("SHGT") calctypeçä08/24/2009 - PAC006 - vm - coverted the calcType to a format that is compatible later in coding.çä07/31/2009 - PAC006 - wdp - Added subfunction to simplify function above.çä01/11/2009 DT pA1001 cleaned up functionçä12/04/2008 CSC Added check 'Is Product Indexed Universal Life' with 'Is Product Variable Universal Life'çä11/17/2008 CSC added ILLUS calc type for ULDisbSolve Cash Valueçä11/17/2008 CSC added ILLUS calc type for ULDisbSolve Cash Valueçä03/14/2008 CMC ILLUS001 pA Phase 2  Updated to all vectorSolveParms as a paramters this is used to pass death benefit option to the coi rate functions.çä01/03/2008 CMC ILLUS001 pA Phase 2  updated to allow for assumed illustrations for fixed products and 4 options for variable products.çä10/31/2007 CSC Initial Calculation/Ruleçä03/07/2007 CSC Illustrations ILLUS001 Renamed CONST to Constant
20d1b8 -2 -2
çäModification Log:çä11/28/2013 pA-G1401 JC  Added lifeparticipantIndex ,replaced coverageIndex with benefitIndexçä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä1/12/2011 - PAC013 calcType - BT - Restructure
20d2b8 -2 -2
Modification log:çä11/28/2013 pA-G1401 JC  Added lifeparticipantIndex ,replaced coverageIndex with benefitIndexçä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä11/11/2010 pA PAD-819 TestingâCMCâfor premium rate types used in UL contracts divide the annual premium rate by 12.çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/26/2009 - PAC006 - wdp - Changed Rate Parms for PctOfBase Coverage tot that of coverage, rather than Base Coverage'sçä07/31/2009 - PAC006 - wdp - Added subfunction to simplify function above.çä01/11/2009 DT pA1001 cleaned up function
20d338 -2 -2
Description:  Returns the shadow account coi rate for the particular coverage, not including substandard ratings.çä çäModification Log:çä11/28/2013 pA-G1401 JC  Added lifeparticipantIndex ,replaced coverageIndex with benefitIndexçä10/03/2012 PAC028 Shadow Catch Up JL - Shadow Catchup may use it's own rate tableçä1/12/2011 - PAC013 calcType - BT - Restructureçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä01/11/2009 DT pA1001 cleaned up functionçä03/14/2008 CMC ILLUS001 pA Phase 2  Updated to add vectorSolveParms as a paramters this is used to pass death benefit option to the coi rate functionsçä10/31/2007 CSC Initial Calculation/Rule
20d438 -2 -2
çäModification Log:çä11/28/2013 pA-G1401 JC  Added lifeparticipantIndex ,replaced coverageIndex with benefitIndexçä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä1/12/2011 - PAC013 calcType - BT - Restructure
20d4b8 -2 -2
Description: Build vector for rate model call.çä çäModification Log:çä11/28/2013 pA-G1401 JC  Added lifeparticipantIndex ,replaced coverageIndex with benefitIndexçä11152013 pA-G1401 JL Initial Rule
20d538 -2 -2
Description: Query the rate model to ascertain which data items are required for a rates call.çä çäModification Log:çä11152013 pA-G1401 JL Initial Rule
20d5b8 -2 -2
Description: Build rate access vectorçä çäModification Log:çä11/28/2013 pA-G1401 JC  Added lifeparticipantIndex ,replaced coverageIndex with benefitIndexçä11152013 pA-G1401 JL Initial Rule
20d638 -2 -2
Description: Returns the vector for the parameters needed for a premium rate access call a Coverage.çä çäModification Log:çä11/28/2013 pA-G1401 JC  Added lifeparticipantIndex ,replaced coverageIndex with benefitIndexçä11152013 pA-G1401 JL Initial Rule
20d6b8 -2 -2
Description:  Returns the vector for the call to the rate access for COI rates.çä çäModification Log:çä07/28/2010 ENH922 JL Add SpecialClassCode as element 12 in vectorçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/27/2009 - PAC006 - wdp - Added benefitIndex parameter to SharedVector SolveParms FaceAmount functionsçä10/11/2009 - PAC009 - JL - If FA given in vectorSolveParms, use BandCode given FA function (for solves)çä09/14/2009 - PAC006 - wdp - Changed BandCode Lookup so that it uses yearIndex instead of TransEffDurçä01/12/2009 DT pA1001 cleaned up functionçä10/31/2007 CSC Initial Calculation/Rule
20d738 -2 -2
Description:  Returns the vector needed to be passed to the rate function returning expense rates.çä çäModification Log:çä11/28/2013 pA-G1401 JC  Added lifeparticipantIndex ,replaced coverageIndex with benefitIndexçä07/28/2010 ENH922 JL Add SpecialClassCode as element 12 in vectorçä06/28/2010 ENH922 JL Initial Calculation/Ruleçä
20d8b8 -2 -2
Description:  Returns the rate time for the Primary Percent of Premium depending on fee typeçä çäModification Log:çä5/20/2011 wmA-J CMC Initial Calc
20d938 -2 -2
Description:  Returns the rate time for the Secondary Percent of Premium depending on fee typeçä çäModification Log:çä5/20/2011 wmA-J CMC Initial Calc
;Offset=00000000
