;1	08.12.2016 13:38:32	jlawrie2	
X0 24e32f4 0 24e5168 0 0 0 0

X0 24e5168 24e32f4 24e69a8 0 0 0 0
-- All Test Cases --
X0 24e69a8 24e5168 24e6a70 24e6d00 0 0 0
-- Premium Solve Results --
X39 24e6a70 24e69a8 0 0 0 0 2
Solve Test Initial Premium Guess
0//'Solve Test Initial Premium Guess'(1000000; "C"; 1000000; 65; 65; 3.5; 0.01; 0.001; 999)
0
INPUT Policy ProductCode
UL1PA
INPUT TransEffDate
01/01/2006
INPUT Calling System
I1
INPUT Policy CarrierCode
00
INPUT Policy Jurisdiction
51
INPUT Policy EffDate
01/01/2006
INPUT Policy Coverage ProductCode
UL1PA
INPUT Policy Coverage IndicatorCode
1
INPUT Policy Coverage LifeCovTypeCode
9
INPUT Policy LifeParticipant IssueAge
35
INPUT Policy LifeParticipant IssueGender
1
INPUT Policy LifeParticipant UnderwritingClass
1
INPUT Policy LifeParticipant TobaccoPremiumBasis
1
INPUT Policy Coverage BandCode
3
INPUT Policy Coverage DeathBenefitOptType
1
INPUT Policy LifeParticipant PermTableRating
1
INPUT Policy LifeParticipant PermFlatExtraAmount
0
INPUT Policy LifeParticipant TempFlatExtraAmount
0
INPUT Policy LifeParticipant number of SubstandardRating
0
INPUT Message Language
9
INPUT Policy number of Coverage
1
INPUT Policy Coverage CurrentNumberOfUnits
1000
INPUT Policy Coverage LifeCovStatus
1
INPUT Policy Coverage EffDate
01/01/2006
INPUT Policy Coverage TermDate
01/01/2071
INPUT Policy Coverage TargetPremAmount
1000000
INPUT Policy number of CoverageOption
0
INPUT Calling Program
VPMSTEST
INPUT Illus FaceAmtDesignType
1000500001
INPUT Policy Coverage TargetPremAmt
1000
INPUT Policy ProductVersionCode

INPUT Policy Coverage RequestedMaturityDur
20
INPUT Policy Coverage ProductVersionCode
1
INPUT Policy LifeParticipant PermFlatExtraAmt
0
INPUT Policy LifeParticipant TempFlatExtraAmt
0
INPUT Policy Coverage RequestedEffDur
1
INPUT Policy ProductType
0
INPUT Policy LifeParticipant SpecialClassCode
0
X38 24e6d00 24e5168 0 24e7490 0 0 2
Solve Test Initial Premium Guess
0//'Solve Test Initial Premium Guess'(1000000; "GLP"; 1000000; 65; 65; 4; 0.01; 0.001; 999)
0
INPUT Policy Coverage ProductCode
UL1PA
INPUT Policy EffDate
01/01/2006
INPUT Calling System
I1
INPUT Policy CarrierCode
00
INPUT Policy Jurisdiction
1000
INPUT Policy Coverage IndicatorCode
1
INPUT Policy Coverage EffDate
01/01/2006
INPUT Policy ProductCode
UL1PA
INPUT Policy Coverage LifeCovTypeCode
9
INPUT TransEffDate
01/01/2006
INPUT Policy LifeParticipant IssueAge
35
INPUT Policy LifeParticipant IssueGender
1
INPUT Policy LifeParticipant UnderwritingClass
1
INPUT Policy LifeParticipant TobaccoPremiumBasis
1
INPUT Policy Coverage BandCode
3
INPUT Policy Coverage DeathBenefitOptType
1
INPUT Policy LifeParticipant PermTableRating
1
INPUT Policy LifeParticipant PermFlatExtraAmount
0
INPUT Policy LifeParticipant TempFlatExtraAmount
0
INPUT Policy LifeParticipant number of SubstandardRating
0
INPUT Message Language
9
INPUT Policy number of Coverage
1
INPUT Policy Coverage LifeCovStatus
1
INPUT Policy Coverage TermDate
01/01/2071
INPUT Policy Coverage CurrentNumberOfUnits
1000
INPUT Policy number of CoverageOption
0
INPUT Policy Coverage TargetPremAmount
1000
INPUT Calling Program
VPMSTEST
INPUT Illus FaceAmtDesignType
1000500001
INPUT Policy Coverage TargetPremAmt
1000
INPUT Policy ProductVersionCode

INPUT Policy Coverage RequestedMaturityDur
20
INPUT Policy Coverage ProductVersionCode
1
INPUT Policy LifeParticipant PermFlatExtraAmt
0
INPUT Policy LifeParticipant TempFlatExtraAmt
0
INPUT Policy Coverage RequestedEffDur
1
INPUT Policy ProductType
0
X1 24e7490 24e5168 0 0 0 0 2
Duration Year
'Duration Year'("01/01/2008"; "01/01/2006")
3
O0 24e31a4 0 0 0 0 0 0

E0 24e3214 0 0 0 0 0 0

L0 24e3284 0 0 0 0 0 0

B0 24e3444 0 0 0 0 0 0

P3 24e3364 0 24e7f68 0 0 0 2

--description
Common sub-model containing common premium solve functions used throughout the models.çä çäPremium solve, initial premium guess, vector extraction, and test/debug functions are some of the functionality included here.çä çäRELEASE LOG:çäRELEASE 1301 - SCARAB/JIRA issues PAD1213çäRELEASE 1301 - PAC029 Integrated Term RiderçäRELEASE 1301 - wmA-J DevelopmentçäRELEASE wmA 1001 - ENH922çäRELEASE 1101 - PAC013 calcType
LICENSENAME
"csc us internal use only - workbench"
COMPILERVERSION
"4.5.4"
P13 24e7f68 24e3364 0 0 0 0 2
Solve Model
IncType
mandatory
IncRule

IncValue

OUTPUT Comment
"Model:   Common solve model.  Contains functions for iterative solves.çä Author:  John Heumannçä Date:     12/04/2006 çä Modification Log:çä Date              Modeler               Change Descriptionçä 12/04/2006     John Heumann     Created model.çä"
OUTPUT Runtime Version
"1.0.0"
OUTPUT Runtime Date
"04/22/2016"
OUTPUT Source Version Computer
"VPMS_SERVER"
OUTPUT Source Version File
"Solve.pms"
OUTPUT Source Version Number
'GEN VersionInfo'
OUTPUT Source Version Date
"04/22/2016"
OUTPUT Source Version Author
"CC"
OUTPUT Source Version Comment
"PA1603 Delivery"
OUTPUT Audit History Block
"04/22/2016 PA1601 Delivery"
F0 24e33d4 0 24e83b0 0 0 0 0

F1 24e83b0 24e33d4 24e8338 0 0 0 2
:Solve
Funktion

F1 24e8338 24e83b0 24e84f8 2648198 0 0 2
-- Premium Solve Test Functions --
Funktion

F1 24e84f8 24e8338 24e85b0 24e8f60 0 0 2
Solve Test Initial Premium Guess(baseFace; calcType; targetCashValue; targetDuration; premiumDuration; int_rate; cashValueTolerance; premiumValueTolerance; stopIteration)
Funktion
'Solve Initial Premium Guess'('SharedVector SolveParms MakeFaceAmount'(calcType;baseFace);v_(calcType;targetCashValue;targetDuration;premiumDuration;int_rate;cashValueTolerance;premiumValueTolerance;stopIteration;'Solve Test CVAddlInfo Vector'(calcType)))
F1 24e85b0 24e84f8 24e8668 24e8840 0 0 2
Solve Test Init Guess Annualize PV Charges(baseFace; calcType; targetCashValue; targetDuration; premiumDuration; int_rate; cashValueTolerance; premiumValueTolerance; stopIteration)
Funktion
'Solve Init Guess Annualize PV Charges'(baseFace;v_(calcType;targetCashValue;targetDuration;premiumDuration;int_rate;cashValueTolerance;premiumValueTolerance;stopIteration;'Solve Test CVAddlInfo Vector'(calcType)))
F1 24e8668 24e85b0 0 0 0 0 2
Solve Test Init Guess Total Charges(baseFace; calcType; targetCashValue; targetDuration; premiumDuration; int_rate; cashValueTolerance; premiumValueTolerance; stopIteration; yearIndex)
Funktion
'Solve Init Guess Total Charges'(baseFace;v_(calcType;targetCashValue;targetDuration;premiumDuration;int_rate;cashValueTolerance;premiumValueTolerance;stopIteration;'Solve Test CVAddlInfo Vector'(calcType));yearIndex)
F1 24e8840 24e84f8 24e8a18 0 0 0 2
Solve Test Annualize PV Payment Factor(calcType; targetCashValue; targetDuration; premiumDuration; int_rate; cashValueTolerance; premiumValueTolerance; stopIteration)
Funktion
'Solve Init Guess Annualize PV Payment Factor'(v_(calcType;targetCashValue;targetDuration;premiumDuration;int_rate;cashValueTolerance;premiumValueTolerance;stopIteration;'Solve Test CVAddlInfo Vector'(calcType));'GEN Vector Blank')
F1 24e8a18 24e8840 0 24e8d28 0 0 2
Solve Test Net Premium Factor(baseFace; calcType; targetCashValue; targetDuration; premiumDuration; int_rate; cashValueTolerance; premiumValueTolerance; stopIteration; yearIndex)
Funktion
'Solve Net Premium Factor'(v_(calcType;targetCashValue;targetDuration;premiumDuration;int_rate;cashValueTolerance;premiumValueTolerance;stopIteration;'GEN Vector Blank');yearIndex;1)
F1 24e8d28 24e8840 0 0 0 0 2
SLV Test Premium Load Premium Guess(baseFace; calcType; targetCashValue; targetDuration; premiumDuration; int_rate; cashValueTolerance; premiumValueTolerance; stopIteration; yearIndex)
Funktion
'SLV IG Premium Load Premium Guess'(calcType;baseFace;v_(calcType;targetCashValue;targetDuration;premiumDuration;int_rate;cashValueTolerance;premiumValueTolerance;stopIteration;'GEN Vector Blank'))
F1 24e8f60 24e8338 24e9bd8 24e9d88 0 0 2
Solve Test Iterative Premium Solve(baseFace; calcType; targetCashValue; targetDuration; premiumDuration; int_rate; cashValueTolerance; premiumValueTolerance; stopIteration; elemNum)
Funktion
e_('Solve Iterative Premium Solve Rec'( // Current premium guessçä'Solve Initial Premium Guess'('SharedVector SolveParms MakeFaceAmount'(calcType;baseFace);'Vector SLV Premium Solve Search Criteria'(calcType;targetCashValue;targetDuration;premiumDuration;int_rate;cashValueTolerance;premiumValueTolerance;stopIteration;'Solve Test CVAddlInfo Vector'(calcType))); // Current cash valueçä'CVProjection Monthly End Of Month Cash Value Rec'(calcType;'SharedVector SolveParms MakePremium'('Solve Initial Premium Guess'('SharedVector SolveParms MakeFaceAmount'(calcType;baseFace);'Vector SLV Premium Solve Search Criteria'(calcType;targetCashValue;targetDuration;premiumDuration;int_rate;cashValueTolerance;premiumValueTolerance;stopIteration;'Solve Test CVAddlInfo Vector'(calcType)));premiumDuration);int_rate;'Solve Test CVAddlInfo Vector'(calcType);targetDuration;12);0; //prev prem guessçä0; //prevCashValueçä'Solve Initial Premium Guess'('SharedVector SolveParms MakeFaceAmount'(calcType;baseFace);'Vector SLV Premium Solve Search Criteria'(calcType;targetCashValue;targetDuration;premiumDuration;int_rate;cashValueTolerance;premiumValueTolerance;stopIteration;'Solve Test CVAddlInfo Vector'(calcType))) * 0.9; //low boundçä'Solve Initial Premium Guess'('SharedVector SolveParms MakeFaceAmount'(calcType;baseFace);'Vector SLV Premium Solve Search Criteria'(calcType;targetCashValue;targetDuration;premiumDuration;int_rate;cashValueTolerance;premiumValueTolerance;stopIteration;'Solve Test CVAddlInfo Vector'(calcType))) * 1.1; //low boundçä1;'Vector SLV Premium Solve Search Criteria'( //vectorSearchCriteriaçäv_(calcType;0;0);targetCashValue;targetDuration;premiumDuration;int_rate;cashValueTolerance;premiumValueTolerance;stopIteration;'Solve Test CVAddlInfo Vector'(calcType));'SharedVector SolveParms MakeFaceAmount'(calcType;baseFace));elemNum //element no. to be extracted from the vector that the f_Iterative_Premium_Solve_Rec function returnsçä) // i.e from v_(currPremGuess; currCashValue; lowBound; highBound; iteration_num)çä
F1 24e9bd8 24e8f60 0 0 0 0 2
Solve Test CVAddlInfo Vector(calcType)
Funktion
V_(0;0;0;'GEN Vector Blank';0;'GEN Vector Blank';IF ('CalcType LTGT Is Active'(calcType) ; çä  'GEN Vector Blank' ; çä   // ElseâçäVECTORX(cov;0;'Policy Number Of Coverage'(calcType;TransEffDur) - 1;V_('Policy Coverage TargetPremAmt'(#cov);#cov + 1))çä);'Duration Year'(TransEffDate;'Policy EffDate');1)
F1 24e9d88 24e8338 24e9e40 0 0 0 2
Solve Test FuncRef Iterative Premium Solve(baseFace; calcType; targetCashValue; targetDuration; premiumDuration; int_rate; cashValueTolerance; premiumValueTolerance; stopIteration; elemNum)
Funktion
e_('Solve Test Iterative Premium Solve Rec'( // Current premium guessçä'Solve Initial Premium Guess'('SharedVector SolveParms MakeFaceAmount'(calcType;baseFace);'Vector SLV Premium Solve Search Criteria'(calcType;targetCashValue;targetDuration;premiumDuration;int_rate;cashValueTolerance;premiumValueTolerance;stopIteration;v_(0;0;0;'GEN Vector Blank';0;'GEN Vector Blank';'GEN Vector Blank'))); // Current cash valueçä'Solve Test CV Projection'(calcType;'SharedVector SolveParms MakePremium'('Solve Initial Premium Guess'('SharedVector SolveParms MakeFaceAmount'(calcType;baseFace);'Vector SLV Premium Solve Search Criteria'(calcType;targetCashValue;targetDuration;premiumDuration;int_rate;cashValueTolerance;premiumValueTolerance;stopIteration;v_(0;0;0;'GEN Vector Blank';0;'GEN Vector Blank';'GEN Vector Blank')));premiumDuration);int_rate;v_(0;0;0;'GEN Vector Blank';0;'GEN Vector Blank';'GEN Vector Blank');targetDuration;12);0; //prev prem guessçä0; //prevCashValueçä0; //low boundçä'Policy Coverage InitCovAmt'(calcType;0); //high boundçä1;'Vector SLV Premium Solve Search Criteria'( //vectorSearchCriteriaçäv_(calcType;0;0);targetCashValue;targetDuration;premiumDuration;int_rate;cashValueTolerance;premiumValueTolerance;stopIteration;v_(0;0;0;'GEN Vector Blank';0;'GEN Vector Blank';'GEN Vector Blank')));elemNum //element no. to be extracted from the vector that the f_Iterative_Premium_Solve_Rec function returnsçä) // i.e from v_(currPremGuess; currCashValue; lowBound; highBound; iteration_num)çä
F1 24e9e40 24e9d88 2648098 0 0 0 2
Solve Test Iterative Premium Solve Rec(currPremGuess; currCashValue; prevPremiumGuess; prevCashValue; lowBound; highBound; iteration_num; vectorSearchCriteria)
Funktion
IF ((ABS(currCashValue - 'Solve Criteria Target CV'(vectorSearchCriteria)) < 'Solve Criteria CV Tolerance'(vectorSearchCriteria)) || (ABS(prevPremiumGuess - currPremGuess) < 'Solve Criteria Premium Tolerance'(vectorSearchCriteria)) || (iteration_num >= 'Solve Criteria Requested Stop Duration'(vectorSearchCriteria)) ; çä   // Either the premium was successfully found, or the requested stop iteration (used for debugging purposes) was reachedçäv_(currPremGuess;currCashValue;prevPremiumGuess;prevCashValue;lowBound;highBound;iteration_num) ; çä   //  Else give up if we can't get a successful result after 100 iterationsçäIF (iteration_num > 100 ; çä    'Messages SystemMessage'("CA1044";'Message Language';'GEN Vector Blank') ; çä     // Else call this function recursively againçä'Solve Test Iterative Premium Solve Rec'( // New current premium guessçä'Solve Premium Guess'(currPremGuess;currCashValue;prevPremiumGuess;prevCashValue;'Solve Criteria Target CV'(vectorSearchCriteria);'Solve Criteria Premium Tolerance'(vectorSearchCriteria);lowBound;highBound;iteration_num); // New current cash valueçä'Solve Test CV Projection'('CalcType SolveCriteria'(vectorSearchCriteria);'SharedVector SolveParms MakePremium'('Solve Premium Guess'(currPremGuess;currCashValue;prevPremiumGuess;prevCashValue;'Solve Criteria Target CV'(vectorSearchCriteria);'Solve Criteria Premium Tolerance'(vectorSearchCriteria);lowBound;highBound;iteration_num);'Solve Criteria Premium Duration'(vectorSearchCriteria));'Solve Criteria Interest Rate'(vectorSearchCriteria;0);'GEN Vector Blank';'Solve Criteria Target Duration'(vectorSearchCriteria);12); // New previous premium guess   çäcurrPremGuess; // New previous cash valueçäcurrCashValue; // lowBoundâçäIF (currCashValue < 'Solve Criteria Target CV'(vectorSearchCriteria) ; çä       // Premium guess was too low, increase lower boundçäMAX(lowBound;currPremGuess) ; çä       // Else premium guess was too high.  Keep lower bound the sameçälowBoundçä    ); // highBoundçäIF (currCashValue > 'Solve Criteria Target CV'(vectorSearchCriteria) ; çä     // Premium guess was too high, lower high boundâçäMIN(highBound;currPremGuess) ; çä     // Else premium guess was too low.  Keep high bound the sameçähighBoundçä  );iteration_num + 1;vectorSearchCriteria)çä)çä)
F1 2648098 24e9e40 0 0 0 0 2
Solve Test CV Projection(calcType; vectorSolveParms; projInterestRate; vectorAddlInfo; yearIndex; monthIndex)
Funktion
IF ('CalcType LTGT Is Active'(calcType) ; çä  docall(funcref('CVProjection Annualize EOY Cash Value Rec');calcType;vectorSolveParms;projInterestRate;vectorAddlInfo;yearIndex) ; çä  docall(funcref('CVProjection Monthly End Of Month Cash Value Rec');calcType;vectorSolveParms;projInterestRate;vectorAddlInfo;yearIndex;monthIndex)çä)
F1 2648198 24e83b0 2648360 264b278 0 0 2
-- Premium Solve Functions --
Funktion

F1 2648360 2648198 0 2648f00 0 0 2
Solve Iterative Premium Solve Rec(currPremGuess; currCashValue; prevPremiumGuess; prevCashValue; lowBound; highBound; iteration_num; vectorSearchCriteria; vectorSolveParms)
Funktion
IF ( /*Tolerance reached*/ (ABS(currCashValue - 'Solve Criteria Target CV'(vectorSearchCriteria)) < 'Solve Criteria CV Tolerance'(vectorSearchCriteria)) || (ABS(prevPremiumGuess - currPremGuess) < 'Solve Criteria Premium Tolerance'(vectorSearchCriteria)) || (iteration_num >= 'Solve Criteria Requested Stop Duration'(vectorSearchCriteria)) ; çä   // Either the premium was successfully found, or the requested stop iteration (used for debugging purposes) was reachedçäv_(currPremGuess;currCashValue;prevPremiumGuess;prevCashValue;lowBound;highBound;iteration_num) ; çä   //  Else give up if we can't get a successful result after 100 iterationsçäIF ( /*Too many iterations?*/ iteration_num > 100 ; çä     /*return error message*/ 'Messages SystemMessage'("CA1044";'Message Language';'GEN Vector Blank') ; çä     // Else call this function recursively againçä'Solve Iterative Premium Solve Rec'( // New current premium guessçä'Solve Premium Guess'(currPremGuess;currCashValue;prevPremiumGuess;prevCashValue;'Solve Criteria Target CV'(vectorSearchCriteria);'Solve Criteria Premium Tolerance'(vectorSearchCriteria);lowBound;highBound;iteration_num); // New current cash valueçä'CVProjection Monthly End Of Month Cash Value Rec'('CalcType SolveCriteria'(vectorSearchCriteria);'SharedVector SolveParms ReplacePremium'('Solve Premium Guess'(currPremGuess;currCashValue;prevPremiumGuess;prevCashValue;'Solve Criteria Target CV'(vectorSearchCriteria);'Solve Criteria Premium Tolerance'(vectorSearchCriteria);lowBound;highBound;iteration_num);'Solve Criteria Premium Duration'(vectorSearchCriteria);vectorSolveParms);'Solve Criteria Interest Rate'(vectorSearchCriteria;0);'Solve Criteria Addl Info'(vectorSearchCriteria);'Solve Criteria Target Duration'(vectorSearchCriteria);12); // New previous premium guess   çäcurrPremGuess; // New previous cash valueçäcurrCashValue; // lowBoundâçäIF ( /*Premium guess too low*/ currCashValue < 'Solve Criteria Target CV'(vectorSearchCriteria) ; çä       // Premium guess was too low, increase lower boundçäMAX(lowBound;currPremGuess) ; çä       // Else premium guess was too high.  Keep lower bound the sameçälowBoundçä    ); // highBoundçäIF ( /*Premium gues too high*/ currCashValue > 'Solve Criteria Target CV'(vectorSearchCriteria) ; çä     // Premium guess was too high, lower high boundâçäMIN(highBound;currPremGuess) ; çä     // Else premium guess was too low.  Keep high bound the sameçähighBoundçä  );iteration_num + 1;vectorSearchCriteria;vectorSolveParms)çä)çä)
F1 2648f00 2648198 7d5f33e9 2649b68 0 0 2
Solve Iterative Premium Solve Rec2(currPremGuess; currCashValue; prevPremGuess; prevCashValue; lowBound; highBound; iteration_num; vectorSearchCriteria; vectorSolveParms)
Funktion
IF ( /*Tolerance reached*/ (ABS(currCashValue /*- 'Solve Criteria Target CV'(vectorSearchCriteria)*/ ) < 'Solve Criteria CV Tolerance'(vectorSearchCriteria)) || (ABS(currPremGuess - prevPremGuess) < 'Solve Criteria Premium Tolerance'(vectorSearchCriteria)) || (iteration_num >= 'Solve Criteria Requested Stop Duration'(vectorSearchCriteria)) ; çä   // Either the premium was successfully found, or the requested stop iteration (used for debugging purposes) was reachedçäv_(currPremGuess;currCashValue;prevPremGuess;prevCashValue;lowBound;highBound;iteration_num) ; çä   //  Else give up if we can't get a successful result after 100 iterationsçäIF ( /*Too many iterations?*/ iteration_num > 100 ; çä     /*return error message*/ 'Messages SystemMessage'("CA1044";'Message Language';v_('Solve Model Name';"'Solve Iterative Premium Solve Rec2'")) ; çä     // Else call this function recursively againçä'Solve Iterative Premium Solve Rec2'( // New current premium guessçä'Solve Premium Guess2'(currPremGuess;currCashValue;prevPremGuess;prevCashValue); // New current cash valueçä'Solve CashValueSolve for Premium Guess2 Minus Target CV'(currPremGuess;currCashValue;prevPremGuess;prevCashValue;vectorSearchCriteria;vectorSolveParms); // New previous premium guess   çä'Solve Prev Guess'(currPremGuess;currCashValue;prevPremGuess;'Solve CashValueSolve for Premium Guess2 Minus Target CV'(currPremGuess;currCashValue;prevPremGuess;prevCashValue;vectorSearchCriteria;vectorSolveParms);prevCashValue); // New previous cash valueçä'Solve Prev GuessCV using CashValSolve for Prem Guess2 Minus Tgt CV'(currPremGuess;currCashValue;prevPremGuess;prevCashValue;vectorSearchCriteria;vectorSolveParms); // lowBoundâçäIF ( /*Premium guess too low*/ currCashValue < 'Solve Criteria Target CV'(vectorSearchCriteria) ; çä       // Premium guess was too low, increase lower boundçäMAX(lowBound;currPremGuess) ; çä       // Else premium guess was too high.  Keep lower bound the sameçälowBoundçä    ); // highBoundçäIF ( /*Premium gues too high*/ currCashValue > 'Solve Criteria Target CV'(vectorSearchCriteria) ; çä     // Premium guess was too high, lower high boundâçäMIN(highBound;currPremGuess) ; çä     // Else premium guess was too low.  Keep high bound the sameçähighBoundçä  );iteration_num + 1;vectorSearchCriteria;vectorSolveParms)çä)çä)
F1 7d5f33e9 2648f00 0 7818ddc2 0 0 2
Solve Prev GuessCV using CashValSolve for Prem Guess2 Minus Tgt CV(currPremGuess; currCashValue; prevPremGuess; prevCashValue; vectorSearchCriteria; vectorSolveParms)
Funktion
'Solve Prev GuessCV'(currCashValue;prevCashValue;'Solve CashValueSolve for Premium Guess2 Minus Target CV'(currPremGuess;currCashValue;prevPremGuess;prevCashValue;vectorSearchCriteria;vectorSolveParms))
F1 7818ddc2 2648f00 0 0 0 0 2
Solve CashValueSolve for Premium Guess2 Minus Target CV(currPremGuess; currCashValue; prevPremGuess; prevCashValue; vectorSearchCriteria; vectorSolveParms)
Funktion
'Solve CashValueSolve'('Solve Premium Guess2'(currPremGuess;currCashValue;prevPremGuess;prevCashValue);'Solve CashValueSolve Constants Vector'(vectorSearchCriteria;vectorSolveParms)) - 'Solve Criteria Target CV'(vectorSearchCriteria)
F1 2649b68 2648198 0 264a6d8 0 0 2
Solve Annualize Iterative Premium Solve Rec(currPremGuess; currCashValue; prevPremiumGuess; prevCashValue; lowBound; highBound; iteration_num; vectorSearchCriteria; vectorSolveParms)
Funktion
IF ( /*tolerance level reached*/ (ABS(currCashValue - 'Solve Criteria Target CV'(vectorSearchCriteria)) < 'Solve Criteria CV Tolerance'(vectorSearchCriteria)) || (ABS(prevPremiumGuess - currPremGuess) < 'Solve Criteria Premium Tolerance'(vectorSearchCriteria)) || (iteration_num >= 'Solve Criteria Requested Stop Duration'(vectorSearchCriteria)) ; çä   // Either the premium was successfully found, or the requested stop iteration (used for debugging purposes) was reachedçäv_(currPremGuess;currCashValue;prevPremiumGuess;prevCashValue;lowBound;highBound;iteration_num) ; çä   //  Else give up if we can't get a successful result after 100 iterationsçäIF ( /*Too many iterations*/ iteration_num > 100 ; çä     /*Yes - return error message*/ 'Messages SystemMessage'("CA1044";'Message Language';'GEN Vector Blank') ; çä     // Else call this function recursively againçä'Solve Iterative Premium Solve Rec'( // New current premium guessçä'Solve Premium Guess'(currPremGuess;currCashValue;prevPremiumGuess;prevCashValue;'Solve Criteria Target CV'(vectorSearchCriteria);'Solve Criteria Premium Tolerance'(vectorSearchCriteria);lowBound;highBound;iteration_num); // New current cash valueçä'CVProjection Annualize EOY Cash Value Rec'('CalcType SolveCriteria'(vectorSearchCriteria);'SharedVector SolveParms ReplacePremium'('Solve Premium Guess'(currPremGuess;currCashValue;prevPremiumGuess;prevCashValue;'Solve Criteria Target CV'(vectorSearchCriteria);'Solve Criteria Premium Tolerance'(vectorSearchCriteria);lowBound;highBound;iteration_num);'Solve Criteria Premium Duration'(vectorSearchCriteria);vectorSolveParms);'Solve Criteria Interest Rate'(vectorSearchCriteria;1);'GEN Vector Blank';'Solve Criteria Target Duration'(vectorSearchCriteria)); // New previous premium guess   çäcurrPremGuess; // New previous cash valueçäcurrCashValue; // lowBoundâçäIF ( /*premium guess too low*/ currCashValue < 'Solve Criteria Target CV'(vectorSearchCriteria) ; çä       // Premium guess was too low, increase lower boundçäMAX(lowBound;currPremGuess) ; çä       // Else premium guess was too high.  Keep lower bound the sameçälowBoundçä    ); // highBoundçäIF ( /*Premium guess was too high*/ currCashValue > 'Solve Criteria Target CV'(vectorSearchCriteria) ; çä     // Premium guess was too high, lower high boundâçäMIN(highBound;currPremGuess) ; çä     // Else premium guess was too low.  Keep high bound the sameçähighBoundçä  );iteration_num + 1;vectorSearchCriteria;vectorSolveParms)çä)çä)
F1 264a6d8 2648198 264af28 264afe0 0 0 2
Solve Premium Guess(currPremGuess; currCashValue; prevPremiumGuess; prevCashValue; targetCashValue;premiumTolerance; lowBound; highBound; iteration_num)
Funktion
IF ( /*starting out*/ iteration_num = 1 ; çä   // Determine the next guess based on only the current guess and current cv for the initial guess sinceçä// the previous guess and previous cv won't be valid for the first iteration.çäIF ( /*Premium guess too high*/ currCashValue > targetCashValue ; çä     // We're being optimistic that the initial guess will get us within a penny nowçäcurrPremGuess - 0.01 ; çä     /*Try a penny above if the premium guess is too low*/ currPremGuess + 0.01 //currPremGuess - max(sqrt(currCashValue / (targetCashValue+.1) - 1);premiumTolerance); çä//currPremGuess + max(sqrt(1- currCashValue / (targetCashValue+.1));premiumTolerance)çäçä  ) ; çäIF ( /*Use the secant method for iterations 2 through 6*/ iteration_num <= 60 && targetCashValue > 10 ; çä   // Secant method has issues when target cv approaches 0çäIF ( /*Has guess changed the cash value?*/ currCashValue = prevCashValue ; çä     /*No - stick with what we've got*/ currPremGuess ; çä     /* try again*/ 'Solve Bound Premium Guess'(lowBound;highBound;currPremGuess - ((currCashValue - targetCashValue) * ((currPremGuess - prevPremiumGuess) / (currCashValue - prevCashValue))))çä  ) ; çä // Use the bisection method after iteration 6çäIF ( /*Premium guess too low*/ currCashValue < targetCashValue ; çä   /*Yes - try higher*/ (MAX(lowBound;currPremGuess) + highBound) * 0.5 ; çä   /*No - try lower*/ (lowBound + MIN(highBound;currPremGuess)) * 0.5çä)çä)çä)
F1 264af28 264a6d8 0 0 0 0 2
Solve Bound Premium Guess(lowBound; highBound; prem_guess)
Funktion
MAX(MIN(highBound;prem_guess);lowBound)
F1 264afe0 2648198 0 e19a616 0 0 2
Vector SLV Premium Solve Search Criteria(calcType; targetCashValue; targetDuration; premiumDuration; int_rate; cashValueTolerance; premiumValueTolerance; stopIteration; vectorAddlInfo)
Funktion
v_(calcType;targetCashValue;targetDuration;premiumDuration;int_rate;cashValueTolerance;premiumValueTolerance;stopIteration;vectorAddlInfo)
F1 e19a616 2648198 0 2ec6dfba 0 0 2
-- Solve Iterative Premium Solve Rec2 FaceSolve(currGuess; currCashValue; prevGuess; prevCashValue; lowBound; highBound; iteration_num; vectorSearchCriteria; vectorSolveParms)
Funktion
IF (/*Tolerance reached*/â(ABS(currCashValue/* - 'Solve Criteria Target CV'(vectorSearchCriteria)*/ ) < 'Solve Criteria CV Tolerance'(vectorSearchCriteria) )çäâ|| (ABS(currGuess - prevGuess) < 'Solve Criteria Premium Tolerance'(vectorSearchCriteria) )çäâ|| (iteration_num >= 'Solve Criteria Requested Stop Duration'(vectorSearchCriteria) );çäâ// Either the premium was successfully found, or the requested stop iteration (used for debugging purposes) was reachedçäâv_(currGuess; currCashValue; prevGuess; prevCashValue; lowBound; highBound; iteration_num);çäâ//  Else give up if we can't get a successful result after 100 iterationsçäâIF (/*Too many iterations?*/ iteration_num > 100;çäââ/*return error message*/çäââ'Messages SystemMessage'("CA1044"; 'Message Language'; v_('Solve Model Name'; "'Solve Iterative Premium Solve Rec2 FaceSolve'"));çäââ// Else call this function recursively againçäââ'Solve Iterative Premium Solve Rec2 FaceSolve'(çäâââ// New current premium guessçäâââ'Solve Premium Guess2'(çäââââcurrGuess; çäââââcurrCashValue; çäââââprevGuess; çäââââprevCashValueçäâââ);çäâââ// New current cash valueçäâââ'Solve CashValueSolve FaceAmountSolve'(çäââââ'Solve Premium Guess2'(çäâââââcurrGuess; çäâââââcurrCashValue; çäâââââprevGuess; çäâââââprevCashValueçäââââ);çäââââ'Solve CashValueSolve Constants Vector'(çäâââââ'Solve Criteria Replace GuidelinePremiums'(çäââââââ'Solve Criteria Replace Target'(çäâââââââvectorSearchCriteria;çäâââââââ'Solve Premium Guess2'(çäââââââââcurrGuess; çäââââââââcurrCashValue; çäââââââââprevGuess; çäââââââââprevCashValueçäâââââââ)çäââââââ);çäââââââ'Solve Premium Guess2'(çäââââââââcurrGuess; çäââââââââcurrCashValue; çäââââââââprevGuess; çäââââââââprevCashValueçäâââââââ)çäâââââ);çäâââââvectorSolveParmsçäââââ)çäâââ)çäâââ-çäâââ'Solve FaceSolve Target Value'(currGuess; currCashValue; prevGuess; prevCashValue; vectorSearchCriteria);çäâââ// New previous premium guess   çäâââ'Solve Prev Guess'(currGuess; currCashValue; prevGuess;çäââââ'Solve CashValueSolve FaceAmountSolve'(çäâââââ'Solve Premium Guess2'(çäââââââcurrGuess; çäââââââcurrCashValue; çäââââââprevGuess; çäââââââprevCashValueçäâââââ);çäâââââ'Solve CashValueSolve Constants Vector'(çäââââââ'Solve Criteria Replace GuidelinePremiums'(çäâââââââ'Solve Criteria Replace Target'(çäââââââââvectorSearchCriteria;çäââââââââ'Solve Premium Guess2'(çäâââââââââcurrGuess; çäâââââââââcurrCashValue; çäâââââââââprevGuess; çäâââââââââprevCashValueçäââââââââ)çäâââââââ);çäâââââââ'Solve Premium Guess2'(çäââââââââcurrGuess; çäââââââââcurrCashValue; çäââââââââprevGuess; çäââââââââprevCashValueçäâââââââ)çäââââââ);çäââââââvectorSolveParmsçäâââââ)çäââââ)çäââââ-çäââââ'Solve FaceSolve Target Value'(currGuess; currCashValue; prevGuess; prevCashValue; vectorSearchCriteria);prevCashValueçäâââ);âçäâââ// New previous cash valueçäâââ'Solve Prev GuessCV'(currCashValue; prevCashValue;çäââââ'Solve CashValueSolve FaceAmountSolve'(çäâââââ'Solve Premium Guess2'(çäââââââcurrGuess; çäââââââcurrCashValue; çäââââââprevGuess; çäââââââprevCashValueçäâââââ);çäâââââ'Solve CashValueSolve Constants Vector'(çäââââââ'Solve Criteria Replace GuidelinePremiums'(çäâââââââ'Solve Criteria Replace Target'(çäââââââââvectorSearchCriteria;çäââââââââ'Solve Premium Guess2'(çäâââââââââcurrGuess; çäâââââââââcurrCashValue; çäâââââââââprevGuess; çäâââââââââprevCashValueçäââââââââ)çäâââââââ);çäâââââââ'Solve Premium Guess2'(çäââââââââcurrGuess; çäââââââââcurrCashValue; çäââââââââprevGuess; çäââââââââprevCashValueçäâââââââ)çäââââââ);çäââââââvectorSolveParmsçäâââââ)çäââââ)çäââââ-çäââââ'Solve FaceSolve Target Value'(currGuess; currCashValue; prevGuess; prevCashValue; vectorSearchCriteria)çäâââ);çäâââ// lowBoundâçäâââIF (/*Premium guess too low*/ çäââââcurrCashValue çäââââ< çäââââ'Solve Premium Guess2'(çäâââââcurrGuess; çäâââââcurrCashValue; çäâââââprevGuess; çäâââââprevCashValueçäââââ);çäââââ// Premium guess was too low, increase lower boundçäââââMAX(lowBound; currGuess);çäââââ// Else premium guess was too high.  Keep lower bound the sameçäââââlowBoundçäâââ);çäâââ// highBoundçäâââIF (/*Premium gues too high*/ çäââââcurrCashValueçäââââ> çäââââ'Solve Premium Guess2'(çäâââââcurrGuess; çäâââââcurrCashValue; çäâââââprevGuess; çäâââââprevCashValueçäââââ);çäââââ// Premium guess was too high, lower high boundâçäââââMIN(highBound; currGuess);çäââââ// Else premium guess was too low.  Keep high bound the sameçäââââhighBoundçäâââ);çäâââiteration_num + 1;çäâââvectorSearchCriteria;çäâââvectorSolveParmsçäââ)çäâ)çä)
F1 2ec6dfba 2648198 0 0 0 0 2
Solve Iterative Premium Solve Rec2 FaceSolve(currGuess; currCashValue; prevGuess; prevCashValue; lowBound; highBound; iteration_num; vectorSearchCriteria; vectorSolveParms; yearIndex)
Funktion
IF ( /*Tolerance reached*/ (ABS(currCashValue /* - 'Solve Criteria Target CV'(vectorSearchCriteria)*/ ) < 'Solve Criteria CV Tolerance'(vectorSearchCriteria)) || (ABS(currGuess - prevGuess) < 'Solve Criteria Premium Tolerance'(vectorSearchCriteria)) || (iteration_num >= 'Solve Criteria Requested Stop Duration'(vectorSearchCriteria)) ; çä   // Either the premium was successfully found, or the requested stop iteration (used for debugging purposes) was reachedçäv_(currGuess;currCashValue;prevGuess;prevCashValue;lowBound;highBound;iteration_num) ; çä   //  Else give up if we can't get a successful result after 100 iterationsçäIF ( /*Too many iterations?*/ iteration_num > 100 ; çä     /*return error message*/ 'Messages SystemMessage'("CA1044";'Message Language';v_('Solve Model Name';"'Solve Iterative Premium Solve Rec2 FaceSolve'")) ; çä     // Else call this function recursively againçä'Solve Iterative Premium Solve Rec2 FaceSolve'( // New current premium guessçä'Solve Premium Guess2'(currGuess;currCashValue;prevGuess;prevCashValue); // New current cash valueçä'Solve CashValueSolve FaceAmountSolve'('Solve Premium Guess2'(currGuess;currCashValue;prevGuess;prevCashValue);'Solve CashValueSolve Constants Vector'('Solve Criteria Replace GuidelinePremiums'('Solve Criteria Replace Target'(vectorSearchCriteria;'Solve Premium Guess2'(currGuess;currCashValue;prevGuess;prevCashValue);yearIndex);'Solve Premium Guess2'(currGuess;currCashValue;prevGuess;prevCashValue));vectorSolveParms)) - 'Solve FaceSolve Target Value'(currGuess;currCashValue;prevGuess;prevCashValue;vectorSearchCriteria); // New previous premium guess   çä'Solve Prev Guess'(currGuess;currCashValue;prevGuess;'Solve CashValueSolve FaceAmountSolve'('Solve Premium Guess2'(currGuess;currCashValue;prevGuess;prevCashValue);'Solve CashValueSolve Constants Vector'('Solve Criteria Replace GuidelinePremiums'('Solve Criteria Replace Target'(vectorSearchCriteria;'Solve Premium Guess2'(currGuess;currCashValue;prevGuess;prevCashValue);yearIndex);'Solve Premium Guess2'(currGuess;currCashValue;prevGuess;prevCashValue));vectorSolveParms)) - 'Solve FaceSolve Target Value'(currGuess;currCashValue;prevGuess;prevCashValue;vectorSearchCriteria);prevCashValue); // New previous cash valueçä'Solve Prev GuessCV'(currCashValue;prevCashValue;'Solve CashValueSolve FaceAmountSolve'('Solve Premium Guess2'(currGuess;currCashValue;prevGuess;prevCashValue);'Solve CashValueSolve Constants Vector'('Solve Criteria Replace GuidelinePremiums'('Solve Criteria Replace Target'(vectorSearchCriteria;'Solve Premium Guess2'(currGuess;currCashValue;prevGuess;prevCashValue);yearIndex);'Solve Premium Guess2'(currGuess;currCashValue;prevGuess;prevCashValue));vectorSolveParms)) - 'Solve FaceSolve Target Value'(currGuess;currCashValue;prevGuess;prevCashValue;vectorSearchCriteria)); // lowBoundâçäIF ( /*Premium guess too low*/ currCashValue < 'Solve Premium Guess2'(currGuess;currCashValue;prevGuess;prevCashValue) ; çä       // Premium guess was too low, increase lower boundçäMAX(lowBound;currGuess) ; çä       // Else premium guess was too high.  Keep lower bound the sameçälowBoundçä    ); // highBoundçäIF ( /*Premium gues too high*/ currCashValue > 'Solve Premium Guess2'(currGuess;currCashValue;prevGuess;prevCashValue) ; çä     // Premium guess was too high, lower high boundâçäMIN(highBound;currGuess) ; çä     // Else premium guess was too low.  Keep high bound the sameçähighBoundçä  );iteration_num + 1;vectorSearchCriteria;vectorSolveParms;yearIndex)çä)çä)
F1 264b278 24e83b0 4ccebd29 26503a8 0 0 2
-- Initial Premium Guess Functions --
Funktion

F1 4ccebd29 264b278 4d47fa73 51cc8c12 0 0 2
-- Initial Premium Guess Using a discounted Maturity Value --
Funktion

F1 4d47fa73 4ccebd29 4d4ee85f 2652450 0 0 2
Solve Target Premium Loads(vectorSolveParms; vectorSearchCriteria; yearIndex; targetLoadInd)
Funktion
IF ('CHG Calc Type Uses Fees'('CalcType SolveCriteria'(vectorSearchCriteria)) ; çä  'Solve Projected Target Premium Load Charge'(1;vectorSearchCriteria;yearIndex;targetLoadInd) + 'Solve Projected Target Premium Load Charge'(2;vectorSearchCriteria;yearIndex;targetLoadInd) + 'Solve Projected Target Premium Load Charge'(3;vectorSearchCriteria;yearIndex;targetLoadInd) ; çä  0çä)
F1 4d4ee85f 4d47fa73 0 0 0 0 2
Solve Projected Target Premium Load Charge(prem_load_rule_num; vectorSearchCriteria; yearIndex; targetLoadInd)
Funktion
'ACCS CV Intermediate Round For CalcType'(CASE( /*Premium load rule*/ 'PLC Premium Load Rule'('CalcType SolveCriteria'(vectorSearchCriteria);prem_load_rule_num;'FeeType PremiumLoad');çä   // Percent of premium for policy lifeçä"1000500003" : 0;çä   //don't add in premium load nowçä// No premium load chargeçä"";"1000500022" : 0;çä   // Percent of premium up to annual target load premiumçä"1000500005";"1000500007" : IF ( /*Premium load based on Load Target and Loads used in calctype?*/ NOT(targetLoadInd) /*Load target calculation*/  || 'CalcType SolveCriteria Alike LTGT'(vectorSearchCriteria) /*Beyond Premium Duration?*/  || yearIndex > MIN('Solve Criteria Premium Duration'(vectorSearchCriteria);'Solve Criteria Target Duration'(vectorSearchCriteria)) ; çä    0 ; çä    'SLV LoadTargetPremium'(vectorSearchCriteria) * ('PLC Premium Load Primary Rate'('CalcType SolveCriteria'(vectorSearchCriteria);'FeeType PremiumLoad';0;yearIndex) * 0.01 - 'PLC Premium Load Secondary Rate'('CalcType SolveCriteria'(vectorSearchCriteria);'FeeType PremiumLoad';0;yearIndex) * 0.01)çä  );çä // Flat premium load chargeçä"1000500030" : IF (yearIndex <= MIN('Solve Criteria Premium Duration'(vectorSearchCriteria);'Solve Criteria Target Duration'(vectorSearchCriteria)) ; çä  'PLC Projected Premium Load Rule Flat Amount'('CalcType SolveCriteria'(vectorSearchCriteria);prem_load_rule_num;'FeeType PremiumLoad';yearIndex;100) ; çä   // periodic premium not required for flat amount çä0çä);çä // Else - 0çä : 0)çä;'CalcType SolveCriteria'(vectorSearchCriteria))
F1 2652450 4ccebd29 32323155 2fa2227a 0 0 2
Solve Premium Loads(vectorSolveParms; vectorSearchCriteria; yearIndex)
Funktion
IF ('CHG Calc Type Uses Fees'('CalcType SolveCriteria'(vectorSearchCriteria)) ; çä  'Solve Projected Premium Load Charge'(1;'PREMIUM Projected GrossPremium'('CalcType SolveCriteria'(vectorSearchCriteria);vectorSolveParms;'Solve Criteria Addl Info'(vectorSearchCriteria);yearIndex;1);vectorSearchCriteria;yearIndex) + 'Solve Projected Premium Load Charge'(2;'PREMIUM Projected GrossPremium'('CalcType SolveCriteria'(vectorSearchCriteria);vectorSolveParms;'Solve Criteria Addl Info'(vectorSearchCriteria);yearIndex;1);vectorSearchCriteria;yearIndex) + 'Solve Projected Premium Load Charge'(3;'PREMIUM Projected GrossPremium'('CalcType SolveCriteria'(vectorSearchCriteria);vectorSolveParms;'Solve Criteria Addl Info'(vectorSearchCriteria);yearIndex;1);vectorSearchCriteria;yearIndex) ; çä  0çä)
F1 32323155 2652450 0 0 0 0 2
Solve Projected Premium Load Charge(prem_load_rule_num; periodicPremium; vectorSearchCriteria; yearIndex)
Funktion
'ACCS CV Intermediate Round For CalcType'(CASE( /*Premium load rule*/ 'PLC Premium Load Rule'('CalcType SolveCriteria'(vectorSearchCriteria);prem_load_rule_num;'FeeType PremiumLoad');çä   // Percent of premium for policy lifeçä"1000500003" : 0;çä   //don't add in premium load nowçä// No premium load chargeçä"";"1000500022" : 0;çä   // Percent of premium up to annual target load premiumçä"1000500005";"1000500007" : IF ( /*Load target calculation*/ 'CalcType SolveCriteria Alike LTGT'(vectorSearchCriteria) /*Beyond Premium Duration?*/  || yearIndex > MIN('Solve Criteria Premium Duration'(vectorSearchCriteria);'Solve Criteria Target Duration'(vectorSearchCriteria)) ; çä    0 ; çä    MIN(periodicPremium;'SLV LoadTargetPremium'(vectorSearchCriteria)) * ('PLC Premium Load Primary Rate'('CalcType SolveCriteria'(vectorSearchCriteria);'FeeType PremiumLoad';0;yearIndex) * 0.01 - 'PLC Premium Load Secondary Rate'('CalcType SolveCriteria'(vectorSearchCriteria);'FeeType PremiumLoad';0;yearIndex) * 0.01)çä  );çä // Flat premium load chargeçä"1000500030" : IF (yearIndex <= MIN('Solve Criteria Premium Duration'(vectorSearchCriteria);'Solve Criteria Target Duration'(vectorSearchCriteria)) ; çä  'PLC Projected Premium Load Rule Flat Amount'('CalcType SolveCriteria'(vectorSearchCriteria);prem_load_rule_num;'FeeType PremiumLoad';yearIndex;100) ; çä   // periodic premium not required for flat amount çä0çä);çä // Else - 0çä : 0)çä;'CalcType SolveCriteria'(vectorSearchCriteria))
F1 2fa2227a 4ccebd29 2ee1ec37 3fa4eea 0 0 2
Solve Discounted Endowment Value( vectorSearchCriteria; yearIndex; monthIndex; vectorSolveParms; targetLoadInd)
Funktion
'GEN Round'(IF ( /*First month of projection period*/ 'Solve First Month of Projection Period'(vectorSearchCriteria;yearIndex;monthIndex) ; çä   // At the starting point of the projectionçä'Solve Criteria Target CV'(vectorSearchCriteria) ; çä   // Else need to recursively determine the EOM CVçä'Solve Recursive EOM CV'(vectorSearchCriteria;yearIndex;monthIndex;vectorSolveParms;targetLoadInd)çä); // Number of places to roundçä'ACCS Decimal'('CalcType SolveCriteria'(vectorSearchCriteria)))
F1 2ee1ec37 2fa2227a 525e6f99 3c324b94 0 0 2
Solve Recursive EOM CV( vectorSearchCriteria; yearIndex; monthIndex; vectorSolveParms; targetLoadInd)
Funktion
IF ('Solve Next Year Discount Neg NAR Check'(vectorSearchCriteria;yearIndex;vectorSolveParms;targetLoadInd) = 1 ; çä   // set corridor indicator to 1âââçä'Solve Discount Annual Cash Value using Next Year Endowment'(vectorSearchCriteria;yearIndex;vectorSolveParms;V_(1;0);targetLoadInd) ; çä  IF ('Solve Next Year Discount Neg NAR Check'(vectorSearchCriteria;yearIndex;vectorSolveParms;targetLoadInd) = 2 ; çä     // set corridor indicator to 0ââçä'Solve Discount Annual Cash Value using Next Year Endowment'(vectorSearchCriteria;yearIndex;vectorSolveParms;V_('Solve Use COI In Corridor'(vectorSearchCriteria);1);targetLoadInd) ; çä    'Solve Monthly Discounted Cash Value using Next Year Endowment'(vectorSearchCriteria;yearIndex;vectorSolveParms;targetLoadInd)çä  )çä)
F1 525e6f99 2ee1ec37 0 5a2b66c0 0 0 2
Solve Monthly Discounted Cash Value using Next Year Endowment( vectorSearchCriteria; yearIndex; vectorSolveParms; targetLoadInd)
Funktion
'Solve Monthly Discounted Cash Value'('Solve Next Year Discounted Endowment Value'(vectorSearchCriteria;yearIndex;vectorSolveParms;targetLoadInd);vectorSearchCriteria;yearIndex + 1;1;vectorSolveParms;targetLoadInd)
F1 5a2b66c0 2ee1ec37 0 74804040 0 0 2
Solve Discount Annual Cash Value using Next Year Endowment( vectorSearchCriteria; yearIndex; vectorSolveParms; corridor; targetLoadInd)
Funktion
'Solve Discount Annual Cash Value'('Solve Next Year Discounted Endowment Value'(vectorSearchCriteria;yearIndex;vectorSolveParms;targetLoadInd);vectorSolveParms;yearIndex + 1;vectorSearchCriteria;corridor;targetLoadInd)
F1 74804040 2ee1ec37 0 5f05bf97 0 0 2
Solve Next Year Discounted Endowment Value(vectorSearchCriteria; yearIndex; vectorSolveParms; targetLoadInd)
Funktion
'Solve Discounted Endowment Value'(vectorSearchCriteria;yearIndex + 1;12;vectorSolveParms;targetLoadInd)
F1 5f05bf97 2ee1ec37 0 0 0 0 2
Solve Next Year Discount Neg NAR Check( vectorSearchCriteria; yearIndex; vectorSolveParms; targetLoadInd)
Funktion
'Solve Discount Neg NAR Check'('Solve Discounted Endowment Value'(vectorSearchCriteria;yearIndex + 1;12;vectorSolveParms;targetLoadInd);vectorSolveParms;yearIndex + 1;vectorSearchCriteria;V_(1;0);targetLoadInd)
F1 3c324b94 2fa2227a 0 9b54afc 0 0 2
Solve First Month of Projection Period( vectorSearchCriteria; yearIndex; monthIndex )
Funktion
((yearIndex >= 'Solve Criteria Target Duration'(vectorSearchCriteria)) && (monthIndex = 12))
F1 9b54afc 2fa2227a 3c58e0ef 3e0851a8 0 0 2
Solve Monthly Discounted Cash Value(nextEOYCV; vectorSearchCriteria; yearIndex; monthIndex; vectorSolveParms; targetLoadInd)
Funktion
(IF (monthIndex = 12 ; çä  nextEOYCV ; çä  'Solve Monthly Discounted Cash Value'(nextEOYCV;vectorSearchCriteria;yearIndex;monthIndex + 1;vectorSolveParms;targetLoadInd)çä) + IF ('Solve Monthly Corridor Indicator'('CalcType SolveCriteria'(vectorSearchCriteria);IF (monthIndex = 12 ; çänextEOYCV ; çä'Solve Monthly Discounted Cash Value'(nextEOYCV;vectorSearchCriteria;yearIndex;monthIndex + 1;vectorSolveParms;targetLoadInd)çä);yearIndex;vectorSolveParms) ; çä'Solve Init Guess COI Charges Monthly'(vectorSolveParms;vectorSearchCriteria;yearIndex) ; çä0çä) * 'Solve DB Adj Factor new'(vectorSearchCriteria;yearIndex;vectorSolveParms;V_('Solve Monthly Corridor Indicator'('CalcType SolveCriteria'(vectorSearchCriteria);IF (monthIndex = 12 ; çänextEOYCV ; çä'Solve Monthly Discounted Cash Value'(nextEOYCV;vectorSearchCriteria;yearIndex;monthIndex + 1;vectorSolveParms;targetLoadInd)çä);yearIndex;vectorSolveParms);0))) * 'Solve Choose R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms;V_('Solve Monthly Corridor Indicator'('CalcType SolveCriteria'(vectorSearchCriteria);IF (monthIndex = 12 ; çänextEOYCV ; çä'Solve Monthly Discounted Cash Value'(nextEOYCV;vectorSearchCriteria;yearIndex;monthIndex + 1;vectorSolveParms;targetLoadInd)çä);yearIndex;vectorSolveParms);0)) + ('COV Projected Monthly Total CovOption Charge'('CalcType SolveCriteria'(vectorSearchCriteria);'Std BaseCov Index'('CalcType SolveCriteria'(vectorSearchCriteria));yearIndex;1;'SharedVector SolveParms Shorten for Charges'(vectorSolveParms)) + 'Solve Init Guess Monthly NonNAR Coverage Charge'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex;vectorSolveParms) + IF ( /*Does calc type use fees?*/ 'CHG Calc Type Uses Fees'('CalcType SolveCriteria'(vectorSearchCriteria)) ; çä /*Yes - add expenses*/ 'Solve Init Guess Monthly Expenses'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex;monthIndex;'SharedVector SolveParms Shorten for Charges'(vectorSolveParms)) * 'Solve Non COI Timing Adjustment'(vectorSearchCriteria;yearIndex;'SharedVector SolveParms Shorten for Charges'(vectorSolveParms)) ; çä /*No - exclude expenses*/ 0çä)) * 'Solve Choose Exp Rider Adj Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms;V_('Solve Monthly Corridor Indicator'('CalcType SolveCriteria'(vectorSearchCriteria);IF (monthIndex = 12 ; çänextEOYCV ; çä'Solve Monthly Discounted Cash Value'(nextEOYCV;vectorSearchCriteria;yearIndex;monthIndex + 1;vectorSolveParms;targetLoadInd)çä);yearIndex;vectorSolveParms);0)) + IF ('Solve Charge Applicable'('FeeType PremiumLoad';vectorSearchCriteria;yearIndex;monthIndex) ; çä'Solve Target Premium Loads'(vectorSolveParms;vectorSearchCriteria;yearIndex;targetLoadInd) ; çä0çä)
F1 3c58e0ef 9b54afc 0 2d9e2e7a 0 0 2
Solve Init Guess COI Charges Monthly(vectorSolveParms; vectorSearchCriteria; yearIndex)
Funktion
'Solve Base and Increase FaceAmount'('CalcType SolveCriteria'(vectorSearchCriteria);vectorSolveParms;yearIndex) * 'COV COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;yearIndex;vectorSolveParms) * 0.001
F1 2d9e2e7a 9b54afc 0 0 0 0 2
Solve Monthly Corridor Indicator(calcType; nextEOMCV; yearIndex; vectorSolveParms)
Funktion
IF (nextEOMCV > 'Solve Base and Increase FaceAmount'(calcType;vectorSolveParms;yearIndex) ; çä  0 ; çä  1çä)
F1 3e0851a8 2fa2227a 0 3a32b2ed 0 0 2
Solve Discount Neg NAR Check(nextEOYCV; vectorSolveParms; yearIndex; vectorSearchCriteria; corridorInd; targetLoadInd)
Funktion
IF ('DeathBenefitOptType Is Increasing'('Solve DthBenOpt'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex;vectorSolveParms)) || (('Solve Discount Annual Cash Value'(nextEOYCV;vectorSolveParms;yearIndex;vectorSearchCriteria;corridorInd;targetLoadInd) <= 'Solve Specified Amount'('CalcType SolveCriteria'(vectorSearchCriteria);vectorSolveParms)) && (nextEOYCV //'Solve Discount Annual Cash Value'(nextNextEOYCV; vectorSolveParms; yearIndex+1; vectorSearchCriteria; corridorInd)çä <= 'Solve Specified Amount'('CalcType SolveCriteria'(vectorSearchCriteria);vectorSolveParms))) ; çä  1 ; çä  IF (('Solve Discount Annual Cash Value'(nextEOYCV;vectorSolveParms;yearIndex;vectorSearchCriteria;V_(1;0) /*corridorInd*/ ;targetLoadInd) > 'Solve Specified Amount'('CalcType SolveCriteria'(vectorSearchCriteria);vectorSolveParms)) && (nextEOYCV //'Solve Discount Annual Cash Value'(nextNextEOYCV; vectorSolveParms; yearIndex+1; vectorSearchCriteria; corridorInd)çä > 'Solve Specified Amount'('CalcType SolveCriteria'(vectorSearchCriteria);vectorSolveParms)) ; çä    2 ; çä    3çä  )çä)
F1 3a32b2ed 2fa2227a 0 0 0 0 2
Solve Discount Annual Cash Value(NextEOYCV, vectorSolveParms, yearIndex; vectorSearchCriteria; corridorInd; targetLoadInd)
Funktion
NextEOYCV * 'Solve Choose R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms;corridorInd) ^ 12 +  // Base COI chargeçä('Solve Init Guess COI Charges'(vectorSolveParms;vectorSearchCriteria;yearIndex) * 'Solve DB Adj Factor New'(vectorSearchCriteria;yearIndex;vectorSolveParms;corridorInd) * IF (e_(corridorInd;1) ; çä  0 ; çä  1çä) + ( // Benefit charges associated with the base coverage çä'COV Projected Monthly Total CovOption Charge'('CalcType SolveCriteria'(vectorSearchCriteria);'Std BaseCov Index'('CalcType SolveCriteria'(vectorSearchCriteria));yearIndex;1;vectorSolveParms) // Rider charges not associated with NARçä + 'Solve Init Guess Monthly NonNAR Coverage Charge'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex;vectorSolveParms) * 'Solve Non COI Timing Adjustment'(vectorSearchCriteria;yearIndex;vectorSolveParms)) * 'Solve Choose Exp Rider Adj Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms;corridorInd)) * ((1 - ('Solve Choose R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms;corridorInd) ^ 12)) / (1 - 'Solve Choose R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms;corridorInd))) + 'Solve Init Guess R Adjusted Annual Expenses'(yearIndex;vectorSolveParms;vectorSearchCriteria;corridorInd) * 'Solve Choose Exp Rider Adj Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms;corridorInd) + 'Solve Target Premium Loads'(vectorSolveParms;vectorSearchCriteria;yearIndex;targetLoadInd) * 'Solve Premium Modal Factor'(vectorSolveParms;yearIndex;vectorSearchCriteria;corridorInd)
F1 3fa4eea 4ccebd29 551f6d4f 5ac7bd73 0 0 2
Solve Initial Premium Guess2(vectorSolveParms; vectorSearchCriteria)
Funktion
IF ('CalcType SolveCriteria Alike LTGT'(vectorSearchCriteria) || 'Solve Discounted Endowment Value'(vectorSearchCriteria;'Solve Start Year'(vectorSearchCriteria) - 1;12;vectorSolveParms;1) / 'Solve Init Guess Annualize PV Payment Factor2 rec'(vectorSearchCriteria;vectorSolveParms;'Solve Start Year'(vectorSearchCriteria);1) > 'SLV LoadTargetPremium'(vectorSearchCriteria) ; çä  'Solve Discounted Endowment Value'(vectorSearchCriteria;'Solve Start Year'(vectorSearchCriteria) - 1;12;vectorSolveParms;1) / 'Solve Init Guess Annualize PV Payment Factor2 rec'(vectorSearchCriteria;vectorSolveParms;'Solve Start Year'(vectorSearchCriteria);1) ; çä  'Solve Discounted Endowment Value'(vectorSearchCriteria;'Solve Start Year'(vectorSearchCriteria) - 1;12;vectorSolveParms;0) / 'Solve Init Guess Annualize PV Payment Factor2 rec'(vectorSearchCriteria;vectorSolveParms;'Solve Start Year'(vectorSearchCriteria);0)çä)
F1 551f6d4f 3fa4eea 35d8d0b5 0 0 0 2
Solve Init Guess Annualize PV Payment Factor2 rec(vectorSearchCriteria; vectorSolveParms; yearIndex; targetLoadInd)
Funktion
IF (yearIndex = 'Solve Criteria Premium Duration'(vectorSearchCriteria) ; çä  0 ; çä  'Solve Init Guess Annualize PV Payment Factor2 rec'(vectorSearchCriteria;vectorSolveParms;yearIndex + 1;targetLoadInd) * IF ('Solve Target Duration Greater Than or Equal to Year OR Discount Neg NAR Check Equals One'(vectorSearchCriteria;vectorSolveParms;yearIndex;targetLoadInd) ; çä    'Solve Choose R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms;V_(1;0)) ^ 12 ; çä    IF ('Solve Discounted Endowment Neg NAR Check Equals Two'(vectorSearchCriteria;yearIndex;vectorSolveParms;targetLoadInd) ; çä      'Solve Choose R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms;V_(0;1)) ^ 12 ; çä      'Solve R Factor Monthly Total'('Solve Discounted Endowment Value'(vectorSearchCriteria;yearIndex;12;vectorSolveParms;targetLoadInd);vectorSearchCriteria;yearIndex;12;vectorSolveParms;targetLoadInd)çä    )çä) - IF ( /*Death benefit is option C and not seven pay*/ 'DeathBenefitOptType Is IncreasingROP'('Solve DthBenOpt'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex;vectorSolveParms)) ; çä /*Yes*/ 'Solve DB Option 3 Payment Adj Factor new'(vectorSearchCriteria;yearIndex;vectorSolveParms;targetLoadInd) ; çä0çä)çä) + IF ( /*Does calctype use fees?*/ 'CHG Calc Type Uses Fees'('CalcType SolveCriteria'(vectorSearchCriteria)) ; çä /*Yes - calculate net premium*/ 'Solve Net Premium Factor'(vectorSearchCriteria;yearIndex;targetLoadInd) ; çä // Else calc type doesn't include feesçä1çä) * IF ('Solve Target Duration Greater Than or Equal to Year OR Discount Neg NAR Check Equals One'(vectorSearchCriteria;vectorSolveParms;yearIndex;targetLoadInd) ; çä'Solve Premium Modal Factor'(vectorSolveParms;yearIndex;vectorSearchCriteria;V_(1;0)) ; çäIF ('Solve Discounted Endowment Neg NAR Check Equals Two'(vectorSearchCriteria;yearIndex;vectorSolveParms;targetLoadInd) ; çä'Solve Premium Modal Factor'(vectorSolveParms;yearIndex;vectorSearchCriteria;V_(0;1)) ; çä'Solve R Annuity Factor Monthly Total'('Solve Discounted Endowment Value'(vectorSearchCriteria;yearIndex;12;vectorSolveParms;targetLoadInd);vectorSearchCriteria;yearIndex;12;vectorSolveParms;targetLoadInd)çä)çä)
F1 35d8d0b5 551f6d4f 0 2083402 0 0 2
Solve R Factor Monthly Total( nextEOYCV; vectorSearchCriteria; yearIndex; monthIndex; vectorSolveParms; targetLoadInd)
Funktion
IF (monthIndex = 1 ; çä  'Solve Choose R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms;V_(1;0)) ; çä  'Solve R Factor Monthly Total'(nextEOYCV;vectorSearchCriteria;yearIndex;monthIndex - 1;vectorSolveParms;targetLoadInd) * IF ('Solve Monthly Corridor Indicator'('CalcType SolveCriteria'(vectorSearchCriteria);'Solve Monthly Discounted Cash Value'(nextEOYCV;vectorSearchCriteria;yearIndex;monthIndex;vectorSolveParms;targetLoadInd);yearIndex;vectorSolveParms) ; çä    'Solve Choose R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms;V_(1;1)) ; çä    'Solve Choose R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms;V_(1;0))çä  )çä)
F1 2083402 551f6d4f 0 463e0d0e 0 0 2
Solve R Annuity Factor Monthly Total(nextEOYCV; vectorSearchCriteria; yearIndex; monthIndex; vectorSolveParms; targetLoadInd)
Funktion
IF (monthIndex = 1 ; çä  1 / 'Solve Choose R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms;V_(1;0)) ; çä  (1 + 'Solve R Annuity Factor Monthly Total'(nextEOYCV;vectorSearchCriteria;yearIndex;monthIndex - 1;vectorSolveParms;targetLoadInd)) / IF ('Solve Monthly Corridor Indicator'('CalcType SolveCriteria'(vectorSearchCriteria);'Solve Monthly Discounted Cash Value'(nextEOYCV;vectorSearchCriteria;yearIndex;monthIndex;vectorSolveParms;targetLoadInd);yearIndex;vectorSolveParms) ; çä    'Solve Choose R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms;V_(1;1)) ; çä    'Solve Choose R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms;V_(1;0))çä  )çä) * 'Solve R Factor Monthly Total'(nextEOYCV;vectorSearchCriteria;yearIndex;monthIndex;vectorSolveParms;targetLoadInd)
F1 463e0d0e 551f6d4f 0 73320528 0 0 2
Solve Target Duration Greater Than or Equal to Year OR Discount Neg NAR Check Equals One(vectorSearchCriteria; vectorSolveParms; yearIndex; targetLoadInd)
Funktion
yearIndex >= 'Solve Criteria Target Duration'(vectorSearchCriteria) - 1 || 'Solve Discounted Endowment Neg NAR Check Equals Num'(vectorSearchCriteria;yearIndex;vectorSolveParms;targetLoadInd;1)
F1 73320528 551f6d4f 579d7c3f 0 0 0 2
Solve Discounted Endowment Neg NAR Check Equals Two(vectorSearchCriteria; yearIndex; vectorSolveParms; targetLoadInd)
Funktion
'Solve Discounted Endowment Neg NAR Check Equals Num'(vectorSearchCriteria;yearIndex;vectorSolveParms;targetLoadInd;2)
F1 579d7c3f 73320528 0 0 0 0 2
Solve Discounted Endowment Neg NAR Check Equals Num(vectorSearchCriteria; yearIndex; vectorSolveParms; targetLoadInd; Num)
Funktion
'Solve Discount Neg NAR Check'('Solve Discounted Endowment Value'(vectorSearchCriteria;yearIndex;12;vectorSolveParms;targetLoadInd);vectorSolveParms;yearIndex;vectorSearchCriteria;V_(1;0);targetLoadInd) EQUAL Num
F1 5ac7bd73 4ccebd29 1c2ef69f 677a9fb6 0 0 2
Solve Initial Premium Guess3(vectorSolveParms; vectorSearchCriteria)
Funktion
IF ('CalcType SolveCriteria Alike LTGT'(vectorSearchCriteria) || 'Solve Discounted Endowment Value'(vectorSearchCriteria;'Solve Start Year'(vectorSearchCriteria) - 1;12;vectorSolveParms;1) / 'Solve Init Guess Annualize PV Payment Factor3 rec'(vectorSearchCriteria;vectorSolveParms;'Solve Start Year'(vectorSearchCriteria);1) > 'SLV LoadTargetPremium'(vectorSearchCriteria) ; çä  'Solve Discounted Endowment Value'(vectorSearchCriteria;'Solve Start Year'(vectorSearchCriteria) - 1;12;vectorSolveParms;1) / 'Solve Init Guess Annualize PV Payment Factor3 rec'(vectorSearchCriteria;vectorSolveParms;'Solve Start Year'(vectorSearchCriteria);0) ; çä  'Solve Discounted Endowment Value'(vectorSearchCriteria;'Solve Start Year'(vectorSearchCriteria) - 1;12;vectorSolveParms;0) / 'Solve Init Guess Annualize PV Payment Factor3 rec'(vectorSearchCriteria;vectorSolveParms;'Solve Start Year'(vectorSearchCriteria);0)çä)
F1 1c2ef69f 5ac7bd73 0 0 0 0 2
Solve Init Guess Annualize PV Payment Factor3 rec(vectorSearchCriteria; vectorSolveParms; yearIndex; targetLoadInd)
Funktion
IF (yearIndex = 'Solve Criteria Premium Duration'(vectorSearchCriteria) ; çä  0 ; çä  'Solve Init Guess Annualize PV Payment Factor3 rec'(vectorSearchCriteria;vectorSolveParms;yearIndex + 1;targetLoadInd) * 'Solve Choose R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms;V_(1;0)) ^ 12 - IF ( /*Death benefit is option C and not seven pay*/ 'DeathBenefitOptType Is IncreasingROP'('Solve DthBenOpt'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex;vectorSolveParms)) ; çä     /*Yes*/ 'Solve DB Option 3 Payment Adj Factor Annual'(vectorSearchCriteria;yearIndex;vectorSolveParms;V_(1;0)) ; çä    0çä  )çä) + IF ( /*Does calctype use fees?*/ 'CHG Calc Type Uses Fees'('CalcType SolveCriteria'(vectorSearchCriteria)) ; çä /*Yes - calculate net premium*/ 'Solve Net Premium Factor'(vectorSearchCriteria;yearIndex;targetLoadInd) ; çä // Else calc type doesn't include feesçä1çä)
F1 677a9fb6 4ccebd29 166f7a0 0 0 0 2
Solve Initial Premium Guess4(vectorSolveParms; vectorSearchCriteria)
Funktion
IF ('CalcType SolveCriteria Alike LTGT'(vectorSearchCriteria) || 'Solve Discounted Endowment Value'(vectorSearchCriteria;'Solve Start Year'(vectorSearchCriteria) - 1;12;vectorSolveParms;1) / 'Solve Init Guess Annualize PV Payment Factor4 rec'(vectorSearchCriteria;vectorSolveParms;'Solve Start Year'(vectorSearchCriteria);1) > 'SLV LoadTargetPremium'(vectorSearchCriteria) ; çä  'Solve Discounted Endowment Value'(vectorSearchCriteria;'Solve Start Year'(vectorSearchCriteria) - 1;12;vectorSolveParms;1) / 'Solve Init Guess Annualize PV Payment Factor4 rec'(vectorSearchCriteria;vectorSolveParms;'Solve Start Year'(vectorSearchCriteria);1) ; çä  'Solve Discounted Endowment Value'(vectorSearchCriteria;'Solve Start Year'(vectorSearchCriteria) - 1;12;vectorSolveParms;0) / 'Solve Init Guess Annualize PV Payment Factor4 rec'(vectorSearchCriteria;vectorSolveParms;'Solve Start Year'(vectorSearchCriteria);0)çä)
F1 166f7a0 677a9fb6 0 0 0 0 2
Solve Init Guess Annualize PV Payment Factor4 rec(vectorSearchCriteria; vectorSolveParms; yearIndex; targetLoadInd)
Funktion
IF (yearIndex = 'Solve Criteria Premium Duration'(vectorSearchCriteria) ; çä  0 ; çä  'Solve Init Guess Annualize PV Payment Factor4 rec'(vectorSearchCriteria;vectorSolveParms;yearIndex + 1;targetLoadInd) * 'Solve Choose R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms;V_(0;0)) ^ 12 - IF ( /*Death benefit is option C and not seven pay*/ 'DeathBenefitOptType Is IncreasingROP'('Solve DthBenOpt'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex;vectorSolveParms)) ; çä     /*Yes*/ 'Solve DB Option 3 Payment Adj Factor Annual'(vectorSearchCriteria;yearIndex;vectorSolveParms;V_(0;0)) ; çä    0çä  )çä) + IF ( /*Does calctype use fees?*/ 'CHG Calc Type Uses Fees'('CalcType SolveCriteria'(vectorSearchCriteria)) ; çä /*Yes - calculate net premium*/ 'Solve Net Premium Factor'(vectorSearchCriteria;yearIndex;targetLoadInd) ; çä // Else calc type doesn't include feesçä1çä)
F1 51cc8c12 264b278 5dd594d0 0 0 0 2
Solve Initial Premium Guess(vectorSolveParms; vectorSearchCriteria)
Funktion
'GEN Round'('Solve Init Guess Annualize PV Charges'(vectorSolveParms;vectorSearchCriteria) / 'Solve Init Guess Annualize PV Payment Factor'(vectorSearchCriteria;vectorSolveParms);2)
F1 5dd594d0 51cc8c12 12e548c9 294bce22 0 0 2
Solve Init Guess Annualize PV Charges(vectorSolveParms; vectorSearchCriteria)
Funktion
 // Term NSPçäSUMX(yearIndex;'Solve Start Year'(vectorSearchCriteria);'Solve Criteria Target Duration'(vectorSearchCriteria);'Solve Init Guess Annualize PV Yearly Charges'(vectorSolveParms;vectorSearchCriteria;#yearIndex)) +  // Endowment NSPçä('Solve Criteria Target CV'(vectorSearchCriteria) * 'Solve Annualize Product R Factor'(vectorSearchCriteria;'Solve Criteria Target Duration'(vectorSearchCriteria);vectorSolveParms) * ('Solve R Factor'(vectorSearchCriteria;'Solve Criteria Target Duration'(vectorSearchCriteria);vectorSolveParms) ^ 12))
F1 12e548c9 5dd594d0 2015ec88 0 0 0 2
Solve Init Guess Annualize PV Yearly Charges(vectorSolveParms; vectorSearchCriteria; yearIndex)
Funktion
 // Present value of charges at the beginning of the yearçä(('Solve Init Guess Total Charges'(vectorSolveParms;vectorSearchCriteria;yearIndex) * IF ( /*If R-factor is 1*/ 'Solve R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms) = 1 ; çä   /*Multiply by 12*/ 12 ; çä   /*Else compound R factor by 12*/ (1 - ('Solve R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms) ^ 12)) / (1 - 'Solve R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms))çä) +  // add flat amount premium load chargeçäIF ( /*If premium load is flat amount*/ 'Fee ChargeBasedOn is FlatAmount'('PI PolicyProduct Fee ChargeBasedOn'('Policy ProductCode';'FeeType PremiumLoad';TransEffDate)) //âNOT('PI PolicyProduct Fee ChargeBasedOn'('Policy ProductCode'; 'FeeType PremiumLoad'; TransEffDate) ALIKE 'GEN Vector Blank')çä//â&&çä//â'PI PolicyProduct Fee ChargeBasedOn'('Policy ProductCode'; 'FeeType PremiumLoad'; TransEffDate) = 1000500030çä && 'CHG Calc Type Uses Fees'('CalcType SolveCriteria'(vectorSearchCriteria)) && yearIndex <= MIN('Solve Criteria Premium Duration'(vectorSearchCriteria) + ('Solve Start Year'(vectorSearchCriteria) - 1);'Solve Criteria Target Duration'(vectorSearchCriteria)) ; çä // flat amount premium chargeçä'PLC Projected Total Premium Load Charge'('CalcType SolveCriteria'(vectorSearchCriteria);'FeeType PremiumLoad';yearIndex;100; // periodic premium not required for flat amount âçä'GEN Vector Blank'; // target premium vector not requiredçä0 // assumes premiums paid annually in advanceçä) ; çä /*Else don't add in premium load nowâ*/ 0çä)) +  // add premium load up to load target if applicableçäIF ( /*Load target calculation or Beyond Premium Duration?*/ 'CalcType SolveCriteria Alike LTGT'(vectorSearchCriteria) || yearIndex > MIN('Solve Criteria Premium Duration'(vectorSearchCriteria) + ('Solve Start Year'(vectorSearchCriteria) - 1);'Solve Criteria Target Duration'(vectorSearchCriteria)) ; çä /*Yes*/ 0 ; çä /*No*/ IF ( /*Premium load based on Load Target and Loads used in calctype?*/ NOT('PI PolicyProduct Fee ChargeBasedOn'('Policy ProductCode';'FeeType PremiumLoad';TransEffDate) ALIKE 'GEN Vector Blank') && ('PI PolicyProduct Fee ChargeBasedOn'('Policy ProductCode';'FeeType PremiumLoad';TransEffDate) EQUAL "1000500005" || 'PI PolicyProduct Fee ChargeBasedOn'('Policy ProductCode';'FeeType PremiumLoad';TransEffDate) EQUAL "1000500007") && 'CHG Calc Type Uses Fees'('CalcType SolveCriteria'(vectorSearchCriteria)) ; çä /*Yes*/ 'SLV LoadTargetPremium'(vectorSearchCriteria) * ('PLC Premium Load Primary Rate'('CalcType SolveCriteria'(vectorSearchCriteria);'FeeType PremiumLoad';0;yearIndex) * 0.01 - 'PLC Premium Load Secondary Rate'('CalcType SolveCriteria'(vectorSearchCriteria);'FeeType PremiumLoad';0;yearIndex) * 0.01) ; çä /*No*/ 0çä)çä)) * 'Solve Annualize Product R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms) // Discount from beginning of year back to issue date   çä
F1 2015ec88 12e548c9 7323fd8e 0 0 0 2
Solve Init Guess Total Charges(vectorSolveParms; vectorSearchCriteria; yearIndex)
Funktion
 // Base COI chargeçä'Solve Init Guess COI Charges'(vectorSolveParms;vectorSearchCriteria;yearIndex) * 'Solve DB Adj Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms) +  // Expense chargesçä(IF ( /*Does calc type use fees?*/ 'CHG Calc Type Uses Fees'('CalcType SolveCriteria'(vectorSearchCriteria)) ; çä   /*Yes - add expenses*/ 'Solve Init Guess Monthly Expenses'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex;1;vectorSolveParms) * 'Solve Non COI Timing Adjustment'(vectorSearchCriteria;yearIndex;vectorSolveParms) ; çä   /*No - exclude expenses*/ 0çä) // Benefit charges associated with the base coverageçä + 'COV Projected Monthly Total CovOption Charge'('CalcType SolveCriteria'(vectorSearchCriteria);'Std BaseCov Index'('CalcType SolveCriteria'(vectorSearchCriteria));yearIndex;1;vectorSolveParms) // Rider charges not associated with NARçä + 'Solve Init Guess Monthly NonNAR Coverage Charge'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex;vectorSolveParms) * 'Solve Non COI Timing Adjustment'(vectorSearchCriteria;yearIndex;vectorSolveParms)) * 'Solve Exp Rider Adj Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms)
F1 7323fd8e 2015ec88 0 586bfb97 0 0 2
Solve Init Guess Monthly Expenses(calcType; yearIndex; monthIndex; vectorSolveParms)
Funktion
IF ( /*Does calctype use fees?*/ 'CHG Calc Type Uses Fees'(calcType) ; çä   /*Yes - include admin fees*/ 'AC Proj Mthly Total AdminFee Charge'(calcType;'FeeType AdminFee';0;yearIndex;monthIndex;vectorSolveParms) + 'AC Proj Mthly Total AdminFee Charge'(calcType;'FeeType Expense';0;yearIndex;monthIndex;vectorSolveParms) ; çä   // Expense not included in 7 pay calculationsçä0çä)
F1 586bfb97 2015ec88 0 26e34292 0 0 2
Solve Init Guess Monthly NonNAR Coverage Charge(calcType; yearIndex; vectorSolveParms)
Funktion
SUMX(coverageIndex;0;IF ('SharedVector SolveParms Contains Number of Coverage'(vectorSolveParms) ; çä  'SharedVector SolveParms Number of Coverage'(calcType;vectorSolveParms) - 1 ; çä  'Policy Number Of Coverage'(calcType;yearIndex) - 1çä);IF ( /*Is coverage included?*/ 'COV Coverage Is Included'(calcType;#coverageIndex;yearIndex;1;vectorSolveParms) && (NOT('Coverage Is NAR Cost'(calcType;#coverageIndex))) ; çä /*Yes - include coverage charge*/ 'COV Projected Monthly Total Coverage Charge NoWMD'(calcType;#coverageIndex;0;0;yearIndex;1;vectorSolveParms) ; çä // bom_cv and total premium zero for initial guess calcsçä/*No - exclude*/0çä))
F1 26e34292 2015ec88 0 3979958a 0 0 2
Solve Init Guess COI Charges(vectorSolveParms; vectorSearchCriteria; yearIndex)
Funktion
(('Solve Base and Increase FaceAmount'('CalcType SolveCriteria'(vectorSearchCriteria);vectorSolveParms;yearIndex) / 'NAAR Discount Factor'('CalcType SolveCriteria'(vectorSearchCriteria))) * 'COV COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;yearIndex;vectorSolveParms) * 0.001) / (1 + ('COV COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;yearIndex;vectorSolveParms) * 0.001))
F1 3979958a 2015ec88 0 0 0 0 2
Solve Init Guess R Adjusted Annual Expenses(yearIndex; vectorSolveParms; vectorSearchCriteria; corridorInd)
Funktion
IF ( /*Does calctype use fees?*/ 'CHG Calc Type Uses Fees'('CalcType SolveCriteria'(vectorSearchCriteria)) ; çä   /*Yes - include admin fees*/ 'AC Proj Mthly Total AdminFee Charge'('CalcType SolveCriteria'(vectorSearchCriteria);'FeeType AdminFee';0;yearIndex;1;vectorSolveParms) * 'Solve R Factor Modal'('Solve Fee Mode'('FeeType AdminFee');vectorSolveParms;yearIndex;vectorSearchCriteria;corridorInd) + 'AC Proj Mthly Total AdminFee Charge'('CalcType SolveCriteria'(vectorSearchCriteria);'FeeType Expense';0;yearIndex;1;vectorSolveParms) * 'Solve R Factor Modal'('Solve Fee Mode'('FeeType Expense');vectorSolveParms;yearIndex;vectorSearchCriteria;corridorInd) ; çä   // Expense not included in 7 pay calculationsçä0çä)
F1 294bce22 51cc8c12 0 6462f8df 0 0 2
Solve Annualize Product R Factor(vectorSearchCriteria; yearIndex; vectorSolveParms)
Funktion
IF ( /*start year?*/ yearIndex = 'Solve Start Year'(vectorSearchCriteria) ; çä   /*Yes*/ 1.0 ; çä   /*No - calculate recursively*/ 'Solve Annualize Product R Factor'(vectorSearchCriteria;yearIndex - 1;vectorSolveParms) * ('Solve R Factor'(vectorSearchCriteria;yearIndex - 1;vectorSolveParms) ^ 12)çä)
F1 6462f8df 51cc8c12 0 52fa3199 0 0 2
Solve R Factor(vectorSearchCriteria; yearIndex; vectorSolveParms)
Funktion
1 / IF ( /*waiver exists and is inforce*/ 'Solve Waiver Exists and Is Inforce'(vectorSearchCriteria;yearIndex;vectorSolveParms) ; çä   // A CovOption object is included under the Base Coverage for WMDââçä/*Yes*/(1 + ('GEN Future Value Factor'('Solve Criteria Interest Rate'(vectorSearchCriteria;yearIndex);(1 / 12)) - 1) + 'COV COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;yearIndex;vectorSolveParms) * 0.001 * ('GEN Future Value Factor'('Solve Criteria Interest Rate'(vectorSearchCriteria;yearIndex);(1 / 12)) - 1) * (1 + 'COV CovOption COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;'Std CovOption Index'('CalcType SolveCriteria'(vectorSearchCriteria);0;'OptType WMD');yearIndex)) + IF ( /*Is death benefit option 1 or option 3?*/ 'DeathBenefitOptType Is Level'('Solve DthBenOpt'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex;vectorSolveParms)) || 'DeathBenefitOptType Is IncreasingROP'('Solve DthBenOpt'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex;vectorSolveParms)) ; çä     /*Yes*/ ((1 + 'COV CovOption COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;'Std CovOption Index'('CalcType SolveCriteria'(vectorSearchCriteria);0;'OptType WMD');yearIndex)) * 'COV COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;yearIndex;vectorSolveParms) * 0.001) ; çä     /*No*/ 0çä  )) ; çä /*No*/ (1 + ('GEN Future Value Factor'('Solve Criteria Interest Rate'(vectorSearchCriteria;yearIndex);(1 / 12)) - 1) + IF ( /*Is death benefit option 1 or option 3?*/ 'DeathBenefitOptType Is Level'('Solve DthBenOpt'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex;vectorSolveParms)) || 'DeathBenefitOptType Is IncreasingROP'('Solve DthBenOpt'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex;vectorSolveParms)) ; çä   /*Yes*/ (('GEN Future Value Factor'('Solve Criteria Interest Rate'(vectorSearchCriteria;yearIndex);(1 / 12)) - 1) * 'COV COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;yearIndex;vectorSolveParms) * 0.001) + 'COV COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;yearIndex;vectorSolveParms) * 0.001 ; çä   /*No*/ (('GEN Future Value Factor'('Solve Criteria Interest Rate'(vectorSearchCriteria;yearIndex);(1 / 12)) - 1) * 'COV COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;yearIndex;vectorSolveParms) * 0.001)çä))çä)
F1 52fa3199 51cc8c12 0 76c4ef1e 0 0 2
Solve DB Adj Factor( vectorSearchCriteria; yearIndex; vectorSolveParms)
Funktion
IF ( /*waiver exists and is active*/ 'Solve Waiver Exists and Is Inforce'(vectorSearchCriteria;yearIndex;vectorSolveParms) ; çä   // A CovOption object is included under the Base Coverage for WMDââçä/*Yes*/('GEN Future Value Factor'('Solve Criteria Interest Rate'(vectorSearchCriteria;yearIndex);(1 / 12)) * (1 + 'COV COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;yearIndex;vectorSolveParms) * 0.001) * (1 + 'COV CovOption COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;'Std CovOption Index'('CalcType SolveCriteria'(vectorSearchCriteria);0;'OptType WMD');yearIndex))) * 'Solve R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms) ; çä   /*No*/ IF ( /*Is death benefit option 1 or option 3?*/ 'DeathBenefitOptType Is Level'('Solve DthBenOpt'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex;vectorSolveParms)) || 'DeathBenefitOptType Is IncreasingROP'('Solve DthBenOpt'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex;vectorSolveParms)) ; çä     /*Yes*/ 1 ; çä     /*No*/ ('GEN Future Value Factor'('Solve Criteria Interest Rate'(vectorSearchCriteria;yearIndex);(1 / 12)) * (1 + 'COV COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;yearIndex;vectorSolveParms) * 0.001)) * 'Solve R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms)çä  )çä)
F1 76c4ef1e 51cc8c12 0 4a8b715f 0 0 2
Solve Exp Rider Adj Factor(vectorSearchCriteria; yearIndex; vectorSolveParms)
Funktion
IF ( /*waiver exists and is active*/ 'Solve Waiver Exists and Is Inforce'(vectorSearchCriteria;yearIndex;vectorSolveParms) ; çä   // A CovOption object is included under the Base Coverage for WMDââçä/*Yes*/IF ( /*Is death benefit option 1 or option 3?*/ 'DeathBenefitOptType Is Level'('Solve DthBenOpt'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex;vectorSolveParms)) || 'DeathBenefitOptType Is IncreasingROP'('Solve DthBenOpt'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex;vectorSolveParms)) ; çä     /*Yes*/ ('GEN Future Value Factor'('Solve Criteria Interest Rate'(vectorSearchCriteria;yearIndex);(1 / 12)) * (1 + 'COV COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;yearIndex;vectorSolveParms) * 0.001) * (1 + 'COV CovOption COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;'Std CovOption Index'('CalcType SolveCriteria'(vectorSearchCriteria);0;'OptType WMD');yearIndex))) * 'Solve R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms) ; çä     /*No*/ (1 + ('GEN Future Value Factor'('Solve Criteria Interest Rate'(vectorSearchCriteria;yearIndex);(1 / 12)) - 1) * (1 + 'COV COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;yearIndex;vectorSolveParms) * 0.001)) * (1 + 'COV CovOption COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;'Std CovOption Index'('CalcType SolveCriteria'(vectorSearchCriteria);0;'OptType WMD');yearIndex)) * 'Solve R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms)çä  ) ; çä /*No*/ 1çä)
F1 4a8b715f 51cc8c12 0 71848698 0 0 2
Solve Non COI Timing Adjustment(vectorSearchCriteia; yearIndex; vectorSolveParms)
Funktion
1
F1 71848698 51cc8c12 135debb4 0 0 0 2
Solve Init Guess Annualize PV Payment Factor(vectorSearchCriteria; vectorSolveParms)
Funktion
SUMX(yearIndex;'Solve Start Year'(vectorSearchCriteria);MIN('Solve Criteria Premium Duration'(vectorSearchCriteria) + ('Solve Start Year'(vectorSearchCriteria) - 1);'Solve Criteria Target Duration'(vectorSearchCriteria));'Solve Annualize Product R Factor'(vectorSearchCriteria;#yearIndex;vectorSolveParms) * IF ( /*Does calctype use fees?*/ 'CHG Calc Type Uses Fees'('CalcType SolveCriteria'(vectorSearchCriteria)) ; çä   /*Yes - calculate net premium*/ 'Solve Net Premium Factor'(vectorSearchCriteria;#yearIndex;1) ; çä   // Else calc type doesn't include feesçä1çä) - 'Solve DB Option 3 Payment Adj Factor'(vectorSearchCriteria;#yearIndex;vectorSolveParms))
F1 135debb4 71848698 72b2c6d5 7981e5b8 0 0 2
Solve Net Premium Factor(vectorSearchCriteria; yearIndex; targetLoadInd)
Funktion
CASE( /*Charge based on rule*/ 'PLC Premium Load Rule'('CalcType SolveCriteria'(vectorSearchCriteria);1;'FeeType PremiumLoad');çä   // No premium load or flat amount (accounted for in Mthly_expensesçä"";"1000500022";"1000500030" : 1;çä   // Percent of premium for lifeçä"1000500003" : 1 - 'PLC Premium Load Primary Rate'('CalcType SolveCriteria'(vectorSearchCriteria);'FeeType PremiumLoad';0;yearIndex) * 0.01;çä   // Elseçä : IF ( /*Load target calculation?*/ 'CalcType SolveCriteria Alike LTGT'(vectorSearchCriteria) || NOT(targetLoadInd) ; çä     // If we are solving for the load target, we are assuming that the premium solve amountçä// is the target amount.  'Solve Init Guess Premium Load Rate' is asking for the load target premiumçä// from the attributes.   We can't have that if the load target is what we are solving for.çä1 - 'PLC Premium Load Primary Rate'('CalcType SolveCriteria'(vectorSearchCriteria);'FeeType PremiumLoad';0;yearIndex) * 0.01 ; çä     // Else use secondary load rate and the primary will be handled as an annual chargeçä1 - 'PLC Premium Load Secondary Rate'('CalcType SolveCriteria'(vectorSearchCriteria);'FeeType PremiumLoad';0;yearIndex) * 0.01çä  ))çä
F1 72b2c6d5 135debb4 0 183fa277 0 0 2
-- Solve Init Guess Premium Load Rate(calcType; vectorSolveParms; yearIndex)
Funktion
çä'PLC Projected Total Premium Load Charge'(çäâââcalcType;çäâââ'FeeType PremiumLoad'; çäâââyearIndex;çäâââ'SharedVector SolveParms Premium'(vectorSolveParms; yearIndex); çäâââIF('Std Calling System Is Illustration Based' ;çäââââ/*Solve for Illustration?*/çäââââv_('TARGET Total Target Premium'('CalcType LTGT'(calcType)) );çäâââââ/*else use target from INPUT*/çäâââââVECTORX(cov; 0; 'Policy Number Of Coverage'(calcType; TransEffDur)-1; çäââââââV_('Policy Coverage TargetPremAmt'(#cov); #cov+1)çäâââââ)çäâââ);çäâââ0ââ// assumes premiums paid annually in advanceçäââ)çäââ/ ââ// to get rate rather than charge amountçäââ'SharedVector SolveParms Premium'(vectorSolveParms; yearIndex)
F1 183fa277 135debb4 0 3a9f513b 0 0 2
Solve Init Guess Premium Load Rate(calcType; vectorSolveParms; yearIndex)
Funktion
'PLC Projected Total Premium Load Charge'(calcType;'FeeType PremiumLoad';yearIndex;'SharedVector SolveParms Premium'(vectorSolveParms;yearIndex);IF ('Std Calling System Is Illustration Based' ; çä   /*Solve for Illustration?*/ v_('TARGET Total Target Premium'('CalcType LTGT'(calcType);yearIndex)) ; çä   /*else use target from INPUT*/ VECTORX(cov;0;'Policy Number Of Coverage'(calcType;TransEffDur) - 1;V_('Policy Coverage TargetPremAmt'(#cov);#cov + 1))çä);0 // assumes premiums paid annually in advanceçä) /  // to get rate rather than charge amountçä'SharedVector SolveParms Premium'(vectorSolveParms;yearIndex)
F1 3a9f513b 135debb4 0 0 0 0 2
SLV IG Premium Load Premium Guess(calcType; baseFace; vectorSearchCriteria)
Funktion
'Solve Init Guess Annualize PV Charges'(baseFace;vectorSearchCriteria) / 'Solve Criteria Premium Duration'(vectorSearchCriteria)
F1 7981e5b8 71848698 0 0 0 0 2
Solve DB Option 3 Payment Adj Factor(vectorSearchCriteria, yearIndex; vectorSolveParms)
Funktion
IF ( /*Death benefit is option C and not seven pay*/ 'DeathBenefitOptType Is IncreasingROP'('Solve DthBenOpt'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex;vectorSolveParms)) ; çä   /*Yes*/ IF ( /*If R-factor is 1*/ 'Solve R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms) = 1 ; çä     /*Multiply by 12*/ 12 ; çä     /*Else compound R factor by 12*/ (1 - ('Solve R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms) ^ 12)) / (1 - 'Solve R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms))çä  ) * 'Solve Annualize Product R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms) // Discount from beginning of year back to issue date   çä * (yearIndex * 'COV COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;yearIndex;vectorSolveParms) * 0.001) * 'Solve R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms) * IF ( /*waiver exists and is active*/ 'Solve Waiver Exists and Is Inforce for Interest Rate'(vectorSearchCriteria;yearIndex;vectorSolveParms) ; çä   // A CovOption object is included under the Base Coverage for WMDââçä/*Yes*/(1 + 'COV CovOption COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;'Std CovOption Index'('CalcType SolveCriteria'(vectorSearchCriteria);0;'OptType WMD');yearIndex)) ; çä   /*No*/ 1çä) ; çä /*No*/ 0çä)
F1 26503a8 24e83b0 2650780 2651908 0 0 2
-- Premium Search Criteria Vector Extraction Functions --
Funktion
çä
F1 2650780 26503a8 2650898 2650b40 0 0 2
Solve Criteria Target CV(vectorSearchCriteria)
Funktion
e_(vectorSearchCriteria;1)
F1 2650898 2650780 0 0 0 0 2
Solve Criteria Target Premium(vectorSearchCriteria)
Funktion
e_(vectorSearchCriteria;1)
F1 2650b40 26503a8 0 2650c60 0 0 2
Solve Criteria Target Duration(vectorSearchCriteria)
Funktion
e_(vectorSearchCriteria;2)
F1 2650c60 26503a8 0 2650d80 0 0 2
Solve Criteria Premium Duration(vectorSearchCriteria)
Funktion
e_(vectorSearchCriteria;3)
F1 2650d80 26503a8 0 2650ea0 0 0 2
Solve Criteria Interest Rate(vectorSearchCriteria; yearIndex)
Funktion
IF (v_LENGTH(e_(vectorSearchCriteria;4)) = 0 || yearIndex < 1 ; çä  e_(vectorSearchCriteria;4) ; çä  e_(e_(vectorSearchCriteria;4);MIN(v_LENGTH(e_(vectorSearchCriteria;4));yearIndex) - 1)çä)
F1 2650ea0 26503a8 0 2650fc0 0 0 2
Solve Criteria CV Tolerance(vectorSearchCriteria)
Funktion
e_(vectorSearchCriteria;5)
F1 2650fc0 26503a8 0 26510e0 0 0 2
Solve Criteria Premium Tolerance(vectorSearchCriteria)
Funktion
e_(vectorSearchCriteria;6)
F1 26510e0 26503a8 0 2651208 0 0 2
Solve Criteria Requested Stop Duration(vectorSearchCriteria)
Funktion
e_(vectorSearchCriteria;7)
F1 2651208 26503a8 2651520 559cf351 0 0 2
Solve Criteria Addl Info(vectorSearchCriteria)
Funktion
e_(vectorSearchCriteria;8)
F1 2651520 2651208 0 2651608 0 0 2
Solve Start Year(vectorSearchCriteria)
Funktion
'SharedVector CVPROJAddlInfo StartYear'('Solve Criteria Addl Info'(vectorSearchCriteria))
F1 2651608 2651208 0 44f8b8 0 0 2
SLV LoadTargetPremium(vectorSearchCriteria)
Funktion
SUMX(target_coverageIndex;0;V_LENGTH('SharedVector CVPROJAddlInfo LoadTargetPremium'(('Solve Criteria Addl Info'(vectorSearchCriteria)))) - 1;E_(E_('SharedVector CVPROJAddlInfo LoadTargetPremium'(('Solve Criteria Addl Info'(vectorSearchCriteria)));#target_coverageIndex);0))
F1 44f8b8 2651208 0 7174b1ba 0 0 2
Solve Criteria Replace GuidelinePremiums(vectorSearchCriteria; faceAmount)
Funktion
IF ('SharedVector CVPROJAddlInfo AdjustForGuidelines'('Solve Criteria Addl Info'(vectorSearchCriteria)) ; çä  V_REPLACE(vectorSearchCriteria;V_REPLACE('Solve Criteria Addl Info'(vectorSearchCriteria);V_('TaxCompliance Guideline Level Premium FaceSolve'("GLP";faceAmount);'TaxCompliance Guideline Single Premium FaceSolve'("GSP";faceAmount));3);8) ; çä  vectorSearchCriteriaçä)
F1 7174b1ba 2651208 0 4e1d5b98 0 0 2
-- Solve Criteria Replace Target(vectorSearchCriteria; faceAmount)
Funktion
IF('Solve Target Premiums used for Premium Loads'(vectorSearchCriteria);çäâV_REPLACE(vectorSearchCriteria;çäââV_REPLACE('Solve Criteria Addl Info'(vectorSearchCriteria);çäâââV_('TARGET Total Target Premium FaceSolve'(çäââââfaceAmount;çäââââ'CalcType LTGT'('CalcType SolveCriteria'(vectorSearchCriteria))çäâââ));çäâââ6çäââ);çäââ8çäâ);çäâvectorSearchCriteriaçä)
F1 4e1d5b98 2651208 3bf1066d 0 0 0 2
Solve Criteria Replace Target(vectorSearchCriteria; faceAmount; yearIndex)
Funktion
IF ('Solve Target Premiums used for Premium Loads'(vectorSearchCriteria) ; çä  V_REPLACE(vectorSearchCriteria;V_REPLACE('Solve Criteria Addl Info'(vectorSearchCriteria);V_('TARGET Total Target Premium FaceSolve'(faceAmount;'CalcType LTGT'('CalcType SolveCriteria'(vectorSearchCriteria))));6);8) ; çä  vectorSearchCriteriaçä)
F1 3bf1066d 4e1d5b98 0 0 0 0 2
Solve Target Premiums used for Premium Loads(vectorSearchCriteria)
Funktion
IF ('PLC Premium Load Rule'('CalcType SolveCriteria'(vectorSearchCriteria);1;'FeeType PremiumLoad') ALIKE "1000500005" || 'PLC Premium Load Rule'('CalcType SolveCriteria'(vectorSearchCriteria);1;'FeeType PremiumLoad') ALIKE "1000500007" || 'PLC Premium Load Rule'('CalcType SolveCriteria'(vectorSearchCriteria);2;'FeeType PremiumLoad') ALIKE "1000500005" || 'PLC Premium Load Rule'('CalcType SolveCriteria'(vectorSearchCriteria);2;'FeeType PremiumLoad') ALIKE "1000500007" || 'PLC Premium Load Rule'('CalcType SolveCriteria'(vectorSearchCriteria);3;'FeeType PremiumLoad') ALIKE "1000500005" || 'PLC Premium Load Rule'('CalcType SolveCriteria'(vectorSearchCriteria);3;'FeeType PremiumLoad') ALIKE "1000500007" ; çä  1 ; çä  0çä)
F1 559cf351 26503a8 0 48e42044 0 0 2
Solve Criteria Calc Type(vectorSearchCriteria)
Funktion
e_(vectorSearchCriteria;0)
F1 48e42044 26503a8 0 509b39dd 0 0 2
Solve Use COI In Corridor(vectorSearchCriteria)
Funktion
 /*CASE('CalcType Shadow Is Active'('CalcType SolveCriteria'(vectorSearchCriteria));çäâ"CurrCV", "SHADOW"â:â1;çäâââââââ:â0çä)*/ 'CalcType Shadow Is Active'('CalcType SolveCriteria'(vectorSearchCriteria)) || 'CalcType Rate Assumption Is Active'('CalcType SolveCriteria'(vectorSearchCriteria))
F1 509b39dd 26503a8 0 0 0 0 2
Solve FaceSolve Target Value(currGuess; currCashValue; prevGuess; prevCashValue; vectorSearchCriteria)
Funktion
CASE('Illus Face Amt Solve DesignType'('CalcType SolveCriteria'(vectorSearchCriteria));çä   // Guidelines, 7-pay, target premçä1000500002;1000500003;1000500004;1000500007; //Endow on current assumptions;  base/term mixçä1000500009;1000500011 : 'Solve Premium Guess2'(currGuess;currCashValue;prevGuess;prevCashValue);çä   // MNLP, Shadow account; Target CV at target Duration ("endows" at target cv)çä : 'Solve Criteria Target CV'(vectorSearchCriteria))çä
F1 2651908 24e83b0 26519f8 2652ef8 0 0 2
-- Solve Annual Cash Value Calculations --
Funktion

F1 26519f8 2651908 48547467 5b19d801 0 0 2
Solve End Of Year Cash Value Rec(calcType; vectorSolveParms; projInterestRate; yearIndex; monthIndex; vectorSearchCriteria)
Funktion
'GEN Round'(IF ( /*First month of projection period*/ (('SharedVector CVPROJAddlInfo StartMonth'('Solve Criteria Addl Info'(vectorSearchCriteria)) = 1) && (yearIndex <= 'SharedVector CVPROJAddlInfo StartYear'('Solve Criteria Addl Info'(vectorSearchCriteria)) - 1) && (monthIndex = 12)) || (('SharedVector CVPROJAddlInfo StartMonth'('Solve Criteria Addl Info'(vectorSearchCriteria)) > 1) && (yearIndex = 'SharedVector CVPROJAddlInfo StartYear'('Solve Criteria Addl Info'(vectorSearchCriteria))) && (monthIndex = 'SharedVector CVPROJAddlInfo StartMonth'('Solve Criteria Addl Info'(vectorSearchCriteria)) - 1)) ; çä   // At the starting point of the projectionçäIF ('SharedVector CVPROJAddlInfo IsInforceCalc'(calcType;'Solve Criteria Addl Info'(vectorSearchCriteria)) ; çä    'Policy Life CashValueAmt' ; çä    0çä  ) ; çä // Else need to recursively determine the EOM CVçäIF ('Solve Neg NAR Check'(calcType;'Solve End Of Year Cash Value Rec'(calcType;vectorSolveParms;projInterestRate;yearIndex - 1;12;vectorSearchCriteria);vectorSolveParms;yearIndex;vectorSearchCriteria;V_(1;0;'Solve COI Cov for R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms;v_(1;0)))) = 1 ; çä  'Solve Annual Cash Value'('Solve End Of Year Cash Value Rec'(calcType;vectorSolveParms;projInterestRate;yearIndex - 1;12;vectorSearchCriteria);vectorSolveParms;yearIndex;vectorSearchCriteria;V_(1;0;'Solve COI Cov for R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms;v_(1;0)))) ; çä  IF ('Solve Neg NAR Check'(calcType;'Solve End Of Year Cash Value Rec'(calcType;vectorSolveParms;projInterestRate;yearIndex - 1;12;vectorSearchCriteria);vectorSolveParms;yearIndex;vectorSearchCriteria;V_(1;0;'Solve COI Cov for R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms;v_(1;0)))) = 2 ; çä    'Solve Annual Cash Value'('Solve End Of Year Cash Value Rec'(calcType;vectorSolveParms;projInterestRate;yearIndex - 1;12;vectorSearchCriteria);vectorSolveParms;yearIndex;vectorSearchCriteria;V_('Solve Use COI In Corridor'(vectorSearchCriteria);1;'Solve COI Cov for R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms;v_(1;0)))) ; çä    'Solve Monthly Cash Value rec'('Solve End Of Year Cash Value Rec'(calcType;vectorSolveParms;projInterestRate;yearIndex - 1;12;vectorSearchCriteria);vectorSolveParms;yearIndex;12;vectorSearchCriteria)çä  )çä)çä); // Number of places to roundçä'ACCS Decimal'(calcType))
F1 48547467 26519f8 0 64a44c54 0 0 2
Solve Monthly Cash Value rec(prevEOYCV; vectorSolveParms; yearIndex; monthIndex; vectorSearchCriteria)
Funktion
IF (monthIndex = 1 ; çä  'CVProjection Monthly BOM Cash Value'('CalcType SolveCriteria'(vectorSearchCriteria);prevEOYCV;vectorSolveParms;'Solve Criteria Interest Rate'(vectorSearchCriteria;yearIndex);'Solve Criteria Addl Info'(vectorSearchCriteria);yearIndex;monthIndex) * 'GEN Future Value Factor'('Solve Criteria Interest Rate'(vectorSearchCriteria;yearIndex);(1 / 12)) ; çä  'CVProjection Monthly BOM Cash Value'('CalcType SolveCriteria'(vectorSearchCriteria);'Solve Monthly Cash Value rec'(prevEOYCV;vectorSolveParms;yearIndex;monthIndex - 1;vectorSearchCriteria);vectorSolveParms;'Solve Criteria Interest Rate'(vectorSearchCriteria;yearIndex);'Solve Criteria Addl Info'(vectorSearchCriteria);yearIndex;monthIndex) * 'GEN Future Value Factor'('Solve Criteria Interest Rate'(vectorSearchCriteria;yearIndex);(1 / 12))çä)
F1 64a44c54 26519f8 79d2cf47 7744e11a 0 0 2
Solve Neg NAR Check(calcType; prevEOYCV; vectorSolveParms; yearIndex; vectorSearchCriteria; corridorInd)
Funktion
IF (('DeathBenefitOptType Is Increasing'('Solve DthBenOpt'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex;vectorSolveParms)) || (('Solve Annual Cash Value'(prevEOYCV;vectorSolveParms;yearIndex;vectorSearchCriteria;corridorInd) <= 'Solve NAR Death Benefit'(calcType;yearIndex;vectorSolveParms;vectorSearchCriteria)) && (prevEOYCV //'Solve Annual Cash Value'(prevPrevEOYCV; vectorSolveParms; yearIndex-1; vectorSearchCriteria; corridorInd)çä <= 'Solve NAR Death Benefit'(calcType;yearIndex;vectorSolveParms;vectorSearchCriteria)) && ('Solve Beg of First Month Pre NAR CashValue'(prevEOYCV;vectorSolveParms;yearIndex;vectorSearchCriteria) <= 'Solve NAR Death Benefit'(calcType;yearIndex;vectorSolveParms;vectorSearchCriteria)))) && NOT('Solve COI Cov for R Factor Change'(vectorSearchCriteria;prevEOYCV;yearIndex;vectorSolveParms;corridorInd)) ; çä  1 ; çä  IF (('Solve Annual Cash Value'(prevEOYCV;vectorSolveParms;yearIndex;vectorSearchCriteria;V_('Solve Use COI In Corridor'(vectorSearchCriteria);0) /*corridorInd*/ ) > 'Solve NAR Death Benefit'(calcType;yearIndex;vectorSolveParms;vectorSearchCriteria)) && (prevEOYCV > 'Solve NAR Death Benefit'(calcType;yearIndex;vectorSolveParms;vectorSearchCriteria)) && NOT('Solve COI Cov for R Factor Change'(vectorSearchCriteria;prevEOYCV;yearIndex;vectorSolveParms;corridorInd)) ; çä    2 ; çä    3çä  )çä)
F1 79d2cf47 64a44c54 7a9a152c 0 0 0 2
Solve NAR Death Benefit(calcType; yearIndex; vectorSolveParms; vectorSearchCriteria)
Funktion
('Solve Base and Increase FaceAmount'(calcType;vectorSolveParms;yearIndex) + IF ('DeathBenefitOptType Is IncreasingROP'('Solve DthBenOpt'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex;vectorSolveParms)) ; çä  'Solve Cumulative Premium'(yearIndex;vectorSolveParms;vectorSearchCriteria) ; çä  0çä)) / 'NAAR Corridor Factor'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex)
F1 7a9a152c 79d2cf47 0 0 0 0 2
Solve Cumulative Premium(yearIndex; vectorSolveParms; vectorSearchCriteria)
Funktion
IF (yearIndex <= 'Solve Start Year'(vectorSearchCriteria) ; çä  'SharedVector SolveParms Premium'(vectorSolveParms;yearIndex) ; çä  IF (yearIndex > MIN('Solve Criteria Premium Duration'(vectorSearchCriteria) + ('Solve Start Year'(vectorSearchCriteria) - 1);'Solve Criteria Target Duration'(vectorSearchCriteria)) ; çä    0 ; çä    'Solve Cumulative Premium'(yearIndex - 1;vectorSolveParms;vectorSearchCriteria) + 'SharedVector SolveParms Premium'(vectorSolveParms;yearIndex)çä  )çä)
F1 7744e11a 26519f8 0 2652d68 0 0 2
Solve Beg of First Month Pre NAR CashValue(prevEOYCV; vectorSolveParms; yearIndex; vectorSearchCriteria)
Funktion
prevEOYCV + 'SharedVector SolveParms Premium'(vectorSolveParms;yearIndex) * IF ( /*Does calctype use fees?*/ 'CHG Calc Type Uses Fees'('CalcType SolveCriteria'(vectorSearchCriteria)) ; çä   /*Yes - calculate net premium*/ 'Solve Net Premium Factor'(vectorSearchCriteria;yearIndex;1) ; çä   // Else calc type doesn't include feesçä1çä) -  //'Solve Premium Loads'(yearIndex; 'SharedVector SolveParms Premium'(vectorSolveParms; yearIndex); vectorSearchCriteria)çä'Solve Premium Loads'(vectorSolveParms;vectorSearchCriteria;yearIndex) -  // Expense chargesçäIF ( /*Does calc type use fees?*/ 'CHG Calc Type Uses Fees'('CalcType SolveCriteria'(vectorSearchCriteria)) ; çä /*Yes - add expenses*/ 'Solve Init Guess Monthly Expenses'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex;1;'SharedVector SolveParms Shorten for Charges'(vectorSolveParms)) * 'Solve Non COI Timing Adjustment'(vectorSearchCriteria;yearIndex;'SharedVector SolveParms Shorten for Charges'(vectorSolveParms)) ; çä /*No - exclude expenses*/ 0çä) // Benefit charges associated with the base coverageçä + 'COV Projected Monthly Total CovOption Charge'('CalcType SolveCriteria'(vectorSearchCriteria);'Std BaseCov Index'('CalcType SolveCriteria'(vectorSearchCriteria));yearIndex;1;'SharedVector SolveParms Shorten for Charges'(vectorSolveParms)) // Rider charges not associated with NARçä + 'Solve Init Guess Monthly NonNAR Coverage Charge'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex;'SharedVector SolveParms Shorten for Charges'(vectorSolveParms)) * 'Solve Non COI Timing Adjustment'(vectorSearchCriteria;yearIndex;'SharedVector SolveParms Shorten for Charges'(vectorSolveParms))
F1 2652d68 26519f8 0 401ec53b 0 0 2
Solve Specified Amount(calcType; vectorSolveparms)
Funktion
IF ('SharedVector SolveParms FaceAmount Passed'(0;vectorSolveParms) ; çä  'SharedVector SolveParms FaceAmount'(0;vectorSolveParms;'SharedVector SolveParms StartYear'(vectorSolveParms)) ; çä  SUMX(cov;0;'Policy Number Of Coverage'(calcType;TransEffDur) - 1;IF ( /*Coverage in force, and not a rider*///'Coverage Is InForce'(calcType; #cov; TransEffDate; TransEffDur) çä 'Std Coverage Is InForce'(calcType;#cov;TransEffDate;TransEffDur) && ('IndicatorCode is Base'('Policy Coverage IndicatorCode'(calcType;#cov)) || 'IndicatorCode is BaseIncrease'('Policy Coverage IndicatorCode'(calcType;#cov))) ; çä     /*Include specified amount in total for policy*/ 'Policy Coverage CurrentNumberOfUnits'(calcType;#cov;TransEffDur) * 'PI CoverageProduct ValuePerUnit'(calcType;'Policy Coverage ProductCode'(calcType;#cov);#cov;'Policy EffDate') ; çä     // Else return zero for coverageçä0çä  ))çä)
F1 401ec53b 26519f8 25408f12 7efd9428 0 0 2
Solve Annual Cash Value(prevEOYCV; vectorSolveParms; yearIndex; vectorSearchCriteria; corridorInd)
Funktion
(prevEOYCV + ('PREMIUM Projected GrossPremium'('CalcType SolveCriteria'(vectorSearchCriteria);vectorSolveParms;'Solve Criteria Addl Info'(vectorSearchCriteria);yearIndex;1) * IF ( /*Does calctype use fees?*/ 'CHG Calc Type Uses Fees'('CalcType SolveCriteria'(vectorSearchCriteria)) ; çä   /*Yes - calculate net premium*/ 'Solve Net Premium Factor'(vectorSearchCriteria;yearIndex;1) ; çä   // Else calc type doesn't include feesçä1çä) -  //'Solve Target Premium Loads'(vectorSolveParms; vectorSearchCriteria; yearIndex; 1)çä//'Solve Premium Loads'(yearIndex; 'SharedVector SolveParms Premium'(vectorSolveParms; yearIndex); vectorSearchCriteria)çä'Solve Premium Loads'(vectorSolveParms;vectorSearchCriteria;yearIndex)) //Multiply by modal premium annuity factor. çä * 'Solve Premium Modal Factor'(vectorSolveParms;yearIndex;vectorSearchCriteria;corridorInd) -  // Base COI chargeçä('Solve Init Guess COI Charges Projection'(vectorSolveParms;vectorSearchCriteria;yearIndex;corridorInd) * 'Solve DB Adj Factor New'(vectorSearchCriteria;yearIndex;'SharedVector SolveParms Shorten for Charges'(vectorSolveParms);corridorInd) * IF (e_(corridorInd;1) ; çä0 ; çä1çä) + ( // Benefit charges associated with the base coverageçä'COV Projected Monthly Total CovOption Charge'('CalcType SolveCriteria'(vectorSearchCriteria);'Std BaseCov Index'('CalcType SolveCriteria'(vectorSearchCriteria));yearIndex;1;'SharedVector SolveParms Shorten for Charges'(vectorSolveParms)) // Rider charges not associated with NARçä + 'Solve Init Guess Monthly NonNAR Coverage Charge'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex;'SharedVector SolveParms Shorten for Charges'(vectorSolveParms)) * 'Solve Non COI Timing Adjustment'(vectorSearchCriteria;yearIndex;'SharedVector SolveParms Shorten for Charges'(vectorSolveParms))) * 'Solve Choose Exp Rider Adj Factor'(vectorSearchCriteria;yearIndex;'SharedVector SolveParms Shorten for Charges'(vectorSolveParms);corridorInd)) * (1 - ('Solve Choose R Factor'(vectorSearchCriteria;yearIndex;'SharedVector SolveParms Shorten for Charges'(vectorSolveParms);corridorInd) ^ 12)) / (1 - 'Solve Choose R Factor'(vectorSearchCriteria;yearIndex;'SharedVector SolveParms Shorten for Charges'(vectorSolveParms);corridorInd)) - 'Solve Init Guess R Adjusted Annual Expenses'(yearIndex;vectorSolveParms;vectorSearchCriteria;corridorInd) * 'Solve Choose Exp Rider Adj Factor'(vectorSearchCriteria;yearIndex;'SharedVector SolveParms Shorten for Charges'(vectorSolveParms);corridorInd)) / 'Solve Choose R Factor'(vectorSearchCriteria;yearIndex;'SharedVector SolveParms Shorten for Charges'(vectorSolveParms);corridorInd) ^ 12
F1 25408f12 401ec53b 0 41468811 0 0 2
Solve Premium Modal Factor(vectorSolveParms; yearIndex; vectorSearchCriteria; corridorInd)
Funktion
IF (NOT('PaymentMode is Annual'('Solve Premium Mode'('CalcType SolveCriteria'(vectorSearchCriteria)))) ; çä  (1 - 'Solve Choose R Factor'(vectorSearchCriteria;yearIndex;'SharedVector SolveParms Shorten for Charges'(vectorSolveParms);corridorInd) ^ 12) / (1 - 'Solve Choose R Factor'(vectorSearchCriteria;yearIndex;'SharedVector SolveParms Shorten for Charges'(vectorSolveParms);corridorInd) ^ 'GEN Months In Paymode'('Solve Premium Mode'('CalcType SolveCriteria'(vectorSearchCriteria)))) ; çä  1çä)
F1 41468811 401ec53b 0 43dffb3d 0 0 2
Solve Premium Mode(calcType)
Funktion
'ACCS CalcRule Target Premium Mode'(calcType;'Policy CarrierCode';'Policy ProductCode';'Policy EffDate')
F1 43dffb3d 401ec53b 0 0 0 0 2
Solve R Factor Modal(mode; vectorSolveParms; yearIndex; vectorSearchCriteria; corridorInd)
Funktion
(1 - 'Solve Choose R Factor'(vectorSearchCriteria;yearIndex;'SharedVector SolveParms Shorten for Charges'(vectorSolveParms);corridorInd) ^ 12) / (1 - 'Solve Choose R Factor'(vectorSearchCriteria;yearIndex;'SharedVector SolveParms Shorten for Charges'(vectorSolveParms);corridorInd) ^ 'GEN Months In Paymode'(mode))
F1 7efd9428 26519f8 0 0 0 0 2
Solve Init Guess COI Charges Projection(vectorSolveParms; vectorSearchCriteria; yearIndex; corridorInd)
Funktion
SUMX(covIndex;0;'Policy Number Of Coverage'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex) - 1;IF ('Coverage Is NAR Cost'('CalcType SolveCriteria'(vectorSearchCriteria);#covIndex) ; çä  ((('SharedVector SolveParms FaceAmount'(#covIndex;vectorSolveParms;yearIndex) + IF ('DeathBenefitOptType Is IncreasingROP'('Solve DthBenOpt'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex;vectorSolveParms)) ; çä    'Solve Cumulative Premium'(yearIndex;vectorSolveParms;vectorSearchCriteria) ; çä    0çä  )) / 'NAAR Discount Factor'('CalcType SolveCriteria'(vectorSearchCriteria))) * 'COV COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);MAX(#covIndex;IF (V_LENGTH(corridorInd) >= 3 ; çä  E_(corridorInd;2) ; çä  0çä));yearIndex;vectorSolveParms) * 0.001) //ââ/(1 + 'COV COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);#covIndex;  yearIndex; vectorSolveParms) çä / (1 + 'COV COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);IF (V_LENGTH(corridorInd) >= 3 ; çäE_(corridorInd;2) ; çä0çä);yearIndex;vectorSolveParms) * 0.001) ; çä0çä))
F1 5b19d801 2651908 56c95656 1b3cd053 0 0 2
Solve Monthly End Of Month Cash Value Rec(calcType; vectorSolveParms; projInterestRate; vectorAddlInfo; yearIndex; monthIndex; vectorSearchCriteria)
Funktion
'GEN Round'(IF ( /*First month of projection period*/ (('SharedVector CVPROJAddlInfo StartMonth'(vectorAddlInfo) = 1) && (yearIndex = 'SharedVector CVPROJAddlInfo StartYear'(vectorAddlInfo) - 1) && (monthIndex = 12)) || (('SharedVector CVPROJAddlInfo StartMonth'(vectorAddlInfo) > 1) && ('SharedVectorCVPROJAddlInfo Year Equals StartYear'(vectorAddlInfo;yearIndex)) && (monthIndex = 'SharedVector CVPROJAddlInfo StartMonth'(vectorAddlInfo) - 1)) ; çä   // At the starting point of the projectionçäIF ('SharedVector CVPROJAddlInfo IsInforceCalc'(calcType;vectorAddlInfo) ; çä    'Policy Life CashValueAmt' ; çä    0çä  ) ; çä // Else need to recursively determine the EOM CVçäIF (monthIndex = 12 && 'Solve Monthly End Of Month Cash Value Rec'(calcType;vectorSolveParms;projInterestRate;vectorAddlInfo;yearIndex - 1;12;vectorSearchCriteria) + 'SharedVector SolveParms Premium'(vectorSolveParms;yearIndex) * 'GEN Future Value Factor'(projInterestRate;(1 / 12)) < 'Solve Specified Amount'(calcType;vectorSolveParms) ; çä  'Solve Annual BOM Cash Value'(calcType;'Solve Monthly End Of Month Cash Value Rec'(calcType;vectorSolveParms;projInterestRate;vectorAddlInfo;yearIndex - 1;12;vectorSearchCriteria);vectorSolveParms;yearIndex;vectorSearchCriteria) ; çä  'CVProjection Monthly BOM Cash Value'(calcType;IF (monthIndex > 1 ; çä     // Reduce month index by 1çä'Solve Monthly End Of Month Cash Value Rec'(calcType;vectorSolveParms;projInterestRate;vectorAddlInfo;yearIndex;monthIndex - 1;vectorSearchCriteria) ; çä     // Reduce year index by 1 and set month index to 12çä'Solve Monthly End Of Month Cash Value Rec'(calcType;vectorSolveParms;projInterestRate;vectorAddlInfo;yearIndex - 1;12;vectorSearchCriteria)çä  );vectorSolveParms;projInterestRate;vectorAddlInfo;yearIndex;monthIndex) *  // Apply interest based on projected interest rateçä'GEN Future Value Factor'(projInterestRate;(1 / 12))çä)çä); // Number of places to roundçä'ACCS Decimal'(calcType))
F1 56c95656 5b19d801 0 0 0 0 2
Solve Annual BOM Cash Value(calcType; prevEOYCV; vectorSolveParms; yearIndex; vectorSearchCriteria)
Funktion
(prevEOYCV + 'SharedVector SolveParms Premium'(vectorSolveParms;yearIndex) * 'Solve Net Premium Factor'(vectorSearchCriteria;yearIndex;0) //Could use some enhancement for other than annual premiumsçä -  //'Solve Premium Loads'(yearIndex; 'SharedVector SolveParms Premium'(vectorSolveParms; yearIndex); vectorSearchCriteria)çä'Solve Premium Loads'(vectorSolveParms;vectorSearchCriteria;yearIndex) - 'Solve Init Guess Total Charges'('Solve Specified Amount'(calcType;vectorSolveParms);vectorSearchCriteria;yearIndex) * (1 - ('Solve R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms) ^ 12)) / (1 - 'Solve R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms))) / 'Solve R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms) ^ 12
F1 1b3cd053 2651908 0 10ab2f4a 0 0 2
Solve Test Monthly End of Month Cash Value Rec(calcType; vectorSolveParms; projInterestRate; yearIndex; monthIndex)
Funktion
'Solve Monthly End Of Month Cash Value Rec'('CalcType GLP'(calcType);vectorSolveParms;projInterestRate;'Solve Test CVAddlInfo Vector'('CalcType GLP'(calcType));yearIndex;monthIndex;v_('CalcType GLP'(calcType); //calcType;çä1000000; //targetCashValue;çä65; //targetDuration;çä'SharedVector SolveParms PremiumDuration'(vectorSolveParms);projInterestRate;0.01; //cashValueTolerance;çä0.001; //premiumValueTolerance;çä'Constant Stop Iteration'; //stopIteration;çä'Solve Test CVAddlInfo Vector'(calcType)))
F1 10ab2f4a 2651908 0 6759bfc5 0 0 2
Solve Annualize Product R Factor new(vectorSearchCriteria; yearIndex; vectorSolveParms; corridorInd)
Funktion
IF ( /*start year?*/ yearIndex = 'Solve Start Year'(vectorSearchCriteria) ; çä   /*Yes*/ 1.0 ; çä   /*No - calculate recursively*/ 'Solve Annualize Product R Factor new'(vectorSearchCriteria;yearIndex - 1;vectorSolveParms;corridorInd) * ('Solve Choose R Factor'(vectorSearchCriteria;yearIndex - 1;vectorSolveParms;corridorInd) ^ 12)çä)
F1 6759bfc5 2651908 0 53b81d8c 0 0 2
Solve DB Adj Factor new(vectorSearchCriteria; yearIndex; vectorSolveParms; corridorInd)
Funktion
IF ( /*waiver exists and is active*/ 'Solve Waiver Exists and Is Inforce'(vectorSearchCriteria;yearIndex;vectorSolveParms) ; çä   // A CovOption object is included under the Base Coverage for WMDââçä/*Yes*/('GEN Future Value Factor'('Solve Criteria Interest Rate'(vectorSearchCriteria;yearIndex);(1 / 12)) * (1 + 'COV COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;yearIndex;vectorSolveParms) * 0.001 * e_(corridorInd;0)) * (1 + 'COV CovOption COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;'Std CovOption Index'('CalcType SolveCriteria'(vectorSearchCriteria);0;'OptType WMD');yearIndex))) * 'Solve Choose R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms;corridorInd) ; çä   /*No*/ IF ( /*Is death benefit option 1 or option 3?*/ 'DeathBenefitOptType Is Level'('Solve DthBenOpt'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex;vectorSolveParms)) || 'DeathBenefitOptType Is IncreasingROP'('Solve DthBenOpt'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex;vectorSolveParms)) ; çä     /*Yes*/ 1 ; çä     /*No*/ ('GEN Future Value Factor'('Solve Criteria Interest Rate'(vectorSearchCriteria;yearIndex);(1 / 12)) * (1 + 'COV COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;yearIndex;vectorSolveParms) * 0.001 * e_(corridorInd;0))) * 'Solve Choose R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms;corridorInd)çä  )çä)
F1 53b81d8c 2651908 784be161 333349ae 0 0 2
Solve DB Option 3 Payment Adj Factor new(vectorSearchCriteria; yearIndex; vectorSolveParms; targetLoadInd)
Funktion
IF (yearIndex >= 'Solve Criteria Target Duration'(vectorSearchCriteria) - 1 || 'Solve Discount Neg NAR Check'('Solve Discounted Endowment Value'(vectorSearchCriteria;yearIndex;12;vectorSolveParms;targetLoadInd);vectorSolveParms;yearIndex;vectorSearchCriteria;V_(1;0);targetLoadInd) = 1 ; çä  'Solve DB Option 3 Payment Adj Factor Annual'(vectorSearchCriteria;yearIndex;vectorSolveParms;V_(1;0)) ; çä  IF ('Solve Discount Neg NAR Check'('Solve Discounted Endowment Value'(vectorSearchCriteria;yearIndex;12;vectorSolveParms;targetLoadInd);vectorSolveParms;yearIndex;vectorSearchCriteria;V_(1;0);targetLoadInd) = 2 ; çä    'Solve DB Option 3 Payment Adj Factor Annual'(vectorSearchCriteria;yearIndex;vectorSolveParms;V_(0;0)) ; çä    'Solve DB Option 3 Payment Adj Factor Monthly'('Solve Discounted Endowment Value'(vectorSearchCriteria;yearIndex;12;vectorSolveParms;targetLoadInd);vectorSearchCriteria;yearIndex;12;vectorSolveParms;targetLoadInd)çä  )çä)
F1 784be161 53b81d8c 3c8a32a6 3f184711 0 0 2
Solve DB Option 3 Payment Adj Factor Annual(vectorSearchCriteria, yearIndex; vectorSolveParms; corridorInd)
Funktion
IF ( /*If R-factor is 1*/ 'Solve Choose R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms;corridorInd) = 1 ; çä   /*Multiply by 12*/ 12 ; çä   /*Else compound R factor by 12*/ (1 - ('Solve Choose R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms;corridorInd) ^ 12)) / (1 - 'Solve Choose R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms;corridorInd))çä) * 'Solve DB Option 3 Payment Adj Factor calc'(vectorSearchCriteria;yearIndex;vectorSolveParms;corridorInd)
F1 3c8a32a6 784be161 0 0 0 0 2
Solve DB Option 3 Payment Adj Factor calc(vectorSearchCriteria; yearIndex; vectorSolveParms; corridorInd)
Funktion
yearIndex * 'COV COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;yearIndex;vectorSolveParms) * 0.001 * e_(corridorInd;0) * IF ( /*waiver exists and is active*/ 'Solve Waiver Exists and Is Inforce for Interest Rate'(vectorSearchCriteria;yearIndex;vectorSolveParms) ; çä   // A CovOption object is included under the Base Coverage for WMDââçä/*Yes*/(1 + 'COV CovOption COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;'Std CovOption Index'('CalcType SolveCriteria'(vectorSearchCriteria);0;'OptType WMD');yearIndex)) ; çä   /*No*/ 1çä) / ('NAAR Discount Factor'('CalcType SolveCriteria'(vectorSearchCriteria)) * 'Solve Choose R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms;corridorInd))
F1 3f184711 53b81d8c 0 0 0 0 2
Solve DB Option 3 Payment Adj Factor Monthly(nextEOYCV; vectorSearchCriteria; yearIndex; monthIndex; vectorSolveParms; targetLoadInd)
Funktion
IF (monthIndex = 1 ; çä  'Solve DB Option 3 Payment Adj Factor calc'(vectorSearchCriteria;yearIndex;vectorSolveParms;1) ; çä  'Solve DB Option 3 Payment Adj Factor Monthly'(nextEOYCV;vectorSearchCriteria;yearIndex;monthIndex - 1;vectorSolveParms;targetLoadInd) * IF ('Solve Monthly Corridor Indicator'('CalcType SolveCriteria'(vectorSearchCriteria);'Solve Monthly Discounted Cash Value'(nextEOYCV;vectorSearchCriteria;yearIndex;monthIndex;vectorSolveParms;targetLoadInd);yearIndex;vectorSolveParms) ; çä    'Solve DB Option 3 Payment Adj Factor calc'(vectorSearchCriteria;yearIndex;vectorSolveParms;1) ; çä    'Solve DB Option 3 Payment Adj Factor calc'(vectorSearchCriteria;yearIndex;vectorSolveParms;0)çä  )çä)
F1 333349ae 2651908 430015b4 6acb85de 0 0 2
Solve Choose Exp Rider Adj Factor(vectorSearchCriteria; yearIndex; vectorSolveParms; corridorInd)
Funktion
IF (e_(corridorInd;0) = 1 && e_(corridorInd;1) = 1 ; çä  'Solve Corridor Exp Rider Adj Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms;corridorInd) ; çä  'Solve Exp Rider Adj Factor new'(vectorSearchCriteria;yearIndex;vectorSolveParms;corridorInd)çä)
F1 430015b4 333349ae 0 54d69611 0 0 2
Solve Corridor Exp Rider Adj Factor(vectorSearchCriteria; yearIndex; vectorSolveParms; corridorInd)
Funktion
'GEN Future Value Factor'('Solve Criteria Interest Rate'(vectorSearchCriteria;yearIndex);(1 / 12)) * 'Solve Corridor R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms)
F1 54d69611 333349ae 0 0 0 0 2
Solve Exp Rider Adj Factor new(vectorSearchCriteria; yearIndex; vectorSolveParms; corridorInd)
Funktion
IF ( /*waiver exists and is active*/ 'Std CovOption Index'('CalcType SolveCriteria'(vectorSearchCriteria);0;'OptType WMD') >= 0 && 'COV CovOption Is Included'('CalcType SolveCriteria'(vectorSearchCriteria);0;'Std CovOption Index'('CalcType SolveCriteria'(vectorSearchCriteria);0;'OptType WMD');yearIndex;1;vectorSolveParms) ; çä   // A CovOption object is included under the Base Coverage for WMDââçä/*Yes*/IF ( /*Is death benefit option 1 or option 3?*/ 'DeathBenefitOptType Is Level'('Solve DthBenOpt'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex;vectorSolveParms)) || 'DeathBenefitOptType Is IncreasingROP'('Solve DthBenOpt'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex;vectorSolveParms)) ; çä     /*Yes*/ ('GEN Future Value Factor'('Solve Criteria Interest Rate'(vectorSearchCriteria;yearIndex);(1 / 12)) * (1 + 'COV COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;yearIndex;vectorSolveParms) * 0.001 * e_(corridorInd;0)) * (1 + 'COV CovOption COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;'Std CovOption Index'('CalcType SolveCriteria'(vectorSearchCriteria);0;'OptType WMD');yearIndex))) * 'Solve Choose R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms;corridorInd) ; çä     /*No*/ ('GEN Future Value Factor'('Solve Criteria Interest Rate'(vectorSearchCriteria;yearIndex);(1 / 12)) * (1 + 'COV COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;yearIndex;vectorSolveParms) * 0.001 * e_(corridorInd;0)) * (1 + 'COV CovOption COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;'Std CovOption Index'('CalcType SolveCriteria'(vectorSearchCriteria);0;'OptType WMD');yearIndex)) - 'COV COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;yearIndex;vectorSolveParms) * 0.001 * e_(corridorInd;0) * (1 + 'COV CovOption COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;'Std CovOption Index'('CalcType SolveCriteria'(vectorSearchCriteria);0;'OptType WMD');yearIndex)) * 'GEN Future Value Factor'('Solve Criteria Interest Rate'(vectorSearchCriteria;yearIndex);(1 / 12)) / 'NAAR Discount Factor'('CalcType SolveCriteria'(vectorSearchCriteria))) * 'Solve Choose R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms;corridorInd)çä  ) ; çä /*No*/ 1çä)
F1 6acb85de 2651908 62a00985 0 0 0 2
Solve Choose R Factor(vectorSearchCriteria; yearIndex; vectorSolveParms; corridorInd)
Funktion
IF (e_(corridorInd;0) = 1 && e_(corridorInd;1) = 1 ; çä  'Solve Corridor R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms) ; çä  'Solve R Factor New'(vectorSearchCriteria;yearIndex;vectorSolveParms;corridorInd)çä)
F1 62a00985 6acb85de 0 8963a86 0 0 2
Solve R Factor New(vectorSearchCriteria; yearIndex; vectorSolveParms; corridorInd)
Funktion
1 / IF ( /*waiver exists and is inforce*/ 'Std CovOption Index'('CalcType SolveCriteria'(vectorSearchCriteria);0;'OptType WMD') >= 0 && 'COV CovOption Is Included'('CalcType SolveCriteria'(vectorSearchCriteria);0;'Std CovOption Index'('CalcType SolveCriteria'(vectorSearchCriteria);0;'OptType WMD');yearIndex;1;vectorSolveParms) ; çä   // A CovOption object is included under the Base Coverage for WMDââçä/*Yes*/(1 + ('GEN Future Value Factor'('Solve Criteria Interest Rate'(vectorSearchCriteria;yearIndex);(1 / 12)) - 1) + 'COV COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;yearIndex;vectorSolveParms) * 0.001 * e_(corridorInd;0) * ('GEN Future Value Factor'('Solve Criteria Interest Rate'(vectorSearchCriteria;yearIndex);(1 / 12)) - 1) * (1 + 'COV CovOption COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;'Std CovOption Index'('CalcType SolveCriteria'(vectorSearchCriteria);0;'OptType WMD');yearIndex)) + IF ( /*Is death benefit option 1 or option 3?*/ 'DeathBenefitOptType Is Level'('Solve DthBenOpt'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex;vectorSolveParms)) || 'DeathBenefitOptType Is IncreasingROP'('Solve DthBenOpt'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex;vectorSolveParms)) ; çä     /*Yes*/ ((1 + 'COV CovOption COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;'Std CovOption Index'('CalcType SolveCriteria'(vectorSearchCriteria);0;'OptType WMD');yearIndex)) * 'COV COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;yearIndex;vectorSolveParms) * 0.001 * e_(corridorInd;0)) ; çä     /*No*/ 'COV COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;yearIndex;vectorSolveParms) * 0.001 * e_(corridorInd;0) * (1 + 'COV CovOption COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;'Std CovOption Index'('CalcType SolveCriteria'(vectorSearchCriteria);0;'OptType WMD');yearIndex)) - 'COV COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;yearIndex;vectorSolveParms) * 0.001 * e_(corridorInd;0) * (1 + 'COV CovOption COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;'Std CovOption Index'('CalcType SolveCriteria'(vectorSearchCriteria);0;'OptType WMD');yearIndex)) * 'GEN Future Value Factor'('Solve Criteria Interest Rate'(vectorSearchCriteria;yearIndex);(1 / 12)) / 'NAAR Discount Factor'('CalcType SolveCriteria'(vectorSearchCriteria))çä  )) ; çä /*No*/ 'GEN Future Value Factor'('Solve Criteria Interest Rate'(vectorSearchCriteria;yearIndex);(1 / 12)) * (1 + 'COV COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria); //0; çäIF (V_LENGTH(corridorInd) >= 3 ; çä  E_(corridorInd;2) ; çä  0çä);yearIndex;vectorSolveParms) * 0.001 * e_(corridorInd;0)) - IF ('DeathBenefitOptType Is Increasing'('Solve DthBenOpt'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex;vectorSolveParms)) ; çä(('GEN Future Value Factor'('Solve Criteria Interest Rate'(vectorSearchCriteria;yearIndex);(1 / 12))) * 'COV COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria); //0; çäIF (V_LENGTH(corridorInd) >= 3 ; çä  E_(corridorInd;2) ; çä  0çä);yearIndex;vectorSolveParms) * 0.001 * e_(corridorInd;0)) / 'NAAR Discount Factor'('CalcType SolveCriteria'(vectorSearchCriteria)) ; çä0çä)çä)
F1 8963a86 6acb85de 0 1affb042 0 0 2
Solve Corridor R Factor(vectorSearchCriteria; yearIndex; vectorSolveParms)
Funktion
1 / ('GEN Future Value Factor'('Solve Criteria Interest Rate'(vectorSearchCriteria;yearIndex);(1 / 12)) * (1 + 'COV COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;yearIndex;vectorSolveParms) * 0.001 - (('NAAR Corridor Factor'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex) * 'COV COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;yearIndex;vectorSolveParms) * 0.001) / 'NAAR Discount Factor'('CalcType SolveCriteria'(vectorSearchCriteria)))))
F1 1affb042 6acb85de 0 5ab1f9fd 0 0 2
Solve Waiver Exists and Is Inforce(vectorSearchCriteria; yearIndex; vectorSolveParms)
Funktion
'Std CovOption Index'('CalcType SolveCriteria'(vectorSearchCriteria);0;'OptType WMD') >= 0 && 'COV CovOption Is Included'('CalcType SolveCriteria'(vectorSearchCriteria);0;'Std CovOption Index'('CalcType SolveCriteria'(vectorSearchCriteria);0;'OptType WMD');yearIndex;1;vectorSolveParms)
F1 5ab1f9fd 6acb85de 0 66c31642 0 0 2
Solve Waiver Exists and Is Inforce for Interest Rate(vectorSearchCriteria; yearIndex; vectorSolveParms)
Funktion
'Std CovOption Index'('CalcType SolveCriteria'(vectorSearchCriteria);0;'OptType WMD') >= 0 && 'COV CovOption Is Included'('Solve Criteria Interest Rate'(vectorSearchCriteria;yearIndex);0;'Std CovOption Index'('CalcType SolveCriteria'(vectorSearchCriteria);0;'OptType WMD');yearIndex;1;vectorSolveParms)
F1 66c31642 6acb85de 6375adf3 0 0 0 2
Solve COI Cov for R Factor(vectorSearchCriteria; yearIndex; vectorSolveParms; corridorInd)
Funktion
'Solve Last NAR Cov Check Rec'('CalcType SolveCriteria'(vectorSearchCriteria);'Solve COI Cov for R Factor Rec'('CalcType SolveCriteria'(vectorSearchCriteria);'Solve End Of Year Cash Value Rec'('CalcType SolveCriteria'(vectorSearchCriteria);vectorSolveParms;'Solve Criteria Interest Rate'(vectorSearchCriteria;yearIndex);yearIndex - 1;12;vectorSearchCriteria);0;vectorSolveParms;yearIndex;vectorSearchCriteria;corridorInd))
F1 6375adf3 66c31642 0 77b46792 0 0 2
Solve COI Cov for R Factor Rec(calcType; remEOYCV; coverageIndex; vectorSolveParms; yearIndex; vectorSearchCriteria; corridorInd)
Funktion
IF (coverageIndex >= 'Policy Number Of Coverage'(calcType;yearIndex) - 1 || remEOYCV < 'Solve Cov NAR Death Benefit'(calcType;coverageIndex;vectorSolveParms;yearIndex;vectorSearchCriteria) ; çä  coverageIndex ; çä  'Solve COI Cov for R Factor Rec'(calcType;remEOYCV - 'Solve Cov NAR Death Benefit'(calcType;coverageIndex;vectorSolveParms;yearIndex;vectorSearchCriteria);coverageIndex + 1;vectorSolveParms;yearIndex;vectorSearchCriteria;corridorInd)çä)
F1 77b46792 66c31642 0 3192babe 0 0 2
Solve Last NAR Cov Check Rec(calcType; coverageIndex)
Funktion
IF (coverageIndex = 0 || 'Coverage Is NAR Cost'(calcType;coverageIndex) ; çä  coverageIndex ; çä  'Solve Last NAR Cov Check Rec'(calcType;coverageIndex - 1)çä)
F1 3192babe 66c31642 0 73fafef 0 0 2
Solve Cov NAR Death Benefit(calcType; coverageIndex; vectorSolveParms; yearIndex; vectorSearchCriteria)
Funktion
(IF ('Coverage Is NAR Cost'(calcType;coverageIndex) ; çä   /*Yes*/ 'SharedVector SolveParms FaceAmount'(coverageIndex;vectorSolveParms;yearIndex) ; çä   /*No*/ 0çä) + IF (coverageIndex = 'Std BaseCov Index'(calcType) && 'DeathBenefitOptType Is IncreasingROP'('Solve DthBenOpt'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex;vectorSolveParms)) ; çä'Solve Cumulative Premium'(yearIndex;vectorSolveParms;vectorSearchCriteria) ; çä0çä)) / 'NAAR Discount Factor'('CalcType SolveCriteria'(vectorSearchCriteria))
F1 73fafef 66c31642 5035a592 0 0 0 2
Solve COI Cov for R Factor Change(vectorSearchCriteria; prevEOYCV; yearIndex; vectorSolveParms; corridorInd)
Funktion
yearIndex > 1 && 'Solve COI Cov for R Factor BOY'(vectorSearchCriteria;prevEOYCV;yearIndex;vectorSolveParms;corridorInd) <> 'Solve COI Cov for R Factor EOY'(vectorSearchCriteria;prevEOYCV;yearIndex;vectorSolveParms;corridorInd) && 'Policy Coverage IndicatorCode'('CalcType SolveCriteria'(vectorSearchCriteria);'Solve COI Cov for R Factor BOY'(vectorSearchCriteria;prevEOYCV;yearIndex;vectorSolveParms;corridorInd)) <> 'Policy Coverage IndicatorCode'('CalcType SolveCriteria'(vectorSearchCriteria);'Solve COI Cov for R Factor EOY'(vectorSearchCriteria;prevEOYCV;yearIndex;vectorSolveParms;corridorInd)) && NOT(('IndicatorCode is Base'('Policy Coverage IndicatorCode'('CalcType SolveCriteria'(vectorSearchCriteria);'Solve COI Cov for R Factor BOY'(vectorSearchCriteria;prevEOYCV;yearIndex;vectorSolveParms;corridorInd))) || 'IndicatorCode is BaseIncrease'('Policy Coverage IndicatorCode'('CalcType SolveCriteria'(vectorSearchCriteria);'Solve COI Cov for R Factor BOY'(vectorSearchCriteria;prevEOYCV;yearIndex;vectorSolveParms;corridorInd)))) && ('IndicatorCode is Base'('Policy Coverage IndicatorCode'('CalcType SolveCriteria'(vectorSearchCriteria);'Solve COI Cov for R Factor EOY'(vectorSearchCriteria;prevEOYCV;yearIndex;vectorSolveParms;corridorInd))) || 'IndicatorCode is BaseIncrease'('Policy Coverage IndicatorCode'('CalcType SolveCriteria'(vectorSearchCriteria);'Solve COI Cov for R Factor EOY'(vectorSearchCriteria;prevEOYCV;yearIndex;vectorSolveParms;corridorInd)))))
F1 5035a592 73fafef 0 31f01d83 0 0 2
Solve COI Cov for R Factor BOY(vectorSearchCriteria; prevEOYCV;  yearIndex; vectorSolveParms; corridorInd)
Funktion
'Solve Last NAR Cov Check Rec'('CalcType SolveCriteria'(vectorSearchCriteria);'Solve COI Cov for R Factor Rec'('CalcType SolveCriteria'(vectorSearchCriteria);prevEOYCV / 'NAAR Discount Factor'('CalcType SolveCriteria'(vectorSearchCriteria)) - SUMX(covIndex;0;'Policy Number Of Coverage'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex) - 1;IF ('Coverage Is NAR Cost'('CalcType SolveCriteria'(vectorSearchCriteria);#covIndex) ; çä  ((('SharedVector SolveParms FaceAmount'(#covIndex;vectorSolveParms;yearIndex) + IF ('DeathBenefitOptType Is IncreasingROP'('Solve DthBenOpt'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex;vectorSolveParms)) ; çä    'Solve Cumulative Premium'(yearIndex;vectorSolveParms;vectorSearchCriteria) ; çä    0çä  ))) * 'COV COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);#covIndex;yearIndex;vectorSolveParms) * 0.001) ; çä0çä));0;vectorSolveParms;yearIndex;vectorSearchCriteria;corridorInd))
F1 31f01d83 73fafef 0 0 0 0 2
Solve COI Cov for R Factor EOY(vectorSearchCriteria; prevEOYCV; yearIndex; vectorSolveParms; corridorInd)
Funktion
'Solve Last NAR Cov Check Rec'('CalcType SolveCriteria'(vectorSearchCriteria);'Solve COI Cov for R Factor Rec'('CalcType SolveCriteria'(vectorSearchCriteria);'Solve Annual Cash Value'(prevEOYCV;vectorSolveParms;yearIndex;vectorSearchCriteria;corridorInd);0;vectorSolveParms;yearIndex;vectorSearchCriteria;corridorInd))
F1 2652ef8 24e83b0 69ade4d0 3bf31162 0 0 2
-- Initial Specified Amount Guess Functions --
Funktion

F1 69ade4d0 2652ef8 3d48f873 0 0 0 2
Solve Initial Specified Amount Guess(vectorSolveParms; vectorSearchCriteria)
Funktion
('SharedVector SolveParms Premium'(vectorSolveParms;1) * 'Solve Init Guess Annualize PV Payment Factor'(vectorSearchCriteria;vectorSolveParms) - 'Solve Init Guess Annualize PV Charges Less PerUnit'(vectorSolveParms;vectorSearchCriteria) - IF ( /*Solve for endowment*/ 'Solve Criteria Target CV'(vectorSearchCriteria) = 999999999 ; çä   /*No*/ 0 ; çä   /*Yes*/ 'Solve Init Guess Target CV Amount'(vectorSearchCriteria;vectorSolveParms)çä)) / 'Solve Init Guess SpecAmt Discount'(vectorSolveParms;vectorSearchCriteria)
F1 3d48f873 69ade4d0 3666db69 5174835 0 0 2
Solve Init Guess Annualize PV Charges Less PerUnit(vectorSolveParms; vectorSearchCriteria)
Funktion
SUMX(yearIndex;'Solve Start Year'(vectorSearchCriteria);'Solve Criteria Target Duration'(vectorSearchCriteria);'Solve Init Guess Annualize PV Yearly Charge less PerUnit'(vectorSolveParms;vectorSearchCriteria;#yearIndex)) + 1 / 'Solve Init Guess Target CV Amount'(vectorSearchCriteria;vectorSolveParms)
F1 3666db69 3d48f873 d1225c5 0 0 0 2
Solve Init Guess Annualize PV Yearly Charge less PerUnit(vectorSolveParms; vectorSearchCriteria; yearIndex)
Funktion
 // Present value of charges at the beginning of the yearçä(('Solve Init Guess Total Charges Less PerUnit'(vectorSolveParms;vectorSearchCriteria;yearIndex) * IF ( /*If R-factor is 1*/ 'Solve R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms) = 1 ; çä   /*Multiply by 12*/ 12 ; çä   /*Else compound R factor by 12*/ 'Solve Compound R Factor by 12'(vectorSearchCriteria;yearIndex;vectorSolveParms)çä) +  // add flat amount premium load chargeçä'Solve Flat Amount Premium Load Charge'(vectorSearchCriteria;yearIndex)) +  // add premium load up to load target if applicableçä'Solve Premium Load Up To Load Target'(vectorSearchCriteria;yearIndex)) * 'Solve Annualize Product R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms) // Discount from beginning of year back to issue date   çä
F1 d1225c5 3666db69 0 14b1342b 0 0 2
Solve Compound R Factor by 12(vectorSearchCriteria; yearIndex; vectorSolveParms)
Funktion
(1 - ('Solve R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms) ^ 12)) / (1 - 'Solve R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms))
F1 14b1342b 3666db69 0 30d565f8 0 0 2
Solve Flat Amount Premium Load Charge(vectorSearchCriteria; yearIndex)
Funktion
IF ( /*If premium load is flat amount*/ 'PI PolicyProduct Fee ChargeBasedOn'('Policy ProductCode';'FeeType PremiumLoad';TransEffDate) EQUAL "1000500030" && 'CHG Calc Type Uses Fees'('CalcType SolveCriteria'(vectorSearchCriteria)) && yearIndex <= MIN('Solve Criteria Premium Duration'(vectorSearchCriteria) + ('Solve Start Year'(vectorSearchCriteria) - 1);'Solve Criteria Target Duration'(vectorSearchCriteria)) ; çä   // flat amount premium chargeçä'PLC Projected Total Premium Load Charge'('CalcType SolveCriteria'(vectorSearchCriteria);'FeeType PremiumLoad';yearIndex;100; // periodic premium not required for flat amount âçä'GEN Vector Blank'; // target premium vector not requiredçä0 // assumes premiums paid annually in advanceçä) ; çä   /*Else don't add in premium load nowâ*/ 0çä)
F1 30d565f8 3666db69 0 22a047b1 0 0 2
Solve Premium Load Up To Load Target(vectorSearchCriteria; yearIndex)
Funktion
IF ( /*Load target calculation or Beyond Premium Duration?*/ 'CalcType SolveCriteria Alike LTGT'(vectorSearchCriteria) || yearIndex > MIN('Solve Criteria Premium Duration'(vectorSearchCriteria) + ('Solve Start Year'(vectorSearchCriteria) - 1);'Solve Criteria Target Duration'(vectorSearchCriteria)) ; çä   /*Yes*/ 0 ; çä   /*No*/ IF ( /*Premium load based on Load Target and Loads used in calctype?*/ ('PI PolicyProduct Fee ChargeBasedOn'('Policy ProductCode';'FeeType PremiumLoad';TransEffDate) = "1000500005" || 'PI PolicyProduct Fee ChargeBasedOn'('Policy ProductCode';'FeeType PremiumLoad';TransEffDate) = "1000500007") && 'CHG Calc Type Uses Fees'('CalcType SolveCriteria'(vectorSearchCriteria)) ; çä     /*Yes*/ 'SLV LoadTargetPremium'(vectorSearchCriteria) * ('PLC Premium Load Primary Rate'('CalcType SolveCriteria'(vectorSearchCriteria);'FeeType PremiumLoad';0;yearIndex) * 0.01 - 'PLC Premium Load Secondary Rate'('CalcType SolveCriteria'(vectorSearchCriteria);'FeeType PremiumLoad';0;yearIndex) * 0.01) ; çä     /*No*/ 0çä  )çä)
F1 22a047b1 3666db69 30fbabbd 0 0 0 2
Solve Init Guess Total Charges Less PerUnit(vectorSolveParms; vectorSearchCriteria; yearIndex)
Funktion
 // Expense chargesçä(IF ( /*Does calc type use fees?*/ 'CHG Calc Type Uses Fees'('CalcType SolveCriteria'(vectorSearchCriteria)) ; çä   /*Yes - add expenses*/ 'Solve Init Guess Monthly Expenses Less PerUnit'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex;vectorSolveParms) * 'Solve Non COI Timing Adjustment'(vectorSearchCriteria;yearIndex;vectorSolveParms) ; çä   /*No - exclude expenses*/ 0çä) // Benefit charges associated with the base coverageçä + 'COV Projected Monthly Total CovOption Charge'('CalcType SolveCriteria'(vectorSearchCriteria);'Std BaseCov Index'('CalcType SolveCriteria'(vectorSearchCriteria));yearIndex;1;vectorSolveParms) // Rider charges not associated with NARçä + 'Solve Init Guess Monthly NonNAR Coverage Charge'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex;vectorSolveParms) * 'Solve Non COI Timing Adjustment'(vectorSearchCriteria;yearIndex;vectorSolveParms)) * 'Solve Exp Rider Adj Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms)
F1 30fbabbd 22a047b1 790d5361 0 0 0 2
Solve Init Guess Monthly Expenses Less PerUnit(calcType; yearIndex; vectorSolveParms)
Funktion
IF ( /*Does calctype use fees?*/ 'CHG Calc Type Uses Fees'(calcType) ; çä   /*Yes - include admin fees*/ IF ('CalcType Shadow Is Active'(calcType) ; çä    'Solve Init Guess Shadow Monthly Expenses Less PerUnitCalc'(calcType;'FeeType AdminFee';0;yearIndex;1;vectorSolveParms) + 'Solve Init Guess Shadow Monthly Expenses Less PerUnitCalc'(calcType;'FeeType Expense';0;yearIndex;1;vectorSolveParms) ; çä    'Solve Init Guess Monthly Expenses Less PerUnitCalc'('FeeType AdminFee';calcType;0;yearIndex;1;vectorSolveParms) + 'Solve Init Guess Monthly Expenses Less PerUnitCalc'('FeeType Expense';calcType;0;yearIndex;1;vectorSolveParms)çä  ) ; çä // Expense not included in 7 pay calculationsçä0çä)
F1 790d5361 30fbabbd 0 32f032c8 0 0 2
Solve Init Guess Monthly Expenses Less PerUnitCalc(calcType; fee_type; cashValue; yearIndex; monthIndex; vectorSolveParms)
Funktion
CASE( /*Admin fee rule*/ 'PI PolicyProduct Fee ChargeBasedOn'('Policy ProductCode';fee_type;'Policy EffDate');çä   /*Charge per unit*/ "9";"1000500025";"1000500026" : 0;çä   : 'AC Projected Monthly AdminFee Charge'(calcType;1;'PI PolicyProduct Fee ChargeBasedOn'('Policy ProductCode';fee_type;'Policy EffDate');fee_type;cashValue;yearIndex;monthIndex;vectorSolveParms))çä + CASE( /*Admin fee rule*/ 'PI PolicyProduct Fee SecondaryChargeBasedOn'('Policy ProductCode';fee_type;'Policy EffDate');çä   /*Charge per unit*/ "9";"1000500025";"1000500026" : 0;çä   : 'AC Projected Monthly AdminFee Charge'(calcType;2;'PI PolicyProduct Fee SecondaryChargeBasedOn'('Policy ProductCode';fee_type;'Policy EffDate');fee_type;cashValue;yearIndex;monthIndex;vectorSolveParms))çä + CASE( /*Admin fee rule*/ 'PI PolicyProduct Fee TertiaryChargeBasedOn'('Policy ProductCode';fee_type;'Policy EffDate');çä   /*Charge per unit*/ "9";"1000500025";"1000500026" : 0;çä   : 'AC Projected Monthly AdminFee Charge'(calcType;3;'PI PolicyProduct Fee TertiaryChargeBasedOn'('Policy ProductCode';fee_type;'Policy EffDate');fee_type;cashValue;yearIndex;monthIndex;vectorSolveParms))çä
F1 32f032c8 30fbabbd 0 0 0 0 2
Solve Init Guess Shadow Monthly Expenses Less PerUnitCalc(calcType; fee_type; cashValue; yearIndex; monthIndex; vectorSolveParms)
Funktion
CASE( /*Admin fee rule*/ 'PI CovOptionProduct Fee ChargeBasedOn'(calcType;'Policy ProductCode';'STD Shadow coverageIndex'(calcType);'STD Shadow coverageOptionIndex'(calcType);fee_type;'Policy EffDate');çä   /*Charge per unit*/ "9";"1000500025";"1000500026" : 0;çä   : 'AC Projected Monthly AdminFee Charge'(calcType;1;'PI CovOptionProduct Fee ChargeBasedOn'(calcType;'Policy ProductCode';'STD Shadow coverageIndex'(calcType);'STD Shadow coverageOptionIndex'(calcType);fee_type;'Policy EffDate');fee_type;cashValue;yearIndex;monthIndex;vectorSolveParms))çä + CASE( /*Admin fee rule*/ 'PI CovOptionProduct Fee SecondaryChargeBasedOn'(calcType;'Policy ProductCode';'STD Shadow coverageIndex'(calcType);'STD Shadow coverageOptionIndex'(calcType);fee_type;'Policy EffDate');çä   /*Charge per unit*/ "9";"1000500025";"1000500026" : 0;çä   : 'AC Projected Monthly AdminFee Charge'(calcType;2;'PI CovOptionProduct Fee SecondaryChargeBasedOn'(calcType;'Policy ProductCode';'STD Shadow coverageIndex'(calcType);'STD Shadow coverageOptionIndex'(calcType);fee_type;'Policy EffDate');fee_type;cashValue;yearIndex;monthIndex;vectorSolveParms))çä + CASE( /*Admin fee rule*/ 'PI CovOptionProduct Fee TertiaryChargeBasedOn'(calcType;'Policy ProductCode';'STD Shadow coverageIndex'(calcType);'STD Shadow coverageOptionIndex'(calcType);fee_type;'Policy EffDate');çä   /*Charge per unit*/ "9";"1000500025";"1000500026" : 0;çä   : 'AC Projected Monthly AdminFee Charge'(calcType;3;'PI CovOptionProduct Fee TertiaryChargeBasedOn'(calcType;'Policy ProductCode';'STD Shadow coverageIndex'(calcType);'STD Shadow coverageOptionIndex'(calcType);fee_type;'Policy EffDate');fee_type;cashValue;yearIndex;monthIndex;vectorSolveParms))çä
F1 5174835 69ade4d0 a58940 ad5a770 0 0 2
Solve Init Guess SpecAmt Discount(vectorSolveParms; vectorSearchCriteria)
Funktion
SUMX(yearIndex;'Solve Start Year'(vectorSearchCriteria);'Solve Criteria Target Duration'(vectorSearchCriteria);'Solve Init Guess PV SpecAmt Charges'(vectorSolveParms;vectorSearchCriteria;#yearIndex)) + 'Solve Annualize Product R Factor'(vectorSearchCriteria;'Solve Criteria Target Duration'(vectorSearchCriteria);vectorSolveParms) * ('Solve R Factor'(vectorSearchCriteria;'Solve Criteria Target Duration'(vectorSearchCriteria);vectorSolveParms) ^ 12)
F1 a58940 5174835 7557f2c1 0 0 0 2
Solve Init Guess PV SpecAmt Charges(vectorSolveParms; vectorSearchCriteria; yearIndex)
Funktion
'Solve Init Guess Total SpecAmt Charges'(vectorSolveParms;vectorSearchCriteria;yearIndex) * IF ( /*If R-factor is 1*/ 'Solve R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms) = 1 ; çä   /*Multiply by 12*/ 12 ; çä   /*Else compound R factor by 12*/ (1 - ('Solve R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms) ^ 12)) / (1 - 'Solve R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms))çä) * 'Solve Annualize Product R Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms)
F1 7557f2c1 a58940 4415c497 0 0 0 2
Solve Init Guess Total SpecAmt Charges(vectorSolveParms; vectorSearchCriteria; yearIndex)
Funktion
'Solve Init Guess COI Charges Per Dollar'(vectorSolveParms;vectorSearchCriteria;yearIndex) * 'Solve DB Adj Factor'(vectorSearchCriteria;yearIndex;vectorSolveParms) + 'Solve Init Guess Monthly Expenses PerUnitOnly'('CalcType SolveCriteria'(vectorSearchCriteria);yearIndex;vectorSolveParms;vectorSearchCriteria)
F1 4415c497 7557f2c1 8129194 4e13f05c 0 0 2
Solve Init Guess Monthly Expenses PerUnitOnly(calcType; yearIndex; vectorSolveParms; vectorSearchCriteria)
Funktion
IF ( /*Does calctype use fees?*/ 'CHG Calc Type Uses Fees'(calcType) ; çä   /*Yes - include admin fees*/ 'Solve Init Guess Monthly Expenses PerUnitOnly Calc'('FeeType AdminFee';calcType;0;yearIndex;1;vectorSolveParms;vectorSearchCriteria) + 'Solve Init Guess Monthly Expenses PerUnitOnly Calc'('FeeType Expense';calcType;0;yearIndex;1;vectorSolveParms;vectorSearchCriteria) ; çä   // Expense not included in 7 pay calculationsçä0çä)
F1 8129194 4415c497 0 0 0 0 2
Solve Init Guess Monthly Expenses PerUnitOnly Calc(fee_type; calcType; cashValue; yearIndex; monthIndex; vectorSolveParms; vectorSearchCriteria)
Funktion
CASE( /*Admin fee rule*/ 'PI PolicyProduct Fee ChargeBasedOn'('Policy ProductCode';fee_type;'Policy EffDate');çä   /*Charge per unit*/ "9";"1000500025";"1000500026" : 'AC Projected Monthly AdminFee Charge'(calcType;1;'PI PolicyProduct Fee ChargeBasedOn'('Policy ProductCode';fee_type;'Policy EffDate');fee_type;cashValue;yearIndex;monthIndex;'SharedVector SolveParms ReplaceFaceAmount'(calcType;1;vectorSolveParms));çä   : 0)çä + CASE( /*Admin fee rule*/ 'PI PolicyProduct Fee SecondaryChargeBasedOn'('Policy ProductCode';fee_type;'Policy EffDate');çä   /*Charge per unit*/ "9";"1000500025";"1000500026" : 'AC Projected Monthly AdminFee Charge'(calcType;2;'PI PolicyProduct Fee SecondaryChargeBasedOn'('Policy ProductCode';fee_type;'Policy EffDate');fee_type;cashValue;yearIndex;monthIndex;'SharedVector SolveParms ReplaceFaceAmount'(calcType;1;vectorSolveParms));çä   : 0)çä + CASE( /*Admin fee rule*/ 'PI PolicyProduct Fee TertiaryChargeBasedOn'('Policy ProductCode';fee_type;'Policy EffDate');çä   /*Charge per unit*/ "9";"1000500025";"1000500026" : 'AC Projected Monthly AdminFee Charge'(calcType;3;'PI PolicyProduct Fee TertiaryChargeBasedOn'('Policy ProductCode';fee_type;'Policy EffDate');fee_type;cashValue;yearIndex;monthIndex;'SharedVector SolveParms ReplaceFaceAmount'(calcType;1;vectorSolveParms));çä   : 0)çä
F1 4e13f05c 7557f2c1 0 0 0 0 2
Solve Init Guess COI Charges Per Dollar(vectorSolveParms; vectorSearchCriteria; yearIndex)
Funktion
(((1 / 'NAAR Discount Factor'('CalcType SolveCriteria'(vectorSearchCriteria))) * 'COV COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;yearIndex;vectorSolveParms) * 0.001) / (1 + ('COV COI Rate'('CalcType SolveCriteria'(vectorSearchCriteria);0;yearIndex;vectorSolveParms) * 0.001)))
F1 ad5a770 69ade4d0 0 4820810a 0 0 2
Solve Init Guess Target CV Amount(vectorSearchCriteria; vectorSolveParms)
Funktion
IF ( /*Solve for endowment*/ 'Solve Criteria Target CV'(vectorSearchCriteria) = 999999999 ; çä   /*No*/ 'Solve Annualize Product R Factor'(vectorSearchCriteria;'Solve Criteria Target Duration'(vectorSearchCriteria);vectorSolveParms) * ('Solve R Factor'(vectorSearchCriteria;'Solve Criteria Target Duration'(vectorSearchCriteria);vectorSolveParms) ^ 12) ; çä   /*Yes*/ 'Solve Criteria Target CV'(vectorSearchCriteria) * 'Solve Annualize Product R Factor'(vectorSearchCriteria;'Solve Criteria Target Duration'(vectorSearchCriteria);vectorSolveParms) * ('Solve R Factor'(vectorSearchCriteria;'Solve Criteria Target Duration'(vectorSearchCriteria);vectorSolveParms) ^ 12)çä)
F1 4820810a 69ade4d0 3bc6c5cb 0 0 0 2
-- Target Premium Functions --
Funktion

F1 3bc6c5cb 4820810a 0 45b64cdf 0 0 2
Solve Target SumOfCharges Init Guess(vectorSearchCriteria; vectorSolveParms)
Funktion
 // Formula is : çä// FA = (Sum of premiums (grossed up for load) - Sum of fixed expenses & charges) / (sum of per unit expense rates)çä(SUMX(yearIndex;1;'Solve Criteria Premium Duration'(vectorSearchCriteria);'SharedVector SolveParms Premium'(vectorSolveParms;#yearIndex) / 'Solve Net Premium Factor'(vectorSearchCriteria;1;1)) // less fixed expenses and rider charges, and surrender chargeçä - SUMX(yearIndex;1;'Solve Criteria Premium Duration'(vectorSearchCriteria);'Solve Init Guess Total Charges Less PerUnit'(vectorSolveParms;vectorSearchCriteria;#yearIndex)) - 'ULSC Projected Full Surrender Charge'('CalcType SolveCriteria'(vectorSearchCriteria);'Solve Criteria Premium Duration'(vectorSearchCriteria);'GEN Vector Blank')) / SUMX(yearIndex;1;'Solve Criteria Premium Duration'(vectorSearchCriteria);'Solve Init Guess Total SpecAmt Charges'(vectorSolveParms;vectorSearchCriteria;#yearIndex) * 12)
F1 45b64cdf 4820810a 0 7ec41d87 0 0 2
-- Solve Target RateFile Init Guess(vectorSearchCriteria; vectorSolveParms)
Funktion
// Formula is : çä// FA = (Target premiums - Sum of targets for non-base coverage) / Ratefile rate for base targetçä çä('SharedVector SolveParms Premium'(vectorSolveParms; 1)çä çä// less target premiums for non-base coverageçä-çäSUMX(coverageIndex; 1;'Policy Number of Coverage'('CalcType SolveCriteria'(vectorSearchCriteria); 1) - 1;çäâ'RateFile RateLookup Coverage Target'('CalcType SolveCriteria'(vectorSearchCriteria);#coverageIndex; 1; vectorSolveParms)çä)çä)çä/çä('RateFile RateLookup Coverage Target'('CalcType SolveCriteria'(vectorSearchCriteria); 'Std BaseCov Index'('CalcType SolveCriteria'(vectorSearchCriteria));  1; vectorSolveParms)çäâ/'PI CoverageProduct ValuePerUnit'('CalcType SolveCriteria'(vectorSearchCriteria); 'Policy ProductCode'; 0; 'Policy EffDate'))
F1 7ec41d87 4820810a 0 35703c73 0 0 2
Solve Target RateFile Init Guess(vectorSearchCriteria; vectorSolveParms; yearIndex)
Funktion
 // Formula is : çä// FA = (Target premiums - Sum of targets for non-base coverage) / Ratefile rate for base targetçä('SharedVector SolveParms Premium'(vectorSolveParms;1) // less target premiums for non-base coverageçä - SUMX(coverageIndex;1;'Policy Number of Coverage'('CalcType SolveCriteria'(vectorSearchCriteria);1) - 1;'RateFile RateLookup Coverage Target'('CalcType SolveCriteria'(vectorSearchCriteria);#coverageIndex;yearIndex;1;vectorSolveParms))) / ('RateFile RateLookup Coverage Target'('CalcType SolveCriteria'(vectorSearchCriteria);'Std BaseCov Index'('CalcType SolveCriteria'(vectorSearchCriteria));yearIndex;1;vectorSolveParms) / 'PI CoverageProduct ValuePerUnit'('CalcType SolveCriteria'(vectorSearchCriteria);'Policy ProductCode';0;'Policy EffDate'))
F1 35703c73 4820810a 0 1f8b79c4 0 0 2
Solve Target CalcMethod Used(vectorSearchCriteria)
Funktion
IF ( /*Is calculation method defined in product definition?*/ 'ACCS CalcRule Target Calc Method'('CalcType SolveCriteria'(vectorSearchCriteria);'Policy CarrierCode';'Policy ProductCode';'Policy EffDate') ALIKE 'GEN Vector Blank' ; çä   // No target calculation method found - return error messageçä'Messages SystemMessage'("CA1008";'Message Language';v_('Solve Model Name';"'Solve Target CalcMethod Used'";'Policy ProductCode' & "; " & 'CalcType SolveCriteria'(vectorSearchCriteria))) ; çä   // Elseâreturn calculation methodçä'ACCS CalcRule Target Calc Method'('CalcType SolveCriteria'(vectorSearchCriteria);'Policy CarrierCode';'Policy ProductCode';'Policy EffDate')çä)
F1 1f8b79c4 4820810a 4a33a897 521b0fa9 0 0 2
Solve Rider Target Premium(calcType; yearIndex; vectorSolveParms; vectorSearchCriteria)
Funktion
CASE( /*Target calculation method*/ 'Solve Target CalcMethod Used'(vectorSearchCriteria);çä   // Sum of Chargesçä1 : 'Solve SumOfCharges Rider TargetPremium'(calcType;yearIndex;vectorSolveParms;vectorSearchCriteria);çä   // Rate Fileçä2 : 'Solve RateFile rider TargetPremiumSum'(vectorSolveParms;vectorSearchCriteria);çä   // Iterativeçä3 : 'Messages SystemMessage'("ILL1007";'Message Language';v_('Solve Model Name';"'Solve Target Premium Per Unit'";'CalcType SolveCriteria'(vectorSearchCriteria)));çä   // Present Value çä4 : 'Solve PresentValue Rider TargetPremiumSum'(vectorSolveParms;vectorSearchCriteria);çä   // Else return error messageçä : 'Messages SystemMessage'("CA1009";'Message Language';v_('Solve Model Name';"'Solve Target Premium Per Unit'";'CalcType SolveCriteria'(vectorSearchCriteria))))çä
F1 4a33a897 1f8b79c4 0 4b2664ca 0 0 2
Solve SumOfCharges Rider TargetPremium(calcType; yearIndex; vectorSolveParms; vectorSearchCriteria)
Funktion
'Solve Init Guess Total Charges Less PerUnit'(vectorSolveParms;vectorSearchCriteria;yearIndex) * ('PLC Premium Load Primary Rate'('CalcType SolveCriteria'(vectorSearchCriteria);'FeeType PremiumLoad';0;yearIndex) * 0.01 - 'PLC Premium Load Secondary Rate'('CalcType SolveCriteria'(vectorSearchCriteria);'FeeType PremiumLoad';0;yearIndex) * 0.01)
F1 4b2664ca 1f8b79c4 0 35922381 0 0 2
Solve PresentValue Rider TargetPremiumSum(vectorSolveParms; vectorSearchCriteria)
Funktion
SUMX(yearIndex;'Solve Start Year'(vectorSearchCriteria);'Solve Criteria Target Duration'(vectorSearchCriteria);SUMX(coverageIndex;0;'Policy Number of Coverage'('CalcType SolveCriteria'(vectorSearchCriteria);#yearIndex) - 1;IF ( /*Base or Base Increase*/ ('IndicatorCode is Base'('Policy Coverage IndicatorCode'('CalcType SolveCriteria'(vectorSearchCriteria);#coverageIndex)) || 'IndicatorCode is BaseIncrease'('Policy Coverage IndicatorCode'('CalcType SolveCriteria'(vectorSearchCriteria);#coverageIndex))) ; çä   /*Yes*/ 0 ; çä   /*No*/ 'Solve PresentValue TargetPremium'(#coverageIndex;#yearIndex;vectorSolveParms;vectorSearchCriteria)çä)))
F1 35922381 1f8b79c4 0 0 0 0 2
Solve RateFile Rider TargetPremiumSum(vectorSolveParms; vectorSearchCriteria)
Funktion
SUMX(yearIndex;'Solve Start Year'(vectorSearchCriteria);'Solve Criteria Target Duration'(vectorSearchCriteria);SUMX(coverageIndex;0;'Policy Number of Coverage'('CalcType SolveCriteria'(vectorSearchCriteria);#yearIndex) - 1;IF ( /*Base or Base Increase*/ ('IndicatorCode is Base'('Policy Coverage IndicatorCode'('CalcType SolveCriteria'(vectorSearchCriteria);#coverageIndex)) || 'IndicatorCode is BaseIncrease'('Policy Coverage IndicatorCode'('CalcType SolveCriteria'(vectorSearchCriteria);#coverageIndex))) ; çä   /*Yes*/ 0 ; çä   /*No*/ 'Solve RateFile TargetPremium'(#coverageIndex;#yearIndex;vectorSolveParms;vectorSearchCriteria)çä)))
F1 521b0fa9 4820810a 2e03613d 0 0 0 2
Solve Base TargetPremium(vectorSolveParms; vectorSearchCriteria)
Funktion
CASE( /*Target calculation method*/ 'Solve Target CalcMethod Used'(vectorSearchCriteria);çä   // Sum of Chargesçä1 : 'Solve SumOfCharges Base TargetPremium'(vectorSolveParms;vectorSearchCriteria);çä   // Rate Fileçä2 : 'Solve RateFile Base TargetPremiumSum'(vectorSolveParms;vectorSearchCriteria);çä   // Iterativeçä3 : 'Messages SystemMessage'("ILL1007";'Message Language';v_('Solve Model Name';"'Solve Target Premium Per Unit'";'CalcType SolveCriteria'(vectorSearchCriteria)));çä   // Present Value çä4 : 'Solve PresentValue Base TargetPremiumSum'(vectorSolveParms;vectorSearchCriteria);çä   // Else return error messageçä : 'Messages SystemMessage'("CA1009";'Message Language';v_('Solve Model Name';"'Solve Target Premium Per Unit'";'CalcType SolveCriteria'(vectorSearchCriteria))))çä
F1 2e03613d 521b0fa9 ffe715 217a409e 0 0 2
Solve PresentValue Base TargetPremiumSum(vectorSolveParms; vectorSearchCriteria)
Funktion
SUMX(yearIndex;'Solve Start Year'(vectorSearchCriteria);'Solve Criteria Target Duration'(vectorSearchCriteria);SUMX(coverageIndex;0;'Policy Number of Coverage'('CalcType SolveCriteria'(vectorSearchCriteria);#yearIndex) - 1;IF ( /*Base or Base Increase*/ ('IndicatorCode is Base'('Policy Coverage IndicatorCode'('CalcType SolveCriteria'(vectorSearchCriteria);#coverageIndex)) || 'IndicatorCode is BaseIncrease'('Policy Coverage IndicatorCode'('CalcType SolveCriteria'(vectorSearchCriteria);#coverageIndex))) ; çä   /*Yes*/ 'Solve PresentValue TargetPremium'(#coverageIndex;#yearIndex;vectorSolveParms;vectorSearchCriteria) ; çä   /*No*/ 0çä)))
F1 ffe715 2e03613d 0 2283bd86 0 0 2
-- Solve PresentValue TargetPremium(coverageIndex; yearIndex; vectorSolveParms; vectorSearchCriteria)
Funktion
'Target Coverage PV Method'('CalcType SolveCriteria'(vectorSearchCriteria); coverageIndex;çäâ'SharedVector SolveParms ReplaceFaceAmount'('CalcType SolveCriteria'(vectorSearchCriteria); 1; vectorSolveParms))çä çä* ('PLC Premium Load Primary Rate'('CalcType SolveCriteria'(vectorSearchCriteria); 'FeeType PremiumLoad'; coverageIndex; yearIndex) * 0.01çäââââ-çäââââ'PLC Premium Load Secondary Rate'('CalcType SolveCriteria'(vectorSearchCriteria); 'FeeType PremiumLoad'; coverageIndex; yearIndex) * 0.01çäââââ)
F1 2283bd86 2e03613d 0 0 0 0 2
Solve PresentValue TargetPremium(coverageIndex; yearIndex; vectorSolveParms; vectorSearchCriteria)
Funktion
'Target Coverage PV Method'('CalcType SolveCriteria'(vectorSearchCriteria);coverageIndex;'SharedVector SolveParms ReplaceFaceAmount'('CalcType SolveCriteria'(vectorSearchCriteria);1;vectorSolveParms);yearIndex) * ('PLC Premium Load Primary Rate'('CalcType SolveCriteria'(vectorSearchCriteria);'FeeType PremiumLoad';coverageIndex;yearIndex) * 0.01 - 'PLC Premium Load Secondary Rate'('CalcType SolveCriteria'(vectorSearchCriteria);'FeeType PremiumLoad';coverageIndex;yearIndex) * 0.01)
F1 217a409e 521b0fa9 667f4e79 700e35cd 0 0 2
Solve RateFile Base TargetPremiumSum(vectorSolveParms; vectorSearchCriteria)
Funktion
SUMX(yearIndex;'Solve Start Year'(vectorSearchCriteria);'Solve Criteria Target Duration'(vectorSearchCriteria);SUMX(coverageIndex;0;'Policy Number of Coverage'('CalcType SolveCriteria'(vectorSearchCriteria);#yearIndex) - 1;IF ( /*Base or Base Increase*/ ('IndicatorCode is Base'('Policy Coverage IndicatorCode'('CalcType SolveCriteria'(vectorSearchCriteria);#coverageIndex)) || 'IndicatorCode is BaseIncrease'('Policy Coverage IndicatorCode'('CalcType SolveCriteria'(vectorSearchCriteria);#coverageIndex))) ; çä   /*Yes*/ 'Solve RateFile TargetPremium'(#coverageIndex;#yearIndex;vectorSolveParms;vectorSearchCriteria) ; çä   /*No*/ 0çä)))
F1 667f4e79 217a409e 0 2d922c43 0 0 2
-- Solve RateFile TargetPremium(coverageIndex; yearIndex; vectorSolveParms; vectorSearchCriteria)
Funktion
'RateFile RateLookup Coverage Target'('CalcType SolveCriteria'(vectorSearchCriteria);coverageIndex; 1 ;çäâ'SharedVector SolveParms ReplaceFaceAmount'('CalcType SolveCriteria'(vectorSearchCriteria); 1; vectorSolveParms))çäâçä* ('PLC Premium Load Primary Rate'('CalcType SolveCriteria'(vectorSearchCriteria); 'FeeType PremiumLoad'; coverageIndex; yearIndex) * 0.01çäâ-çäâ'PLC Premium Load Secondary Rate'('CalcType SolveCriteria'(vectorSearchCriteria); 'FeeType PremiumLoad'; coverageIndex; yearIndex) * 0.01çä)
F1 2d922c43 217a409e 0 0 0 0 2
Solve RateFile TargetPremium(coverageIndex; yearIndex; vectorSolveParms; vectorSearchCriteria)
Funktion
'RateFile RateLookup Coverage Target'('CalcType SolveCriteria'(vectorSearchCriteria);coverageIndex;yearIndex;1;'SharedVector SolveParms ReplaceFaceAmount'('CalcType SolveCriteria'(vectorSearchCriteria);1;vectorSolveParms)) * ('PLC Premium Load Primary Rate'('CalcType SolveCriteria'(vectorSearchCriteria);'FeeType PremiumLoad';coverageIndex;yearIndex) * 0.01 - 'PLC Premium Load Secondary Rate'('CalcType SolveCriteria'(vectorSearchCriteria);'FeeType PremiumLoad';coverageIndex;yearIndex) * 0.01)
F1 700e35cd 521b0fa9 0 0 0 0 2
Solve SumOfCharges Base TargetPremium(vectorSolveParms; vectorSearchCriteria)
Funktion
SUMX(yearIndex;'Solve Start Year'(vectorSearchCriteria);'Solve Criteria Target Duration'(vectorSearchCriteria);'Solve Init Guess PV SpecAmt Charges'(vectorSolveParms;vectorSearchCriteria;#yearIndex) * ('PLC Premium Load Primary Rate'('CalcType SolveCriteria'(vectorSearchCriteria);'FeeType PremiumLoad';0;#yearIndex) * 0.01 - 'PLC Premium Load Secondary Rate'('CalcType SolveCriteria'(vectorSearchCriteria);'FeeType PremiumLoad';0;#yearIndex) * 0.01))
F1 3bf31162 24e83b0 2a789e73 26581a8 0 0 2
-- Solve function Code Guess Logic regula falsi with Illinois modification--
Funktion

F1 2a789e73 3bf31162 662fe2fc 0 0 0 2
-- New Solver Support Functions --
Funktion

F1 662fe2fc 2a789e73 9610063 37fe1eb2 0 0 2
Solve CashValueSolve(premium; vectorConstants)
Funktion
'Solve End Of Year Cash Value Rec'(e_(vectorConstants;0);'SharedVector SolveParms ReplacePremium'(premium;e_(vectorConstants;1);e_(vectorConstants;2));e_(vectorConstants;3);e_(vectorConstants;5);12;e_(vectorConstants;7))
F1 9610063 662fe2fc 0 0 0 0 2
Solve CashValueSolve Constants Vector(vectorSearchCriteria; vectorSolveParms)
Funktion
V_('CalcType SolveCriteria'(vectorSearchCriteria);'Solve Criteria Premium Duration'(vectorSearchCriteria);vectorSolveParms;'Solve Criteria Interest Rate'(vectorSearchCriteria;0);'Solve Criteria Addl Info'(vectorSearchCriteria);'Solve Criteria Target Duration'(vectorSearchCriteria);12;vectorSearchCriteria)
F1 37fe1eb2 2a789e73 0 0 0 0 2
Solve CashValueSolve FaceAmountSolve(faceAmount; vectorConstants)
Funktion
'Solve End Of Year Cash Value Rec'(e_(vectorConstants;0);'SharedVector SolveParms ReplaceFaceAmount'(e_(vectorConstants;0);faceAmount;e_(vectorConstants;2));e_(vectorConstants;3);e_(vectorConstants;5);12;e_(vectorConstants;7))
F1 26581a8 24e83b0 0 26585a8 0 0 2
Solve Model Name
Funktion
"Solve"
F1 26585a8 24e83b0 0 7e5ccbd3 0 0 2
Solve DthBenOpt(calcType; yearIndex; vectorSolveParms)
Funktion
IF ('ACCS CalcRule UL CalcType Is Level DB Assumption'('Policy CarrierCode';'Policy ProductCode';calcType;'Policy EffDate') ; çä   // level death benefitçä'DeathBenefitOptType Level' ; çä   // else çäIF ( /*Death Benefit option is passed or Use the policy record*/ 'SharedVector SolveParms DthBenOpt passed'(vectorSolveParms) ; çä     /*Yes*/ 'SharedVector SolveParms DthBenOpt'(vectorSolveParms;yearIndex) ; çä     /*No*/ 'Policy Coverage DeathBenefitOptType'(calcType;0;yearIndex)çä  )çä)
F1 7e5ccbd3 24e83b0 7dd2eff7 4353a7da 0 0 2
-- Solve function Code Guess Logic --
Funktion

F1 7dd2eff7 7e5ccbd3 0 77acf2e2 0 0 2
Solve Prev GuessCV(currCashValue; prevCashValue; newCashValue)
Funktion
IF (newCashValue < 0 || currCashValue < 0 ; çä  currCashValue ; çä  prevCashValue / 2çä)
F1 77acf2e2 7e5ccbd3 0 69e21c29 0 0 2
Solve Prev Guess(currPremGuess; currCashValue; prevPremGuess; newCashValue; prevCashValue)
Funktion
IF (newCashValue < 0 || currCashValue < 0 ; çä  currPremGuess ; çä  prevPremGuessçä)
F1 69e21c29 7e5ccbd3 0 0 0 0 2
Solve Premium Guess2(currPremGuess; currCashValue; prevPremGuess; prevCashValue)
Funktion
currPremGuess - currCashValue * ((currPremGuess - prevPremGuess) / (currCashValue - prevCashValue))
F1 4353a7da 24e83b0 0 3b02b62f 0 0 2
Solve Base and Increase FaceAmount(calcType; vectorSolveParms; yearIndex)
Funktion
SUMX(covIdx;0;'Policy Number Of Coverage'(calcType;yearIndex) - 1;IF ( /*Base or Base Increase*///('IndicatorCode is Base'( 'Policy Coverage IndicatorCode'(calcType;#covIdx) ) çä//â|| çä//â'IndicatorCode is BaseIncrease'('Policy Coverage IndicatorCode'(calcType;#covIdx) ) );çä 'Coverage Is NAR Cost'(calcType;#covIdx) ; çä   /*Yes*/ 'SharedVector SolveParms FaceAmount'(#covIdx;vectorSolveParms;yearIndex) ; çä   /*No*/ 0çä))
F1 3b02b62f 24e83b0 0 18306bb6 0 0 2
Solve Charge Applicable(feeType; vectorSearchCriteria; yearIndex; monthIndex)
Funktion
CASE( /*Fee mode*/ IF ('FeeType is PremiumLoad'(feeType) ; çä  'Solve Premium Mode'('CalcType SolveCriteria'(vectorSearchCriteria)) ; çä  'Solve Fee Mode'(feeType)çä);çä // Annualçä1 : (monthIndex = 1);çä // Semiannualçä2 : (monthIndex = 1) || (monthIndex = 7);çä // Quarterlyçä3 : (monthIndex = 1) || (monthIndex = 4) || (monthIndex = 7) || (monthIndex = 10);çä // Monthlyçä4 : 1;çä // Else FALSEçä : 0)çä
F1 18306bb6 24e83b0 0 0 0 0 2
Solve Fee Mode(feeType)
Funktion
IF ('PI PolicyProduct Fee FeeMode'('Policy ProductCode';feeType;'Policy EffDate') ALIKE 'GEN Vector Blank' ; çä  1 ; çä  'PI PolicyProduct Fee FeeMode'('Policy ProductCode';feeType;'Policy EffDate')çä)
A0 24e34b4 0 0 0 0 0 0

T0 24e3524 0 0 0 0 0 0

I0 24e3594 0 2658c10 0 0 0 0

I0 2658c10 24e3594 0 0 0 0 0
CashValueProjections.pms
-
O0
E0
L0
B0
P1
24e7f68
F62
24e83b0
24e8338
24e84f8
24e85b0
24e8668
24e8840
24e8a18
24e8d28
24e8f60
24e9bd8
24e9d88
24e9e40
2648098
2648198
2648360
2648f00
2649b68
264a6d8
264af28
264afe0
e19a616
2ec6dfba
264b278
4ccebd29
2652450
51cc8c12
26503a8
2650780
2650898
2650b40
2650c60
2650d80
2650ea0
2650fc0
26510e0
2651208
559cf351
48e42044
509b39dd
2651908
26519f8
48547467
64a44c54
7744e11a
2652d68
401ec53b
7efd9428
5b19d801
1b3cd053
10ab2f4a
6759bfc5
53b81d8c
333349ae
6acb85de
2652ef8
3bf31162
26581a8
26585a8
7e5ccbd3
4353a7da
3b02b62f
18306bb6
A0
T0
!163
24e84f8 -2 -2
Description:  Function creating for testing that returns the initial premium guess based on the parameters passed.çä çäModification Log:çä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - Remove calcType where SearchCriteria is usedçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä10/31/2007 CSC Initial Calculation/Rule
24e85b0 -2 -2
Description:  Annualized present value of charges.çä çäModification Log:çä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - Remove calcType where SearchCriteria is usedçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä10/31/2007 CSC Initial Calculation/Rule
24e8668 -2 -2
çäModification Log:çä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - Remove calcType where SearchCriteria is usedçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parm
24e8840 -2 -2
çäModification Log:çä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - Remove calcType where SearchCriteria is usedçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parm
24e8a18 -2 -2
çäModification Log:çä1/12/2011 - PAC013 calcType - BT - Restructure
24e8d28 -2 -2
çäModification Log:çä1/12/2011 - PAC013 calcType - BT - Restructureçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parm
24e8f60 -2 -2
Description:  Function created for test cases to be able to return the results of a premium search.  The following values will be returned as of stopIteration:çäelemNum = 0:  Returns premium guessçäelemNum = 1:  Returns cash value at target durationçäelemNum = 2;  Returns previous premium guessçäelemNum = 3;  Returns previous cash valueçäelemNum = 4:  Returns low boundçäelemNum = 5:  Returns high boundçä çäModification Log:çä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - Remove calcType where SearchCriteria is usedçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä10/31/2007 CSC Initial Calculation/Rule
24e9bd8 -2 -2
çäModification Log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä1/12/2011 - PAC013 calcType - BT - Restructureçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parm
24e9d88 -2 -2
Description:  Function created for test cases to be able to return the results of a premium search.  The following values will be returned as of stopIteration:çäelemNum = 0:  Returns premium guessçäelemNum = 1:  Returns cash value at target durationçäelemNum = 2;  Returns previous premium guessçäelemNum = 3;  Returns previous cash valueçäelemNum = 4:  Returns low boundçäelemNum = 5:  Returns high boundçä çäModification Log:çä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - Remove calcType where SearchCriteria is usedçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä10/31/2007 CSC Initial Calculation/Rule
24e9e40 -2 -2
Description:  Performs an iterative search to solve for the level premium necessary to provide a cash value equal to the target cash value at the target duration.çä çäModification Log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä2/1/2011 - PAC013 calcType - BT - Restructureçä10/31/2007 CSC Initial Calculation/Rule
2648098 -2 -2
çäModification Log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä1/12/2011 - PAC013 calcType - BT - Restructure
2648360 -2 -2
Description:  Performs an iterative search to solve for the level premium necessary to provide a cash value equal to the target cash value at the target duration.çä çäModification Log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä2/1/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä10/31/2007 CSC Initial Calculation/Rule
2648f00 -2 -2
Description:  Performs an iterative search to solve for the level premium necessary to provide a cash value equal to the target cash value at the target duration.çä çäModification Log:çä02/07/2011 - pA Regression CMC fixed error messageçä1/12/2011 - PAC013 calcType - BT - Restructureçä05/07/2010 CMC nbA merge to pA 1001 remared out subtraction of Target CV in the first line.çä10/31/2007 CSC Initial Calculation/Rule
7d5f33e9 -2 -2
çäModification Log:çä1/12/2011 - PAC013 calcType - BT - Restructure
7818ddc2 -2 -2
çäModification Log:çä1/12/2011 - PAC013 calcType - BT - Restructure
2649b68 -2 -2
Description:  Performs an iterative search to solve for the level premium necessary to provide a cash value equal to the target cash value at the target duration. Uses Annualized cash valuesçä çäModification Log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä2/1/2011 - PAC013 calcType - BT - Restructureçä10/31/2007 CSC Initial Calculation/Rule
264a6d8 -2 -2
Description:  Returns a premium guess based on either the secant method or bisection method (depending upon the iteration number).çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
264af28 -2 -2
Description:  Make sure the premium guess is within the upper and lower bounds.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
264afe0 -2 -2
Description:  Returns a vector of the criteria necessary for a premium search.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
e19a616 -2 -2
Description:  Performs an iterative search to solve for the level premium necessary to provide a cash value equal to the target cash value at the target duration.çä çäModification Log:çä02/09/2011 pA Regression CMC added logic to subtract face guess or target cash value which ever is appropriate.çä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä
2ec6dfba -2 -2
Description:  Performs an iterative search to solve for the level premium necessary to provide a cash value equal to the target cash value at the target duration.çä çäModification Log:çä07/10/2013 PA1401-26 KC added yearIndex parmçä02/09/2011 pA Regression CMC added logic to subtract face guess or target cash value which ever is appropriate.çä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä
4d47fa73 -2 -2
Description:   Flat and premium loads up to target when policy uses that method.çä çäModification log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä2/1/2011 - PAC013 calcType - BT - Restructureçä06/28/2010 wmA_ENH992_merge JL Merge wmA changes to Stagingçä03/10/2010 pA Performance moved uses fees check earlier to increase performance.çä03/04/2010 pA Performance Intial Calculation
4d4ee85f -2 -2
Description: Projected premium load charge.çä çäModification Log:çä5/20/2011 wmA-J CMC Premium Load Charges enhancement for Premium Taxes (added feeType parm to higher level functions)çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/26/2011 - PAC013 calctype CMC removed extra coverage and coverage option indexçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä06/28/2010 wmA_ENH992_merge JL Merge wmA changes to Staging
2652450 -2 -2
Description:   Flat and premium loads up to target when policy uses that method.çä çäModification log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä2/1/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä06/28/2010 wmA_ENH992_merge JL Merge wmA changes to Stagingçä03/10/2010 pA Performance moved uses fees check earlier to increase performance.çä03/04/2010 pA Performance Intial Calculationçä
32323155 -2 -2
Description: Projected premium load charge.çä çäModification Log:çä5/20/2011 wmA-J CMC Premium Load Charges enhancement for Premium Taxes (added feeType parm to higher level functions)çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/26/2011 - PAC013 calctype CMC removed extra coverage and coverage option indexçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä06/28/2010 wmA_ENH992_merge JL Merge wmA changes to Staging
2fa2227a -2 -2
Description:    Calculates a discounted target Value back to the start date of the requested solve.  This method checks the NAR for becoming zero and switches to a monthly method when this occurs and then back to an annual calculation without using COIs.çä çäModification log:çä9/6/2011 - pA1101 - cleanup - BT - update roundingçä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/13/2011 - PAC013 calcType - BT - Restructureçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/04/2010 pA Performance Intial Calculation
2ee1ec37 -2 -2
Description:  Recursive End of period cash value.çä çäModification Log:çä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä1/13/2011 - PAC013 calcType - BT - Restructure
525e6f99 -2 -2
çäModification Log:çä1/13/2011 - PAC013 calcType - BT - Restructure
5a2b66c0 -2 -2
çäModification Log:çä1/13/2011 - PAC013 calcType - BT - Restructure
74804040 -2 -2
çäModification Log:çä1/13/2011 - PAC013 calcType - BT - Restructure
5f05bf97 -2 -2
Description:  Negative NAR check using next years discounted cash value.çä çäModification Log:çä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä1/13/2011 - PAC013 calcType - BT - Restructure
3c324b94 -2 -2
çäModification Log:çä1/14/2011 - PAC013 calcType - BT - Restructureçä1/13/2011 - PAC013 calcType - BT - Restructure
9b54afc -2 -2
Description:    Monthly discounted cash valueçä çäModification log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/19/2011 - PAC013 calcType - BT - Restructureçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä9/7/2010 - PAC021 - rm - Replaced coverageIndex=0 with standard function 'Std BaseCov Index'(calcType)çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä06/28/2010 wmA_ENH992_merge JL Merge wmA changes to Stagingçä06/18/2010 wmA_ENH992_merge JL Allow for modal premium adjustment for initial prem guess calcçä03/04/2010 pA Performance Intial Calculationçä
3c58e0ef -2 -2
Description:    COI calculation used in the monthly discounted cash valueçä çäModification log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/26/2011 - PAC013 calctype CMC removed extra coverage and coverage option indexçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä06/15/2010 pA RegTest JL Use total base FA, not just first covçä04/14/2010 - Merge nbA to Staging - BT - add 0 coverageIndex to SharedVector SolveParms FaceAmountçä03/04/2010 pA Performance Intial Calculationçä
2d9e2e7a -2 -2
Description:    corridor check in the monthly calculation method.çä çäModification log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä06/15/2010 pA RegTest JL Use total base FA, not just first covçä04/14/2010 - Merge nbA to Staging - BT - add 0 coverageIndex to SharedVector SolveParms FaceAmountçä03/04/2010 pA Performance Intial Calculationçä
3e0851a8 -2 -2
Description:    Check of net amount at risk against the specified amount to see which discount method to use.çä çäModification log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä2/1/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/08/2010 pA Performance added check for DB option 2 çä03/04/2010 pA Performance Intial Calculation
3a32b2ed -2 -2
Description:    Annual discounted cash valueçä çäModification log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/14/2011 - PAC013 calcType - BT - Restructureçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä9/7/2010 - PAC021 - rm - Replaced coverageIndex=0 with standard function 'Std BaseCov Index'(calcType)çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä06/28/2010 wmA_ENH992_merge JL Merge wmA changes to Stagingçä06/18/2010 wmA_ENH992_merge JL Allow fo rmodal prem adjustementçä03/04/2010 pA Performance Intial Calculationçä
3fa4eea -2 -2
Description:    Calculation of the initial premium guess using a check to switch between annual calculations with and without COIs and a monthly calculation for the year in which the NAR goes to zero.çä çäModification log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä05/14/2010 pA Performance Updated calculation start yearçä03/04/2010 pA Performance Intial Calculationçä
3fa4eea 0 2

551f6d4f -2 -2
Description:    Annuity factor with COIs adjusting for negative corridor.çä çäModification log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä06/18/2010 wmA_ENH992_merge JL Allow for modal premium adjustment for initial prem guess calcçä06/16/2010 pA Regression Testing Added death benefit option 3 adjustmentçä03/04/2010 pA Performance Intial Calculation
35d8d0b5 -2 -2
Description:  Monthly R factor for years in which policy enters or leaves corridor.çä çäModification log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä2/1/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - Remove calcType where SearchCriteria is usedçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/04/2010 pA Performance Intial Calculation
2083402 -2 -2
çäModification Log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä2/1/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - Remove calcType where SearchCriteria is usedçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä06/18/2010 wmA_ENH992_merge Merge required code from wmA
463e0d0e -2 -2
çäModification Log:çä1/12/2011 - PAC013 calcType - BT - Restructure
73320528 -2 -2
çäModification Log:çä1/12/2011 - PAC013 calcType - BT - Restructure
579d7c3f -2 -2
çäModification Log:çä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä1/12/2011 - PAC013 calcType - BT - Restructure
5ac7bd73 -2 -2
Description:    Calculation of the initial premium guess using interest and COIs in all durations and no monthly switch.  Used for establishing a high bound or low bound.çä çäModification log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä05/14/2010 pA Performance Updated calculation start yearçä03/04/2010 pA Performance Intial Calculation
1c2ef69f -2 -2
Description:    Annuity factor with COIs always.çä çäModification log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä2/1/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä06/16/2010 pA Regression Testing Added death benefit option 3 adjustmentçä03/04/2010 pA Performance Intial Calculation
677a9fb6 -2 -2
Description:    Calculation of the initial premium guess using interest only in all durations and no monthly switch.  Used for establishing a high bound or low bound.çä çäModification log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä05/14/2010 pA Performance Updated calculation start yearçä03/04/2010 pA Performance Intial Calculation
166f7a0 -2 -2
Description:    Annuity factor without COIs.çä çäModification log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä2/1/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä06/16/2010 pA Regression Testing Added death benefit option 3 adjustmentçä03/04/2010 pA Performance Intial Calculation
51cc8c12 -2 -2
Description:  Returns an initial premium guess based on a present value calculation.çä çäModification Log:çä10/27/2009 - NT - Performance - round to 2 placesçä9/16/2010 - PAC013 calcType - BT - Remove calcType where SearchCriteria is usedçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä10/31/2007 CSC Initial Calculation/Rule
5dd594d0 -2 -2
Description:  Annualized present value of charges.çä çäModification Log:çä9/16/2010 - PAC013 calcType - BT - Remove calcType where SearchCriteria is usedçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä10/31/2007 CSC Initial Calculation/Rule
12e548c9 -2 -2
Description:  Present value of charges for year yearIndex.çä çäModification Log:çä5/20/2011 wmA-J CMC Premium Load Charges enhancement for Premium Taxes (added feeType parm to higher level functions)çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä10/24/2008âVPM028âChanged operator from "=" to "EQUAL" to bypass fatal error when the requested Fee object is not present.  This change will allow a zero to be returned for the Fee value.çä12/5/2007 GLP001 pA Phase 2  Add criteria for flat amount premium load charge that the yearIndex is still within the premium paying period.âAdded and adjustment factor for better initial guesses for Death Benefit Option B and All death benefit options when waiver of monthly deduction is present. Added the premium load charge for the amount up to the load target.  This only applies to solves that are NOT load target solves.çä10/31/2007 CSC Initial Calculation/Rule
2015ec88 -2 -2
Description:  Total charges for year yearIndex.çä çäModification Log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä9/7/2010 - PAC021 - rm - Replaced coverageIndex=0 with standard function 'Std BaseCov Index'(calcType)çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä06/28/2010 wmA_ENH992_merge JL Merge wmA changes to Stagingçä12/5/2007 SPR GLP001 pA Phase 2 Added Non COI Timing Adjustment.  This is to reflect the timing of expense and rider charges with respect to the Net Amount at Risk Calculaiton. Also added the solve adjustment factor so that the common discounting factor can be used.çä10/31/2007 CSC Initial Calculation/Rule
7323fd8e -2 -2
Description:  Returns the monthly expenses to be used in the calculation for year yearIndex.çä çäModification Log:çä1/26/2011 - PAC013 calctype CMC removed extra coverage and coverage option indexçä1/12/2011 - PAC013 calcType - BT - Restructureçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä06/28/2010 wmA_ENH992_merge JL Merge wmA changes to Stagingçä10/31/2007 CSC Initial Calculation/Rule
586bfb97 -2 -2
Description:  Returns the Coverage charges (and associated CovOption charges) for Coverages not associated with the NAR.çä çäModification Log:çä1/26/2011 - PAC013 calctype CMC removed extra coverage and coverage option indexçä1/12/2011 - PAC013 calcType - BT - Restructureçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä05/07/2010 CMC nbA Merge to pA1001 change to use COV Projected Monthly Total Coverage Charge NoWMD instead of COV Projected Monthly Total Coverage Chargeçä11/2/2009 - NT - changed no. coverage yearIndex to read from vector, in order to do calculations at issue, ignoring changes post-issueçä10/31/2007 CSC Initial Calculation/Rule
26e34292 -2 -2
Description:  Returns the coi charge for yearIndex.çä çäModification Log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/26/2011 - PAC013 calctype CMC removed extra coverage and coverage option indexçä1/14/2011 - PAC013 calcType - BT - Restructureçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä06/15/2010 pA RegTest JL Use total base FA, not just first covçä11/27/2009 - PAC006 - wdp - Added coverageIndex parameter to SharedVector SolveParms FaceAmount functionsçä12/5/2007  SPR GLP001 pA Phase 2 Changed the divisor to be for all death benefit options.çä10/31/2007 CSC Initial Calculation/Rule
3979958a -2 -2
Description:  Returns the monthly expenses to be used in the calculation for year yearIndex. These are adjusted for fee modality.çä çäModification Log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/26/2011 - PAC013 calctype CMC removed extra coverage and coverage option indexçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä06/28/2010 wmA_ENH992_merge JL Merge wmA changes to Staging
294bce22 -2 -2
Description:  Returns the annualized R factor.çä çäModification Log:çä9/16/2010 - PAC013 calcType - BT - Remove calcType where SearchCriteria is usedçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/14/2008 CMC ILLUS001 pA Phase 2  Updated to add vectorSolveParms as a parameter.  This is used to pass death benefit option to the coi functions.çä10/31/2007 CSC Initial Calculation/Rule
6462f8df -2 -2
Description:  Present value R factor.çäâçäR factor= 1 / ( ( 1 + q) * (1 + i) ) for option Açäâ1 /  (1 +i) for option Bçäwhere q is monthly COI per $1, and i is monthly interest rateçä çäModification Log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/26/2011 - PAC013 calctype CMC removed extra coverage and coverage option indexçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä8/11/2010 - PAC013 calcType - BT - Change order of COV CovOption COI Rate parmsçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/14/2008 CMC ILLUS001 pA Phase 2  Updated to add vectorSolveParms as a parameter.  This is used to pass death benefit option to the coi functions.çä12/6/2007  SPR GLP001 pA Phase 2 Revised the R factor as followsçä10/31/2007 CSC Initial Calculation/Ruleçä çäR factor= 1 / ( ( 1 + q) * (1 + i) ) for option A and Cçäâ1 /  (1 +i+iq) for option Bçäwhere q is monthly COI per $1, and i is monthly interest rateçä çäWith waiver of monthly deductionçäR factor= 1 / ( ( 1 + i) * (1 + q+qw) ) for option A and Cçäâ1 /  (1 +i+iq+iqw) for option Bçä çä çä
52fa3199 -2 -2
Description:  The adjustment applies all charges except premium load up to the target premium.  This is necessary so that a common discount factor "R" can be used against all expenses.çä çäModification Log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/26/2011 - PAC013 calctype CMC removed extra coverage and coverage option indexçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä8/11/2010 - PAC013 calcType - BT - Change order of COV CovOption COI Rate parmsçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/14/2008 CMC ILLUS001 pA Phase 2  Updated to add vectorSolveParms as a parameter.  This is used to pass death benefit option to the coi functions.çä12/6/2007 SPR GLP001 pA Phase 2
76c4ef1e -2 -2
Description:  The adjustment applies all charges except premium load up to the target premium.  This is necessary so that a common discount factor "R" can be used against all expenses.çä çäModification Log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/26/2011 - PAC013 calctype CMC removed extra coverage and coverage option indexçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä8/11/2010 - PAC013 calcType - BT - Change order of COV CovOption COI Rate parmsçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/14/2008 CMC ILLUS001 pA Phase 2  Updated to add vectorSolveParms as a parameter.  This is used to pass death benefit option to the coi functions.çä12/6/2007 SPR GLP001 pA Phase 2
4a8b715f -2 -2
Description:  This adjusts for the timing of expense and rider charges with respect to the Net Amount at Risk Calculationçä çäModification Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/14/2008 CMC ILLUS001 pA Phase 2  Updated to add vectorSolveParms as a parameter.  This is used to pass death benefit option to the coi functions.çä12/6/2007 SPR GLP001 pA Phase 2
71848698 -2 -2
Description:  Returns the annualized present value of payments factor (adjusted by the premium load rate).çä çäModification Log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä2/1/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/14/2008 CMC ILLUS001 pA Phase 2  Updated to add vectorSolveParms as a parameter used to pass death benefit option.  This is to pass death benefit çäoption to the coi functions.çä12/6/2007 SPR GLP001 pA Phase 2 Added an adjusted that reflects the cost of insurance charge under death benefit çäoption C for the premium component of the death benefitçä10/31/2007 CSC Initial Calculation/Rule
135debb4 -2 -2
Description:  Returns the net premium factor for the year.çä çäModification Log:çä5/20/2011 wmA-J CMC Premium Load Charges enhancement for Premium Taxes (added feeType parm to higher level functions)çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/26/2011 - PAC013 calctype CMC removed extra coverage and coverage option indexçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä06/28/2010 wmA_ENH992_merge JL Merge wmA changes to Stagingçä10/31/2007 CSC Initial Calculation/Rule
72b2c6d5 -2 -2
Description - more accurate premium load rate, taking target premiums into accountçä çäModification Log:çä5/20/2011 wmA-J CMC Premium Load Charges enhancement for Premium Taxes (added feeType parm to higher level functions)çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä2/2/2011 - PAC013 calctype - BT - add TARGET Premiumçä1/26/2011 - PAC013 calctype CMC removed extra coverage and coverage option indexçä1/12/2011 - PAC013 calcType - BT - Restructureçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/25/2008 CSC Updated to calc target when run for Illustrationsçä10/31/2007 CSC Initial Calculation/Rule
183fa277 -2 -2
Description - more accurate premium load rate, taking target premiums into accountçä çäModification Log:çä07/10/2013 PA1401-26 KC added yearIndex parmçä5/20/2011 wmA-J CMC Premium Load Charges enhancement for Premium Taxes (added feeType parm to higher level functions)çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä2/2/2011 - PAC013 calctype - BT - add TARGET Premiumçä1/26/2011 - PAC013 calctype CMC removed extra coverage and coverage option indexçä1/12/2011 - PAC013 calcType - BT - Restructureçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/25/2008 CSC Updated to calc target when run for Illustrationsçä10/31/2007 CSC Initial Calculation/Rule
3a9f513b -2 -2
Description - Guess for premium using information up to, but excluding accurate premium load rateçä çäModification Log:çä9/16/2010 - PAC013 calcType - BT - Remove calcType where SearchCriteria is usedçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä10/31/2007 CSC Initial Calculation/Rule
7981e5b8 -2 -2
Description:  Returns an amount that reflects the cost of insurance charge under death benefit option C for the premium component of the death benefitçä çäModification Log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/26/2011 - PAC013 calctype CMC removed extra coverage and coverage option indexçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä8/11/2010 - PAC013 calcType - BT - Change order of COV CovOption COI Rate parmsçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/14/2008 CMC ILLUS001 pA Phase 2  Updated to add vectorSolveParms as a parameter.  This is used to pass death benefit option to the coi functions.çä12/6/2007 SPR GLP001 pA Phase 2
26503a8 -2 -2
The premium search criteria vector is expected to be passed with the following positions:çä0 = Calculation Typeçä1 = Target Cash Valueçä2 = Target Durationçä3 = Premium Durationçä4 = Interest Rateçä5 = Cash Value Toleranceçä6 = Premium Toleranceçä7 = Requested Stop Durationçä8 = Vector of Additional CV projection informationçäâ0 = Check for lapse (True or False)çäâ1 = Initial lump sum amountçäâ2 = Adjust for DEFRA (True or False)çäâ3 = Vector of guideline limitsçäâ4 = Varying premiums (True or False)çäâ5 = Vector of periodic premiumsçäâ6 = Vector of load target premiums by coverageçäâ7 = Projection start yearçäâ8 = Projection start month
2650780 -2 -2
Description:  Extract the target cash value from the search criteria vector.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
2650898 -2 -2
Description:  Extract the target cash value from the search criteria vector.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
2650b40 -2 -2
Description:  Extract the target duration from the search criteria vector.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
2650c60 -2 -2
Description:  Extract the premium duration from the search criteria vector.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
2650d80 -2 -2
Description:  Extract the interest rate from the search criteria vector.çä çäModification Log:çä05/02/2010 ENH922 JL yearIndex for "Solve Criteria Interest Rate"çä10/31/2007 CSC Initial Calculation/Rule
2650ea0 -2 -2
Description:  Extract the cash value tolerance from the search criteria vector.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
2650fc0 -2 -2
Description:  Extract the premium tolerance from the search criteria vector.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
26510e0 -2 -2
Description:  Extract the requested stop duration from the search criteria vector.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
2651208 -2 -2
Description:  Extract the vector of additional criteria needed for the CV projection.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
44f8b8 -2 -2
Description:  Replaces the guideline premiums in the search criteria vector using the given face amountçä çäModification Log:çä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solves
7174b1ba -2 -2
Description:  Replaces the target premium in the search criteria vector using the given face amountçä çäModification Log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/08/2011 - pA Regression CMC added check for target usage.çä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä
4e1d5b98 -2 -2
Description:  Replaces the target premium in the search criteria vector using the given face amountçä çäModification Log:çä11/8/2013pA 1401 - 26 CMC removed yearIndex from target face solve function callçä07/10/2013 PA1401-26 KC added yearIndex parmçä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/08/2011 - pA Regression CMC added check for target usage.çä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä
3bf1066d -2 -2
Description:  Indicator for premium loads using target premiumsçä çäModificiation Log:çä5/20/2011 wmA-J CMC Premium Load Charges enhancement for Premium Taxes (added feeType parm to higher level functions)çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/08/2011 CMC pA Regression Added Function.
559cf351 -2 -2
Description:  Extract the calculation type from the search criteria vector.çä çäModification Log:çä10/31/2007 CSC Initial Calculation/Rule
48e42044 -2 -2
Description:  Determines if the COI should be used when the policy is in corridor.çä çäModification Log:çä11/10/2011 pA PAD-819 CMC added current illustration to use cois in corridor.çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä
509b39dd -2 -2
çäModification Log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType model
26519f8 -2 -2
Description:    Forward projection of cash values using an annual calculation and only monthly when the NAR dictates.çä çäModification log:çä11/30/2012 PAC029 ITR JL - Add Cov Index for R factor COI rate to Corridor Indicator parmçä9/6/2011 - pA1101 - cleanup - BT - update roundingçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä9/16/2010 - PAC013 calcType - BT - Remove calcType where SearchCriteria is usedçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/04/2010 pA Performance Intial Calculation
48547467 -2 -2
Description:    Call to monthly cash value calculationçä çäModification log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä2/1/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä03/04/2010 pA Performance Intial Calculation
64a44c54 -2 -2
Description:    Check of NAR to determine which calculation method to use for the current year.çä çäModification log:çä11/30/2012 PAC029 ITR JL - Add check to determine whether COI rate used in R factor is for the same coverage during the year. If so, continue with relevant annual build; else use monthly accumulation.çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä2/1/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/08/2010 pA Performance added the new death benefit function.çä03/04/2010 pA Performance Initial Calculation
79d2cf47 -2 -2
Description:    Returns the death benefit to be used in the NAR check.çä çäModification log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä2/1/2011 - PAC013 calcType - BT - Restructureçä10/29/2010 PAC014 - MAS - Solve needs to reference 'Base plus increases', not just base.çä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/08/2010 pA Performance Intial Calculation
7744e11a -2 -2
Description:   Calculation of the cash value used in NAR calculation to check for a situation where the NAR is < specified amount at the beginning and end of the year but due to premium payment crosses twice during the year.çä çäModification log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä9/7/2010 - PAC021 - rm - Replaced coverageIndex=0 with standard function 'Std BaseCov Index'(calcType)çä06/28/2010 wmA_ENH992_merge JL Merge wmA changes to Staging03/04/2010 pA Performance Intial Calculationçä
2652d68 -2 -2
Description:    Specified amount used to determine the NAR.çä çäModification log:çä02/14/2013 - PAD1213 - JL - Use "Std Coverage is Inforce" instead of "Coverage is Inforce"çä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä2/1/2011 - PAC013 calcType - BT - Restructureçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/04/2010 pA Performance Intial Calculationçä06/03/2009 - DT - PA1013 - added parm TransEffDur to 'Coverage Is InForce'
401ec53b -2 -2
Description:    Annual forward projection of cash values.çä çäModification log:çä11/30/2012 PAC029 ITR JL - Add corridor indicator parms to Initial COI Charge functionçä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä9/7/2010 - PAC021 - rm - Replaced coverageIndex=0 with standard function 'Std BaseCov Index'(calcType)çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä06/28/2010 wmA_ENH992_merge JL Merge wmA changes to Staging06/18/2010 wmA_ENH992_merge JL Add modal premium annuity factor to allow for modal premums in solve; include in prem loadsçä03/08/2010 pA Performance changed to reference the new COI projection function.çä03/04/2010 pA Performance Intial Calculationçä
25408f12 -2 -2
Description:  Annuity factor to allow for calculation of modal premiums. Uses present value R factor to take COI into account.çäCalulated as (1 - v^(payments in year)) / (1 - v) where v = R ^ (months in paymode)çä çäModification log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä2/1/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä06/24/2010 RegTest JL Do not calculate if mode =1 (factor is 1, avoid extra calculation)çä06/18/2010 wmA_ENH992_merge JL Initial Calculation
41468811 -2 -2
Description:  Premium payment modeçä çäModification log:çä1/26/2011 - PAC013 calctype CMC removed extra coverage and coverage option indexçä1/12/2011 - PAC013 calcType - BT - Restructureçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä06/18/2010 wmA_ENH992_merge JL Initial Calculation
43dffb3d -2 -2
Description:  Annuity factor to allow for calculation of modal amounts. Uses present value R factor to take COI into account.çäCalulated as (1 - v^(payments in year)) / (1 - v) where v = R ^ (months in mode)çä çäModification log:çä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä9/16/2010 - PAC013 calcType - BT - Remove calcType where SearchCriteria is usedçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä06/28/2010 wmA_ENH992_merge JL Merge wmA changes to Staging
7efd9428 -2 -2
Description:  Returns the coi charge for yearIndex to be used in the annual cash value projections for solves.çä çäModification Log:çä11/30/2012 PAC029 ITR JL - The COI rate multiplier (in Discounted DB * COI) needs to be the largest of (1) the coverage for which the COI rate is used in the R factor (e.g. the partially funded by CV cov on a FIFO basis) and (2) the cov for the which the COI charge is being calculated (#covIndex). This assume that the overages are read in order if FIFO applies (e.g. use 1 before 1 for NAR purposes, etc). The COI rate divisor (in / (1+ COI) ) needs to be the COI rate used when calculating the R-factor (e.g. the partially funded by CV cov on a FIFO basis).çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä06/03/2010 - Merge nbA to Staging - BT - sumX coverageIndexçä04/14/2010 - Merge nbA to Staging - BT - add 0 coverageIndex to SharedVector SolveParms FaceAmountçä03/08/2010 pA Performance Intial Calculation
5b19d801 -2 -2
Description:  Solve method using monthly values.çä çäModification log:çä9/6/2011 - pA1101 - cleanup - BT - update roundingçä7/14/2011 - pA1101 - cleanup - BT - code reuseçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parm
56c95656 -2 -2
Description:  Annual beginning of month cash valueçä çäModification Log:çä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - Remove calcType where SearchCriteria is usedçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä4/14/2010 - Merge nbA to Staging - BT - Add targetLoadInd 0 to SolveNetPremiumFactor
1b3cd053 -2 -2
çäModification Log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä1/12/2011 - PAC013 calcType - BT - Restructure
10ab2f4a -2 -2
Description:  Returns the annualized R factor.çä çäModification Log:çä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä9/16/2010 - PAC013 calcType - BT - Remove calcType where SearchCriteria is usedçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/14/2008 CMC ILLUS001 pA Phase 2  Updated to add vectorSolveParms as a parameter.  This is used to pass death benefit option to the coi functions.çä10/31/2007 CSC Initial Calculation/Rule
6759bfc5 -2 -2
Description:  The adjustment applies all charges except premium load up to the target premium.  This is necessary so that a common discount factor "R" can be used against all expenses.  This version includes the ability to remove COIs from the calculation.çä çäModification log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/26/2011 - PAC013 calctype CMC removed extra coverage and coverage option indexçä1/19/2011 - PAC013 calcType - BT - Restructureçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä8/11/2010 - PAC013 calcType - BT - Change order of COV CovOption COI Rate parmsçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/04/2010 pA Performance Intial Calculation
53b81d8c -2 -2
Description:  Returns an amount that reflects the cost of insurance charge under death benefit option C for the premium component of the death benefit.  Adjusts for negative NAR due to corridor factors of 1.çä çäModification log:çä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä9/16/2010 - PAC013 calcType - BT - Remove calcType where SearchCriteria is usedçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä06/16/2010 pA Regression Testing Intial Calculationçä
784be161 -2 -2
Description:   Annual calculation for the option 3 adjusment.  This is used when the policy is either in corridor on not in corridor for a full year.çä çäModification log:çä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä9/16/2010 - PAC013 calcType - BT - Remove calcType where SearchCriteria is usedçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä06/16/2010 pA Regression Testing Intial Calculation
3c8a32a6 -2 -2
Description:  Returns an amount that reflects the cost of insurance charge under death benefit option C for the premium component of the death benefit.çä çäModification log:çä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/26/2011 - PAC013 calctype CMC removed extra coverage and coverage option indexçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä8/11/2010 - PAC013 calcType - BT - Change order of COV CovOption COI Rate parmsçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä06/16/2010 pA Regression Testing Intial Calculation
3f184711 -2 -2
Description:  Monthly calculation for the option 3 adjusment.  This is used in the year in which the policy enters or leaves corridor.çä çäModification log:çä2/1/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - Remove calcType where SearchCriteria is usedçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä06/16/2010 pA Regression Testing Intial Calculation
333349ae -2 -2
Description:  switches between the adjustment factor using corrior or not using corridorçä çäModification log:çä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solves
54d69611 -2 -2
Description:  The adjustment applies all charges except premium load up to the target premium.  This is necessary so that a common discount factor "R" can be used against all expenses.  This version includes the ability to remove COIs from the calculation.çä çäModification log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä8/11/2010 - PAC013 calcType - BT - Change order of COV CovOption COI Rate parmsçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/08/2010 pA Performance clean up for death benefit divisorçä03/04/2010 pA Performance Intial Calculation
6acb85de -2 -2
Description:  switches between the adjustment factor using corrior or not using corridorçä çäModification log:çä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solves
62a00985 -2 -2
Description:  Present value R factor.çäâçäR factor= 1 / ( ( 1 + q) * (1 + i) ) for option Açäâ1 /  (1 +i) for option Bçäwhere q is monthly COI per $1, and i is monthly interest rateçä çäR factor= 1 / ( ( 1 + q) * (1 + i) ) for option A and Cçäâ1 /  (1 +i+iq) for option Bçäwhere q is monthly COI per $1, and i is monthly interest rateçä çäWith waiver of monthly deductionçäR factor= 1 / ( ( 1 + i) * (1 + q+qw) ) for option A and Cçäâ1 /  (1 +i+iq+iqw) for option Bçä çäModification Log:çä11/30/2012 PAC029 ITR JL - The COI rate used in the R factor is based on the coverage index for which the CV provides partial funding throughout that year. In the case of non base coverages (e.g. ITR) this COI rate may vary from the Base COI rate. The cov index needed is passed in the corridor indicator parm.çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä8/11/2010 - PAC013 calcType - BT - Change order of COV CovOption COI Rate parmsçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/08/2010 pA Performance clean up for death benefit divisorçä03/04/2010 pA Performance additional ability to remove the COIs from the R calculation when necessary.
8963a86 -2 -2
Description:  Present value R factor.çäâçäR factor= 1 / ( ( 1 + q) * (1 + i) ) for option Açäâ1 /  (1 +i) for option Bçäwhere q is monthly COI per $1, and i is monthly interest rateçä çäR factor= 1 / ( ( 1 + q) * (1 + i) ) for option A and Cçäâ1 /  (1 +i+iq) for option Bçäwhere q is monthly COI per $1, and i is monthly interest rateçä çäWith waiver of monthly deductionçäR factor= 1 / ( ( 1 + i) * (1 + q+qw) ) for option A and Cçäâ1 /  (1 +i+iq+iqw) for option Bçä çäModification Log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä8/11/2010 - PAC013 calcType - BT - Change order of COV CovOption COI Rate parmsçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/08/2010 pA Performance clean up for death benefit divisorçä03/04/2010 pA Performance additional ability to remove the COIs from the R calculation when necessary.
1affb042 -2 -2
çäModification Log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType model
5ab1f9fd -2 -2
çäModification Log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType model
66c31642 -2 -2
Description: Returns the Coverage Index of the NAR cov to be used for the COI rate in the R-factor. When non-base coverages (e.g. ITR) are added onto a policy, the COI rate may needed here may differ from the Base COI (e.g. when the CV is sufficient such that the NAR reduces the ITR cov in a FIFO set-up).çä çäModification Log:çä11/30/2012 PAC029 ITR JL - Initial Rule
6375adf3 -2 -2
Description: Recursive function for "Solve COI Cov for R Factor"çä çäModification Log:çä11/30/2012 PAC029 ITR JL - Initial Rule
77b46792 -2 -2
Description: Returns the current CovIdx if that cov is a NAR cov; else looks back-wards and returns the first NAR cov found.çä çäModification Log:çä11/30/2012 PAC029 ITR JL - Initial Rule
3192babe -2 -2
Description: Total NAR DB per cov. Used to determine which Coverage is being partially funded by the CV in a LIFO set-up.çä çäModification Log:çä11/30/2012 PAC029 ITR JL - Initial Rule
73fafef -2 -2
Description: Checks whether the COI rate used in the R-factor changes in the current year. If so, returns TRUE (and the solve uses a monthly accumulation); else returns FALSE (and the solve uses an annual accumulation).çä çäModification Log:çä11/30/2012 PAC029 ITR JL - Initial Rule
5035a592 -2 -2
Description: Coverage which the R factor uses for the COI rate at the End of the previous year.çä çäModification Log:çä11/30/2012 PAC029 ITR JL - Initial Rule
31f01d83 -2 -2
Description: Coverage which the R factor uses for the COI rate at the End of the current year.çä çäModification Log:çä11/30/2012 PAC029 ITR JL - Initial Rule
69ade4d0 -2 -2
Description:  Returns an initial guess for face amount solves.çä çäModification Log:çä9/16/2010 - PAC013 calcType - BT - Remove calcType where SearchCriteria is usedçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/14/2008 CMC ILLUS001 pA Phase 2  Updated to add vectorSolveParms as a parameter.  This is used to pass death benefit option to the coi functions.
3d48f873 -2 -2
Description:  This is the present value of all charges that are not per unit or face amount basedçä çäModification Log:çä9/16/2010 - PAC013 calcType - BT - Remove calcType where SearchCriteria is usedçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/14/2008 CMC ILLUS001 pA Phase 2  Updated to add vectorSolveParms as a parameter.  This is used to pass death benefit option to the coi functions.
3666db69 -2 -2
Description:  Returns the present value of charges less per unit and face amount based charges for a given policy year.çä çäModification Log:çä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/14/2008 CMC ILLUS001 pA Phase 2  Updated to add vectorSolveParms as a parameter.  This is used to pass death benefit option to the coi functions.
d1225c5 -2 -2
çäModification Log:çä1/12/2011 - PAC013 calcType - BT - Restructure
14b1342b -2 -2
çäModification Log:çä5/20/2011 wmA-J CMC Premium Load Charges enhancement for Premium Taxes (added feeType parm to higher level functions)çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/26/2011 - PAC013 calctype CMC removed extra coverage and coverage option indexçä1/12/2011 - PAC013 calcType - BT - Restructure
30d565f8 -2 -2
çäModification Log:çä5/20/2011 wmA-J CMC Premium Load Charges enhancement for Premium Taxes (added feeType parm to higher level functions)çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/26/2011 - PAC013 calctype CMC removed extra coverage and coverage option indexçä1/12/2011 - PAC013 calcType - BT - Restructure
22a047b1 -2 -2
Description:  Returns the charges less per unit and face amount based charges for a given policy year.çä çäModification Log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/26/2011 - PAC013 calctype CMC removed extra coverage and coverage option indexçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä9/7/2010 - PAC021 - rm - Replaced coverageIndex=0 with standard function 'Std BaseCov Index'(calcType)çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/14/2008 CMC ILLUS001 pA Phase 2  Updated to add vectorSolveParms as a parameter.  This is used to pass death benefit option to the coi functions.
30fbabbd -2 -2
Description:  Returns the expense charges less per unit and face amount based charges for a given policy year.çä çäModification Log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä1/26/2011 - PAC013 calctype CMC removed extra coverage and coverage option indexçä1/12/2011 - PAC013 calcType - BT - Restructureçä06/28/2010 wmA_ENH992_merge JL Merge wmA changes to Stagingçä03/14/2008 CMC ILLUS001 pA Phase 2  Updated to add vectorSolveParms as a parameter.  This is used to pass death benefit option to the coi functions.
790d5361 -2 -2
Description:  Calculates the expense charges less per unit and face amount based charges for a given policy year.çä çäModification Log:çä1/12/2011 - PAC013 calcType - BT - Restructureçä03/14/2008 CMC ILLUS001 pA Phase 2  Updated to add vectorSolveParms as a parameter.  This is used to pass death benefit option to the coi functions.
32f032c8 -2 -2
Description:  Calculates the expense charges less per unit and face amount based charges for a given policy year for Shadow Accountsçä çäModification Log:çä1/12/2011 - PAC013 calcType - BT - Restructureçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä06/28/2010 wmA_ENH992_merge JL Merge wmA changes to Staging
5174835 -2 -2
Description:  Present value of all per unit and face amount charges on a per dollar basisçä çäModification Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/14/2008 CMC ILLUS001 pA Phase 2  Updated to add vectorSolveParms as a parameter.  This is used to pass death benefit option to the coi functions.
a58940 -2 -2
Description:  Present value of all per unit and face amount charges on a per dollar basis for a given year.çä çäModification Log:çä9/16/2010 - PAC013 calcType - BT - Remove calcType where SearchCriteria is usedçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/14/2008 CMC ILLUS001 pA Phase 2  Updated to add vectorSolveParms as a parameter.  This is used to pass death benefit option to the coi functions.
7557f2c1 -2 -2
Description:  All per unit and face amount charges on a per dollar basis for a given year.çä çäModification Log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä2/1/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/14/2008 CMC ILLUS001 pA Phase 2  Updated to add vectorSolveParms as a parameter.  This is used to pass death benefit option to the coi functions.
4415c497 -2 -2
Description:  Monthly expense chargees based on face amount returned on a per dollar basis for a given year.çä çäModification Log:çä03/14/2008 CMC ILLUS001 pA Phase 2  Updated to add vectorSolveParms as a parameter.  This is used to pass death benefit option to the coi functions.
8129194 -2 -2
Description:  Calculation of monthly expense chargees based on face amount returned on a per dollar basis for a given year.çä çäModification Log:çä1/26/2011 - PAC013 calctype CMC removed extra coverage and coverage option indexçä1/12/2011 - PAC013 calcType - BT - Restructureçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/14/2008 CMC ILLUS001 pA Phase 2  Updated to add vectorSolveParms as a parameter.  This is used to pass death benefit option to the coi functions.
4e13f05c -2 -2
Description:  Monthly COI charges  returned on a per dollar basis for a given year.çä çäModification Log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/26/2011 - PAC013 calctype CMC removed extra coverage and coverage option indexçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/14/2008 CMC ILLUS001 pA Phase 2  Updated to add vectorSolveParms as a parameter.  This is used to pass death benefit option to the coi functions.
ad5a770 -2 -2
Description:  Present value of the target cash value for a face amount solve.çä çäModification Log:çä9/16/2010 - PAC013 calcType - BT - Remove calcType where SearchCriteria is usedçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/14/2008 CMC ILLUS001 pA Phase 2  Updated to add vectorSolveParms as a parameter.  This is used to pass death benefit option to the coi functions.
3bc6c5cb -2 -2
Description:  Target premium guess based on Sum of Charges method for face solves.çä çäModification Log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/26/2011 - PAC013 calctype CMC removed extra coverage and coverage option indexçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - Remove calcType where SearchCriteria is usedçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/14/2008 ILLUS001 pA Phase 2  Initial Calcs.
45b64cdf -2 -2
Description:  Target premium guess based on Rate file method for face solves.çä çäModification Log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/26/2011 - PAC013 calctype CMC removed extra coverage and coverage option indexçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä9/7/2010 - PAC021 - rm - Replaced coverageIndex=0 with standard function 'Std BaseCov Index'(calcType)çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/14/2008 ILLUS001 pA Phase 2  Initial Calcs.
7ec41d87 -2 -2
Description:  Target premium guess based on Rate file method for face solves.çä çäModification Log:çä07/10/2013 PA1401-26 KC added yearIndex parmçä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/26/2011 - PAC013 calctype CMC removed extra coverage and coverage option indexçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä9/7/2010 - PAC021 - rm - Replaced coverageIndex=0 with standard function 'Std BaseCov Index'(calcType)çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/14/2008 ILLUS001 pA Phase 2  Initial Calcs.
35703c73 -2 -2
Description:  Deterimines the Target premium type for the calculation.çä çäModification Log:çä11/01/2012 wmA-J 1301 Release 2 Sprint 6 CMC updated error messageçä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/26/2011 - PAC013 calctype CMC removed extra coverage and coverage option indexçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/14/2008 ILLUS001 pA Phase 2  Initial Calcs.
1f8b79c4 -2 -2
Description:  Calculations the rider target premium to be used for initial face amount guess.  This is used for any premium loads below the target amount.çä çäModification Log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/26/2011 - PAC013 calctype CMC removed extra coverage and coverage option indexçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/14/2008 ILLUS001 pA Phase 2  Initial Calcs.
4a33a897 -2 -2
Description:  Calculations the rider target premium to be used for initial face amount guess.  For the Sum of Charges Method.çä çäModification Log:çä5/20/2011 wmA-J CMC Premium Load Charges enhancement for Premium Taxes (added feeType parm to higher level functions)çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - Remove calcType where SearchCriteria is usedçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/14/2008 ILLUS001 pA Phase 2  Initial Calcs.
4b2664ca -2 -2
Description:  Calculations the rider target premium to be used for initial face amount guess.  For the Present Value Method.çä çäModification Log:çä2/1/2011 - PAC013 calcType - BT - Restructureçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - Remove calcType where SearchCriteria is usedçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/14/2008 ILLUS001 pA Phase 2  Initial Calcs.
35922381 -2 -2
Description:  Calculations the rider target premium to be used for initial face amount guess.  For the Rate File Method.çä çäModification Log:çä2/1/2011 - PAC013 calcType - BT - Restructureçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - Remove calcType where SearchCriteria is usedçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/14/2008 ILLUS001 pA Phase 2  Initial Calcs.
521b0fa9 -2 -2
Description:  Calculations the base target premium to be used for initial face amount guess.  This is used for any premium loads below the target amount.çä çäModification Log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/26/2011 - PAC013 calctype CMC removed extra coverage and coverage option indexçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/14/2008 ILLUS001 pA Phase 2  Initial Calcs.
2e03613d -2 -2
Description:  Sum of the Calculations of  the base target premium to be used for initial face amount guess.  For the Present Value Method.çä çäModification Log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - Remove calcType where SearchCriteria is usedçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/14/2008 ILLUS001 pA Phase 2  Initial Calcs.
ffe715 -2 -2
Description:  Calculations of  the base target premium to be used for initial face amount guess.  For the Present Value Method.çä çäModification Log:çä5/20/2011 wmA-J CMC Premium Load Charges enhancement for Premium Taxes (added feeType parm to higher level functions)çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/14/2008 ILLUS001 pA Phase 2  Initial Calcs.
2283bd86 -2 -2
Description:  Calculations of  the base target premium to be used for initial face amount guess.  For the Present Value Method.çä çäModification Log:çä07/10/2013 PA1401-26 KC added yearIndex parmçä5/20/2011 wmA-J CMC Premium Load Charges enhancement for Premium Taxes (added feeType parm to higher level functions)çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/14/2008 ILLUS001 pA Phase 2  Initial Calcs.
217a409e -2 -2
Description:  Sum of the Calculations of  the base target premium to be used for initial face amount guess.  For the Rate file Method.çä çäModification Log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - Remove calcType where SearchCriteria is usedçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/14/2008 ILLUS001 pA Phase 2  Initial Calcs.
667f4e79 -2 -2
Description:  Calculations of  the base target premium to be used for initial face amount guess.  For the Rate file Method.çä çäModification Log:çä5/20/2011 wmA-J CMC Premium Load Charges enhancement for Premium Taxes (added feeType parm to higher level functions)çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/14/2008 ILLUS001 pA Phase 2  Initial Calcs.
2d922c43 -2 -2
Description:  Calculations of  the base target premium to be used for initial face amount guess.  For the Rate file Method.çä çäModification Log:çä07/10/2013 PA1401-26 KC added yearIndex parmçä5/20/2011 wmA-J CMC Premium Load Charges enhancement for Premium Taxes (added feeType parm to higher level functions)çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/14/2008 ILLUS001 pA Phase 2  Initial Calcs.
700e35cd -2 -2
Description:  Sum of the Calculations of  the base target premium to be used for initial face amount guess.  For the Sum of Charges Method.çä çäModification Log:çä5/20/2011 wmA-J CMC Premium Load Charges enhancement for Premium Taxes (added feeType parm to higher level functions)çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä2/1/2011 - PAC013 calcType - BT - Restructureçä1/12/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/14/2008 ILLUS001 pA Phase 2  Initial Calcs.
662fe2fc -2 -2
Description: This function is used by the solve function to have a function so solve forçä çäModification Log:çä1/12/2011 - PAC013 calcType - BT - Restructureçä10/19/2009 - wdp - CSC Initial function
9610063 -2 -2
Description: Creates a vector used by the solve function.çä çäModification Log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä2/1/2011 - PAC013 calcType - BT - Restructureçä10/19/2009 - wdp - CSC Initial function
37fe1eb2 -2 -2
Description: This function is used by the solve function to have a function so solve for. Specifically for face amount solves.çä çäModification Log:çä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä
26585a8 -2 -2
Description: Returns the Death Benefit Option for  the policy.  This checks to see if the death benefit option is in the vector will be using input functions.çä çäModification Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/14/2008 CMC ILLUS001 pA Phase 2  Updated to add vectorSolveParms as a parameter used to pass death benefit option
7dd2eff7 -2 -2
Description:  Next guess cash value for regula falsi methodçä çäModification Log:çä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä
77acf2e2 -2 -2
Description:  Next guess cash value for regula falsi methodçä çäModification Log:çä02/07/2011 - pA Regression CMC updates for Face Solves and corridor usage in solvesçä1/26/2011 - PAC013 calctype CMC removed extra coverage and coverage option index
4353a7da -2 -2
Description: Face Amount for base coverage & Increasesçä çäModification Log:çä11/30/2012 PAC029 ITR JL - Include all NAR covs, not just base & base increaseçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä06/15/2010 pA RegTest JL Initial Calculation
3b02b62f -2 -2
Description: Function checks whether a admin charge is applicable based on policy durationçä çäModification Log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä2/1/2011 - PAC013 calcType - BT - Restructureçä9/16/2010 - PAC013 calcType - BT - remove calcType parm since can use vectorSearchCriteria to get calcType fromçä10/31/2007 CSC Initial Calculation/Rule
18306bb6 -2 -2
Description:  Fee payment modeçä çäModification log:çä06/28/2010 wmA_ENH992_merge JL Merge wmA changes to Stagingçä
24e6a70 -2 -2
Internal case takes >3 min to run. Export to UTV to Test.
24e6d00 -2 -2
Internal case takes >3 min to run. Export to UTV to Test.
;Offset=00000000
