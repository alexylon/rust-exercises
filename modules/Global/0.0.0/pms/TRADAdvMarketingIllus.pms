;1	08.12.2016 13:29:34	jlawrie2	
X0 19a417c 0 0 0 0 0 0

O0 19a402c 0 0 0 0 0 0

E0 19a409c 0 0 0 0 0 0

L0 19a410c 0 0 0 0 0 0

B0 19a42cc 0 0 0 0 0 0

P3 19a41ec 0 19a6118 0 0 0 2

--description
Advanced marketing illustrations for Traditional Life products.çä çäRELEASE LOG:çäRELEASE 1101 - PAC013 calcType
LICENSENAME
"CSC US internal use only - Workbench"
COMPILERVERSION
"4.7.1    "
P13 19a6118 19a41ec 5040f15e 0 0 0 2
Cash Value Life Products
IncType
mandatory
IncRule

IncValue

OUTPUT Comment
"Advanced Marketing Illustrations - TRAD"
OUTPUT Runtime Version
"1.0.00"
OUTPUT Runtime Date
"12/12/2016"
OUTPUT Source Version Computer
"VPMS_SERVER"
OUTPUT Source Version File
"TRADAdvMarketingIllus.pms"
OUTPUT Source Version Number
'GEN VersionInfo'
OUTPUT Source Version Date
"12/12/2016"
OUTPUT Source Version Author
"CSC"
OUTPUT Source Version Comment
"PA1603 Delivery"
OUTPUT Audit History Block
"12/12/2016 PA1603 Delivery"
P3 5040f15e 19a6118 15961d9d 0 0 0 2
TRAD Illustrations
IncType
mandatory
IncRule

IncValue

P3 15961d9d 5040f15e 0 306232d3 0 50 2
Illustrations@TRADillustrations
IncType
mandatory
IncRule

IncValue

P3 306232d3 5040f15e 0 0 0 50 2
Advanced Illustrations@AdvMarketingIllus
IncType
mandatory
IncRule

IncValue

F0 19a425c 0 554dd14b 0 0 0 0

F1 554dd14b 19a425c 7d6f3d7a 0 0 0 2
:AMI
Funktion

F1 7d6f3d7a 554dd14b 700b4d29 0 0 0 2
:DefComp
Funktion

F1 700b4d29 7d6f3d7a 59be18eb 7c5e4b56 0 0 2
--Model Integration--
Funktion

F1 59be18eb 700b4d29 56dd5579 5b7dd345 0 0 2
AMI DefComp Proj CV(calcType; yearIndex; vectorAMI)
Funktion
IF ('AMI DefComp Use Inputs'("CV") ; çä  'STD Illus CashValue'(yearIndex) ; çä  IF ('ProductType is Whole Life'('PI PolicyProduct PolicyProductTypeCode'('Policy ProductCode';'Policy EffDate')) ; çä    'AMI DefComp Proj WL CV'(calcType;yearIndex;'AMI DefComp Vector WLProj'(calcType;yearIndex;'AMI DefComp VectorBIR'(calcType;yearIndex;vectorAMI);vectorAMI)) ; çä    0çä  )çä)
F1 56dd5579 59be18eb 7f7f542d 0 0 0 2
AMI DefComp Proj WL CV(calcType; yearIndex; vectorWLProj)
Funktion
'WLCashValue Proj Total Cash Value'(calcType;yearIndex;vectorWLProj)
F1 7f7f542d 56dd5579 0 14fb689 0 0 2
AMI DefComp VectorBIR(calcType; yearIndex; vectorAMI)
Funktion
IF ( //BIR coverage existsçä'Std BIR coverage exists'(calcType) ; çä   //Trueçä//TEMP to be updatedçäV_('TGTDB build BIR premium vector'('GEN Vector Blank';calcType;yearIndex;1;'AMI DefComp VectorWithdrawal'(calcType;yearIndex;vectorAMI));'Std BIR CrossoverDuration'(calcType);'SharedVector AMI FaceAmount'(vectorAMI;'Std BIR coverageIndex'(calcType));'Std BIR PremiumEndDuration'(calcType);0 //placeholder for base unitsçä) ; çä   //FalseçäV_(0; //"BIR Prem Vector"çä0; //"BIR Crossover Dur"çä0; //"BIR FA"çä0; //"BIR End Dur"çä'SharedVector AMI FaceAmount'(vectorAMI;'Std BaseCov Index'(calcType)) / 'Policy Coverage ValuePerUnit'(calcType;'Std BaseCov Index'(calcType)) //Base FAçä)çä)
F1 14fb689 56dd5579 0 5ac217c3 0 0 2
AMI DefComp Vector WLProj(calcType; yearIndex; vectorBIR; vectorAMI)
Funktion
V_(VECTORX(coverageIndex;0;'Policy Number Of Coverage'(calcType;yearIndex) - 1;'TGTDB Proj Coverage PremPUAUnits'(calcType;#coverageIndex;yearIndex;vectorBIR;'AMI DefComp VectorWithdrawal'(calcType;yearIndex;vectorAMI)));VECTORX(coverageIndex;0;'Policy Number Of Coverage'(calcType;yearIndex) - 1;'TGTDB Proj Coverage DivPUAUnits'(calcType;#coverageIndex;yearIndex;vectorBIR;'AMI DefComp VectorWithdrawal'(calcType;yearIndex;vectorAMI)));'AMI DefComp VectorLoan'(calcType;yearIndex;vectorAMI); //'AMI DefComp Vector Loans'(yearIndex);âçä'TGTDB Cash Value Vector Build'(calcType;yearIndex;vectorBIR;'AMI DefComp VectorWithdrawal'(calcType;yearIndex;vectorAMI)); // WL CVçä0; //loan interest rateçä'vBIR baseUnits'(vectorBIR) //base units - WL Mix Face Amount Solve  çä)
F1 5ac217c3 56dd5579 0 3b38cbc4 0 0 2
AMI DefComp VectorWithdrawal(calcType; yearIndex; vectorAMI)
Funktion
VECTORX(yrIdx;1;yearIndex;'AMI DefComp Annual Surrender'(calcType;#yrIdx;vectorAMI))
F1 3b38cbc4 56dd5579 0 0 0 0 2
AMI DefComp VectorLoan(calcType; yearIndex; vectorAMI)
Funktion
VECTORX(yrIdx;1;yearIndex;'AMI DefComp Annual Loan'(calcType;#yrIdx;vectorAMI))
F1 5b7dd345 700b4d29 568088e0 79ea4c80 0 0 2
AMI DefComp Proj DB(calcType; yearIndex; vectorAMI)
Funktion
IF ('AMI DefComp Use Inputs'("DB") ; çä  'STD Illus DeathBenefit'(yearIndex) ; çä  IF ('ProductType is Whole Life'('PI PolicyProduct PolicyProductTypeCode'('Policy ProductCode';'Policy EffDate')) ; çä    'AMI DefComp Proj WL DB'(calcType;yearIndex;vectorAMI) ; çä    0çä  )çä)
F1 568088e0 5b7dd345 787ae306 d746d0b 0 0 2
AMI DefComp Proj WL DB(calcType; yearIndex; vectorAMI)
Funktion
'AMI DefComp Projected Total Death Benefit Unadjusted'(calcType;yearIndex;'AMI DefComp VectorBIR'(calcType;yearIndex;vectorAMI);'AMI DefComp VectorWithdrawal'(calcType;yearIndex;vectorAMI))
F1 787ae306 568088e0 0 0 0 0 2
AMI DefComp Projected Total Death Benefit Unadjusted(calcType; yearIndex; vectorBIR; vectorWithdrawal)
Funktion
SUMX(coverageIndex;0;'Policy Number Of Coverage'(calcType;yearIndex) - 1;IF ( /*base or increase and inforce*/ ('IndicatorCode is Base'('Policy Coverage IndicatorCode'(calcType;#coverageIndex)) || 'IndicatorCode is BaseIncrease'('Policy Coverage IndicatorCode'(calcType;#coverageIndex))) && 'Std Coverage Is InForce'(calcType;#coverageIndex;'Increase Date By Years'('Policy EffDate';yearIndex);yearIndex) ; çä   //true - calculate death benefitçä'vBIR baseUnits'(vectorBIR) * 1000 + 'TGTDB Proj Coverage PUA FaceAmount'(calcType;#coverageIndex;yearIndex;vectorBIR;vectorWithdrawal) ; çä   // Else - rider benefitsçäIF ( /*Is coverage an integrated rider*/ 'IndicatorCode is Integrated'('Policy Coverage IndicatorCode'(calcType;#coverageIndex)) ; çä    IF ( /*Coverage is BIR?*/ 'Coverage Type is BIR'(calcType;#coverageIndex) ; çä       //Yesçä'TGTDB Proj BIR Adjusted VPU end year'(calcType;yearIndex;vectorBIR;vectorWithdrawal) * 'TGTDB Proj BIR Adjusted NumberofUnits'(calcType;yearIndex;vectorBIR;vectorWithdrawal) + 'TGTDB Proj Coverage PUA FaceAmount'(calcType;#coverageIndex;yearIndex;vectorBIR;vectorWithdrawal) ; çä       //No - çäIF ( /*Coverage is PUAR?*/ 'LifeCovType is PUAR'('PI CoverageProduct LifeCovTypeCode'(calcType;'Policy Coverage ProductCode'(calcType;#coverageIndex);#coverageIndex;TransEffDate)) ; çä         //Yesçä'TGTDB Proj Coverage PUA FaceAmount'(calcType;#coverageIndex;yearIndex;vectorBIR;vectorWithdrawal) ; çä         //No - standard coverageçä'Policy Coverage CurrentNumberOfUnits'(calcType;#coverageIndex;yearIndex) * 'PI CoverageProduct ValuePerUnit'(calcType;'Policy Coverage ProductCode'(calcType;#coverageIndex);#coverageIndex;'Policy EffDate') + 'TGTDB Proj Coverage PUA FaceAmount'(calcType;#coverageIndex;yearIndex;vectorBIR;vectorWithdrawal)çä      )çä  ) ; çä // Else 0çä0çä)çä))
F1 d746d0b 5b7dd345 0 0 0 0 2
AMI DefComp Projected Loan Balance(calcType; yearIndex; vectorAMI)
Funktion
IF ('ProductType is Whole Life'('PI PolicyProduct PolicyProductTypeCode'('Policy ProductCode';'Policy EffDate')) ; çä  'Loan Total Projected Balance'(calcType;yearIndex;'AMI DefComp Vector WLProj'(calcType;yearIndex;'AMI DefComp VectorBIR'(calcType;yearIndex;vectorAMI);vectorAMI)) ; çä  0çä)
F1 79ea4c80 700b4d29 0 0 0 0 2
AMI DefComp Proj Net DB(calcType; yearIndex; vectorAMI)
Funktion
IF ('AMI DefComp Use Inputs'("DB") ; çä  'STD Illus NetDeathBenefit'(yearIndex) ; çä  'AMI DefComp Proj DB'(calcType;yearIndex;vectorAMI) - 'AMI DefComp Projected Loan Balance'(calcType;yearIndex;vectorAMI)çä)
F1 7c5e4b56 7d6f3d7a 496c360e 49269814 0 0 2
--FA Solves--
Funktion

F1 496c360e 7c5e4b56 0 16445d1a 0 0 2
AMI DefComp FaceSolve FaceAmount(calcType)
Funktion
'GEN Ceil'(IF ('AMI DefComp Calc is WL SellPremSolve' ; çä  'AMI DefComp WL FaceSolve SellPrem'(calcType) ; çä  IF ('AMI DefComp Calc is WL CostRecoverySolve' ; çä    'AMI DefComp Solve CostRecovery Face'(calcType) ; çä    0çä  )çä);0)
F1 16445d1a 7c5e4b56 7ad3dea6 3fa5d974 0 0 2
--WL Sell Prem--
Funktion

F1 7ad3dea6 16445d1a 0 0 0 0 2
AMI DefComp WL FaceSolve SellPrem(calcType)
Funktion
'WLFaceSolves Face Amount Solve Sell Premium using Solve'(calcType)
F1 3fa5d974 7c5e4b56 4c50e1a0 0 0 0 2
--WL Cost Recovery Solve--
Funktion

F1 4c50e1a0 3fa5d974 256b7169 6e14c41a 0 0 2
--AMI DefComp Solve CostRecovery Face(calcType)
Funktion
SOLVE(1;// solve methodçäâFUNCREF('AMI DefComp Solve Cummulative CostRecoved VectorParms'); //solve functionçäâ0;//funcref for derivertiveçäâ0;//targetçäâ100000;//initial guess guessçäâ1;//Guess toleranceçäâ50000;//lowboundçäâ1000000; //highboundçäâ100; //max iterationsçäâv_(calcType; çäââ//'AMI DefComp STD Illus Retirement BenefitPeriod'; çäââ'AMI DefComp STD Illus AssumedMortDuration'(calcType);çäââ'AMI DefComp VectorAMI Empty'çäâ) //parmsçä)
F1 256b7169 4c50e1a0 0 5d377707 0 0 2
--AMI DefComp Solve Cummulative CostRecoved VectorParms(baseFace; vectorSolveParms)
Funktion
'AMI DefComp Solve IA Cumulative Gain or Loss on Death'(çäâE_(vectorSolveParms; 0); çäâE_(vectorSolveParms; 1); çäâçäâ'AMI DefComp VectorAMI UpdateLoans'(E_(vectorSolveParms; 0); E_(vectorSolveParms; 1);çäâ'AMI DefComp VectorAMI UpdateSurrenders'(E_(vectorSolveParms; 0); E_(vectorSolveParms; 1); çäâ'AMI DefComp VectorAMI UpdatePremiums'(E_(vectorSolveParms; 0); E_(vectorSolveParms; 1); çäââ'SharedVector AMI ReplaceFaceAmount'(çäâââbaseFace; çäâââ'Std BaseCov Index'(calcType); çäâââE_(vectorSolveParms; 2)çäââ)çäâ)çäâ)çäâ)çä)
F1 5d377707 4c50e1a0 0 0 0 0 2
AMI DefComp Solve IA Cumulative Gain or Loss on Death(calcType; yearIndex; vectorAMI)
Funktion
IF ('AMI DefComp Cummulative CostRecoved'(calcType;yearIndex;vectorAMI) ; çä   //&& 'AMI DefComp Cummulative LoanIncomeTaken'(calcType; yearIndex; vectorAMI);çä'AMI DefComp IA Cumulative Gain or Loss on Death'(calcType;yearIndex;vectorAMI) ; çä  -1çä)
F1 6e14c41a 3fa5d974 0 7cbe8f4c 0 0 2
AMI DefComp MaxLoan Available(calcType; yearIndex; vectorAMI)
Funktion
'Loan Projected Maximum Loan Amount Start of Year'(calcType;yearIndex;'AMI DefComp Vector WLProj'(calcType;yearIndex;'AMI DefComp VectorBIR'(calcType;yearIndex;vectorAMI);vectorAMI))
F1 7cbe8f4c 3fa5d974 1f50f8e4 742716ed 0 0 2
AMI DefComp LoanIncomeTaken(calcType; yearIndex; vectorAMI)
Funktion
'SharedVector AMI Loan'(vectorAMI;yearIndex) > 0 && 'SharedVector AMI Loan'(vectorAMI;yearIndex) <= 'AMI DefComp MaxLoan Available'(calcType;yearIndex;vectorAMI)
F1 1f50f8e4 7cbe8f4c 0 3e516984 0 0 2
AMI DefComp Cummulative LoanIncomeTaken(calcType; yearIndex; vectorAMI)
Funktion
IF (yearIndex = 0 ; çä  1 ; çä  IF ('AMI DefComp LoanIncomeTaken'(calcType;yearIndex;vectorAMI) ; çä    'AMI DefComp Cummulative LoanIncomeTaken'(calcType;yearIndex - 1;vectorAMI) ; çä    0çä  )çä)
F1 3e516984 7cbe8f4c 3ade5e9 0 0 0 2
AMI DefComp LoanIncomeShortage(calcType; yearIndex; vectorAMI)
Funktion
'AMI DefComp MaxLoan Available'(calcType;yearIndex;vectorAMI) - 'SharedVector AMI Loan'(vectorAMI;yearIndex)
F1 3ade5e9 3e516984 0 62d6da54 0 0 2
AMI DefComp LastLoanIncomeShortage(calcType; yearIndex; vectorAMI)
Funktion
'AMI DefComp LoanIncomeShortage'(calcType;IF ('AMI DefCompLastLoan'(calcType;yearIndex;vectorAMI) = 0 ; çä  yearIndex ; çä  'AMI DefCompLastLoan'(calcType;yearIndex;vectorAMI)çä);vectorAMI)
F1 62d6da54 3e516984 0 0 0 0 2
AMI DefCompLastLoan(calcType; yearIndex; vectorAMI)
Funktion
IF (yearIndex = 0 ; çä  0 ; çä  IF ('SharedVector AMI Loan'(vectorAMI;yearIndex) > 0 ; çä    yearIndex ; çä    'AMI DefCompLastLoan'(calcType;yearIndex - 1;vectorAMI)çä  )çä)
F1 742716ed 3fa5d974 0 73c6a226 0 0 2
AMI DefComp Solve CostRecovery UpdateAMIVector(calcType; yearIndex; baseFace)
Funktion
'AMI DefComp VectorAMI UpdateLoans'(calcType;yearIndex;'AMI DefComp VectorAMI UpdateSurrenders'(calcType;yearIndex;'AMI DefComp VectorAMI UpdatePremiums'(calcType;yearIndex;'SharedVector AMI ReplaceFaceAmount'(baseFace;'Std BaseCov Index'(calcType);'AMI DefComp VectorAMI Empty'))))
F1 73c6a226 3fa5d974 7d84edc7 0 0 0 2
AMI DefComp Solve CostRecovery Face(calcType)
Funktion
E_('AMI DefComp Solve CostRecovery Face Rec'(calcType;'AMI DefComp Solve CostRecovery UpdateAMIVector'(calcType; //'AMI DefComp STD Illus Retirement BenefitPeriod'; çä'AMI DefComp STD Illus AssumedMortDuration'(calcType);100000);0; //'AMI DefComp FaceSolve Proj CV'(calcType; 'AMI DefComp STD Illus Retirement BenefitPeriod'; vectorAMI); çä'AMI DefComp Solve CostRecovery Criteria'(calcType; //'AMI DefComp STD Illus Retirement BenefitPeriod'; çä'AMI DefComp STD Illus AssumedMortDuration'(calcType);'AMI DefComp Solve CostRecovery UpdateAMIVector'(calcType; //'AMI DefComp STD Illus Retirement BenefitPeriod'; çä'AMI DefComp STD Illus AssumedMortDuration'(calcType);100000));100000; //currFaceAmountGuessçä0; //prevFaceAmountGuessçä'AMI DefComp FaceSolve Initial LowBound'; //lowBoundçä'AMI DefComp FaceSolve Initial HighBound'; //highBoundçä1; //iteration_numçä//'AMI DefComp STD Illus Retirement BenefitPeriod'; //targetDurçä'AMI DefComp STD Illus AssumedMortDuration'(calcType);100);0)
F1 7d84edc7 73c6a226 0 62454a63 0 0 2
AMI DefComp Solve CostRecovery Face Rec(calcType; vectorAMI; CVTarget; prevCV; currFaceAmountGuess; prevFaceAmountGuess; lowBound; highBound; iteration_num; targetDur; stopIter)
Funktion
IF ( //CV criteria matched, or max number of iterations reachedçä(iteration_num >= stopIter) //|| (ABS(CVTarget - 'AMI DefComp Proj CV'(calcType; targetDur; 'SharedVector AMI ReplaceFaceAmount'(currFaceAmountGuess; 'Std BaseCov Index'(calcType); vectorAMI))) < 'AMI DefComp FaceSolve Tolerance')çä || (ABS(CVTarget - 'AMI DefComp Solve CostRecovery Criteria'(calcType;targetDur;'AMI DefComp Solve CostRecovery UpdateAMIVector'(calcType;targetDur;currFaceAmountGuess))) < 'AMI DefComp FaceSolve Tolerance') || (iteration_num > 1 && (ABS(lowBound - highBound) < 'AMI DefComp FaceSolve Tolerance')) ; çä   // Return vector of values (for debugging)çäv_(currFaceAmountGuess;prevFaceAmountGuess;prevCV;lowBound;highBound;iteration_num) ; çä   //  Else, return error message if solve unsuccessfulçäIF ( //max number of iterations reachedçäiteration_num > 100 ; çä     //return error messageçä'Messages SystemMessage'("CA1044";'Message Language';'GEN Vector Blank') ; çä     // Else, recurse with updated valuesçä'AMI DefComp Solve CostRecovery Face Rec'(calcType;vectorAMI; //Target remains constantçäCVTarget; //Update CV based on current FA guessçä'AMI DefComp Solve CostRecovery Criteria'(calcType;targetDur;'AMI DefComp Solve CostRecovery UpdateAMIVector'(calcType;targetDur;currFaceAmountGuess)); //New current face Aount guessçä'AMI DefComp Solve CostRecovery Guess'(CVTarget;prevCV;currFaceAmountGuess;lowBound;highBound); //New previous Face amount guess   çäcurrFaceAmountGuess; //LowBoundâçä'AMI DefComp Solve CostRecovery LowBound'(calcType;CVTarget;lowBound;targetDur;'AMI DefComp Solve CostRecovery UpdateAMIVector'(calcType;targetDur;currFaceAmountGuess)); //HighBoundçä'AMI DefComp Solve CostRecovery HighBound'(calcType;CVTarget;highBound;targetDur;'AMI DefComp Solve CostRecovery UpdateAMIVector'(calcType;targetDur;currFaceAmountGuess)); //Increase iteration numberçäiteration_num + 1; //TargetDuration remains unchangedçätargetDur; //StopIter remains unchangedçästopIter)çä  )çä)
F1 62454a63 73c6a226 0 21d2ed14 0 0 2
AMI DefComp Solve CostRecovery LowBound(calcType; CVTarget; lowBound; targetDur; vectorAMI)
Funktion
IF ( //Face amount guess too lowçäCVTarget > 'AMI DefComp LastLoanIncomeShortage'(calcType;targetDur;vectorAMI) ; çä   //Face Amount guess was too low, increase lower boundçäMAX(lowBound;'SharedVector AMI FaceAmount'(vectorAMI;'Std BaseCov Index'(calcType))) ; çä   //Else face amount guess was too high.  Keep lower bound the sameçälowBoundçä)
F1 21d2ed14 73c6a226 0 1bda689f 0 0 2
AMI DefComp Solve CostRecovery HighBound(calcType; CVTarget; highBound; targetDur; vectorAMI)
Funktion
IF ( //FaceAmount guess too highçäCVTarget < 'AMI DefComp LastLoanIncomeShortage'(calcType;targetDur;vectorAMI) ; çä   //Face Amount guess was too high, lower high boundâçäMIN(highBound;'SharedVector AMI FaceAmount'(vectorAMI;'Std BaseCov Index'(calcType))) ; çä   //Else faceAmount guess was too low.  Keep high bound the sameçähighBoundçä)
F1 1bda689f 73c6a226 0 4b09bede 0 0 2
AMI DefComp Solve CostRecovery Guess(CVTarget; prevCV; currFaceAmountGuess; lowBound; highBound)
Funktion
IF ( /*Premium guess too low*/ CVTarget > prevCV ; çä   /*Yes - try higher*/ (MAX(lowBound;currFaceAmountGuess) + highBound) * 0.5 ; çä   /*No - try lower*/ (lowBound + MIN(highBound;currFaceAmountGuess)) * 0.5çä)
F1 4b09bede 73c6a226 0 0 0 0 2
AMI DefComp Solve CostRecovery Criteria(calcType; yearIndex; vectorAMI)
Funktion
IF ('AMI DefComp LastLoanIncomeShortage'(calcType;yearIndex;vectorAMI) < 0 || 'AMI DefComp Cummulative CostRecoved'(calcType;yearIndex;vectorAMI) ; çä  'AMI DefComp LastLoanIncomeShortage'(calcType;yearIndex;vectorAMI) ; çä  'AMI DefComp IA Cumulative Gain or Loss on Death'(calcType;yearIndex;vectorAMI)çä)
F1 49269814 7d6f3d7a 41fabcea 0 0 0 2
--Insurance Costs--
Funktion

F1 41fabcea 49269814 702efa9 0 0 0 2
AMI DefComp Annual Premium(calcType; yearIndex; vectorAMI)
Funktion
IF ('SharedVector AMI Premium Passed'(vectorAMI) ; çä  'SharedVector AMI Premium'(vectorAMI;yearIndex) ; çä  IF ('AMI DefComp Year is Before Retirement'(calcType;yearIndex) ; çä     //'AMI DefComp Year is Before AssumedMortDuration'(yearIndex);âçäIF (NOT('AMI DefComp Use Inputs'('CalcType PREM Identifier')) ; çä      'WLFaceSolves Total Mode Premium'(calcType;'SharedVector AMI FaceAmount'(vectorAMI;'Std BaseCov Index'(calcType)) * 0.001) ; çä      IF ('Illustration Type is DeferredComp SalaryDeferral'('STD Illus Type Code') ; çä        'AMI DefComp Compensation Basis for Benefit'(calcType;yearIndex;vectorAMI) * 0.01 * ('STD Illus Exec SalaryReductionRate'(yearIndex) + 'STD Illus Corp SalaryContributionRate'(yearIndex)) ; çä        'STD Illus Annual Premium'(yearIndex)çä      )çä  ) ; çä0çä)çä)
F1 702efa9 41fabcea 0 514e8b63 0 0 2
AMI DefComp Cumulative Premium(calcType; yearIndex; vectorAMI)
Funktion
IF (yearIndex = 1 ; çä  'AMI DefComp Annual Premium'(calcType;yearIndex;vectorAMI) ; çä  'AMI DefComp Annual Premium'(calcType;yearIndex;vectorAMI) + 'AMI DefComp Cumulative Premium'(calcType;yearIndex - 1;vectorAMI)çä)
F1 514e8b63 41fabcea 0 0 0 0 2
AMI DefComp Maximum Premium(calcType; yearIndex; vectorAMI)
Funktion
IF (yearIndex = 1 ; çä  'AMI DefComp Annual Premium'(calcType;yearIndex;vectorAMI) ; çä  MAX('AMI DefComp Annual Premium'(calcType;yearIndex;vectorAMI);'AMI DefComp Cumulative Premium'(calcType;yearIndex - 1;vectorAMI))çä)
A0 19a433c 0 0 0 0 0 0

T0 19a43ac 0 0 0 0 0 0

I0 19a441c 0 6edb792a 0 0 0 0

I0 6edb792a 19a441c 0 5e625ce4 0 0 0
TRADillustrations.pms
I0 5e625ce4 19a441c 0 0 0 0 0
AdvMarketingIllus.pms
-
O0
E0
L0
B0
P1
19a6118
F1
554dd14b
A0
T0
!35
59be18eb -2 -2
Description: Projected CVçä çäModification Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/23/09 - PAC02 - JL - Renamed, reparametrizedçä11/11/09 - PAC02 - JL - Initial Calculation
56dd5579 -2 -2
Description: Projected WL CVçä çäModification Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/23/09 - PAC02 - JL - Renamed, reparametrized. Change to passed vectors.çä11/11/09 - PAC02 - JL - Initial Calculation
7f7f542d -2 -2
Description: VectorBIR for AMI calcsçä çäModification Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/23/09 - PAC02 - JL - Renamed, reparametrized. Update values passed.çä11/16/09 - PAC002 - JL - Add commentçä11/12/09 - PAC02 - JL - Initial Calculation
14fb689 -2 -2
Description: WLProj vector for AMI SERPçä çäModification Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/23/09 - PAC02 - JL - Renamed, reparametrized. Update values being passed.çä11/23/09 - PAC02 - JL - Use correct format for Loans Vector.çä11/16/09 - PAC002 - JL - Initial Calculation
5ac217c3 -2 -2
Description: Vector of Withdrawals as used in WL models.çä çäModification Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/23/09 - PAC02 - JL - Initial Calculation
3b38cbc4 -2 -2
Description: Vector of Loans as used in the WLProj vector.çä çäModification Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/23/09 - PAC02 - JL - Initial Calculation
5b7dd345 -2 -2
Description: Projected DBçä çäModification Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/23/09 - PAC02 - JL - Renamed, reparametrizedçä11/11/09 - PAC02 - JL - Initial Calculation
568088e0 -2 -2
Description: Projected WL DBçä çäModification Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä12/09/09 - PAC02 - JL - Remove Loan form total DBçä11/23/09 - PAC02 - JL - Renamed, reparametrized. Change to passed vectors.çä11/11/09 - PAC02 - JL - Initial Calculation
787ae306 -2 -2
Description:  Total projected death benefit at year "yearIndex" unadjusted for definition of life insurance laws.çä çäModification Log:çä04/06/2011 CMC wmA Integration merge regression Update Policy Coverage LifeCovTypeCode to PI CoverageProduct LifeCovTypeCodeçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/23/09 - PAC02 - JL - Initial Calculation
d746d0b -2 -2
Description: Returns the total loan balance due.çä çäModification Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/24/2009 PAC002 DT allowed for ULçä11/23/09 - PAC02 - JL - Initial Calculation
79ea4c80 -2 -2
Description: Net Death Benefitçä çäModification Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä01/13/09 - PAC02 - JL - Check if value from input is to be usedçä12/09/09 - PAC02 - JL - Initial Calculation
7c5e4b56 -2 -2
Description: Calculation of Face Amount for Solveçä çäModification Log:çä11/10/09 - PAC02 - JL - Initial Calculation
496c360e -2 -2
Description: Returns the relevant solved Base Face Amount.çä çäModification Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/26/09 - PAC02 - DT - replaced AMI DefComp STD Illus Retirement BenefitPeriod with AMI DefComp STD Illus AssumedMortDurationçä11/25/09 - PAC02 - JL - Round up to higher dollarçä11/23/09 - PAC02 - JL - Add WL CostRecovery caseçä11/12/09 - PAC02 - JL - Initial Calculationçä
16445d1a -2 -2
Description: Calculation of WL Sell Prem Face Amount for Solveçä çäModification Log:çä11/23/09 - PAC02 - JL - Initial Calculation
7ad3dea6 -2 -2
Description: WL Sell Premium Face Amount (solved)çä çäModification Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/23/09 - PAC02 - JL - Renamed, reparametrized.çä11/17/2009 PAC002 DT added function to call from WLFaceSolves
3fa5d974 -2 -2
Description: Calculation of WL Cost Recovery Face Amount for Solveçä çäModification Log:çä11/23/09 - PAC02 - JL - Initial Calculation
4c50e1a0 -2 -2
Description: Solve function for WL COst Recovery Face Amount.çä çäModificatioon Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/26/09 - PAC02 - DT - replaced AMI DefComp STD Illus Retirement BenefitPeriod with AMI DefComp STD Illus AssumedMortDurationçä11/25/09 - PAC02 - JL - Replaced "New Solve", to be deletedçä11/23/09 - PAC02 - JL - Initial Calculation
256b7169 -2 -2
Description: Cumulative Gain/Loass on Death function call for Cost Recovery Solves (WL)çä çäModification Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/25/09 - PAC02 - JL - Replaced "New Solve", to be deletedçä11/23/09 - PAC02 - JL - Initial Calculation
5d377707 -2 -2
Description: Cumulative Gain/Loass on Death function call for Cost Recovery Solves (WL)çä çäModification Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/25/09 - PAC02 - JL - To be deletedçä11/23/09 - PAC02 - JL - Initial Calculation
6e14c41a -2 -2
Description: Returns the maximum loan available in a particular yearçä çäModification Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/25/09 - PAC02 - JL - Initial Function
7cbe8f4c -2 -2
Description: Returns 1 if the loan requested in a particular year is available to be taken. çä çäModification Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/25/09 - PAC02 - JL - Initial Function
1f50f8e4 -2 -2
Description: Returns 1 if all loan income requested is taken from duration 0 to yearIndex.çä çäModification Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/25/09 - PAC02 - JL - Initial Function
3e516984 -2 -2
Description: Returns the excess of the loan available to the loan requested.çä çäModification Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/25/09 - PAC02 - JL - Initial Function
3ade5e9 -2 -2
Description: Returns the excess of the loan available to the loan requested in the last year that a loan is taken. çä çäModification Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/25/09 - PAC02 - JL - Initial Function
62d6da54 -2 -2
Description: Year in which last loan is requested.çä çäModification Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/25/09 - PAC02 - JL - Initial Calculation
742716ed -2 -2
Description: Builds the AMI vector for a given face amountçä çäModification Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/25/09 - PAC02 - JL - Initial Function
73c6a226 -2 -2
Description: Solve call for Face Amountçä çäModification Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/26/09 - PAC02 - DT - replaced AMI DefComp STD Illus Retirement BenefitPeriod with AMI DefComp STD Illus AssumedMortDurationçä11/25/09 - PAC02 - JL - Initial Function
7d84edc7 -2 -2
Description: Solve recursion for Face Amountçä çäModification Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/25/09 - PAC02 - JL - Initial Function
62454a63 -2 -2
Description:  Returns a face amount low boundçä çäModification logçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/25/09 - PAC02 - JL - Initial Function
21d2ed14 -2 -2
Description:  Returns a face amount high boundçä çäModification logçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/25/09 - PAC02 - JL - Initial Function
1bda689f -2 -2
Description:  Returns a face amount guess based on the bisection methodçä çäModification logçä11/25/09 - PAC02 - JL - Initial Function
4b09bede -2 -2
Description: Criteria for WL CostRecovery Face Amount Solve. If all loan income cannot be taken, return the shortage (as -). Also ensure that Cost Recovery is adhered to.çä çäModification Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/25/09 - PAC02 - JL - Initial Function
41fabcea -2 -2
Description: The amount of current premium due.çä çäModification Log:çä5/12/2011 - PAC013 calcType - BT - Moved calcType functions into CalcType modelçä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä01/19/10 - PAC02 - JL - Modify Prem calc for SDEF to %s (employee + company) of compensationçä01/13/10 - PAC02 - JL - Reverse 11/26/09 changeçä11/26/09 - PAC02 - DT - replaced AMI DefComp Year is Before Retirement with AMI DefComp Year is Before AssumedMortDurationçä11/23/09 - PAC02 - JL - Renamed, reparametrized. Check vector for value, else calculateçä10/06/09 - PAC02 - JL - Initial Calculationçä
702efa9 -2 -2
Description: The sum of premiums due.çä çäModification Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/23/09 - PAC02 - JL - Renamed, reparametrizedçä10/06/09 - PAC02 - JL - Initial Calculation
514e8b63 -2 -2
Description: The maximum amount of current and previuos premiums.çä çäModification Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä11/23/09 - PAC02 - JL - Renamed, reparametrizedçä10/06/09 - PAC02 - JL - Initial Calculation
;Offset=00000000
