;1	08.12.2016 13:38:32	jlawrie2	
X0 2c8baf8 0 2c9b030 0 0 0 0

X0 2c9b030 2c8baf8 2c9b0d8 0 0 0 0
-- All Tests - IllustrationFunctions --
X0 2c9b0d8 2c9b030 2c9b170 2f4e3d8 0 0 0
--Lists--
X1 2c9b170 2c9b0d8 2c9b260 2f4e080 0 0 2
Illus List Requested - true
Illus List Requested(-1)
1
X1 2c9b260 2c9b170 0 0 0 0 2
Illus List Requested - false
Illus List Requested(2)
0
X1 2f4e080 2c9b0d8 0 300aee0 0 0 2
Illus List Lower Bound
Illus List Lower Bound("C")
1
X1 300aee0 2c9b0d8 0 2f4df80 0 0 2
Illus List Zero All Returns Delimited
Illus List Zero All Returns Delimited(1; 3)
0#0#0
X1 2f4df80 2c9b0d8 0 0 0 0 2
Illus List Bounds - false
Illus List Bounds("C";2)

X0 2f4e3d8 2c9b030 2f78a60 2f78c30 0 0 0
--Blocks--
X1 2f78a60 2f4e3d8 2f78bb8 2f78968 0 0 2
Illus Block Requested - true
Illus Block Requested(-1; -1)
1
X1 2f78bb8 2f78a60 0 2f78d30 0 0 2
Illus Block Requested - false
Illus Block Requested(-1; 0)
0
X1 2f78d30 2f78a60 0 0 0 0 2
Illus Block Requested - false1
Illus Block Requested(0; -1)
0
X1 2f78968 2f4e3d8 0 0 0 0 2
Illus Block Coverage Bounds - false
Illus Block Coverage Bounds("C";-1;-1)

X6 2f78c30 2c9b030 0 2c8d318 0 0 2
Illus Element Number - C
Illus Element Number("C";"C")
2
INPUT Policy number of Coverage
2
Input TransEffDate
01/01/2006
INPUT Calling Program
VPMSTEST
INPUT Calling System
I1
INPUT Illus FaceAmtDesignType
1000500001
X1 2c8d318 2c9b030 0 2c8d498 0 0 2
Illus List Bounds WSP - true
Illus List Bounds WSP("C";-2)
1-65
X1 2c8d498 2c9b030 0 2c8ec08 0 0 2
Illus List Upper Bound WSP
Illus List Upper Bound WSP
65
X1 2c8ec08 2c9b030 0 0 0 0 2
Illus Insert Column Delimiter
Illus Insert Column Delimiter
*
O0 2c8b9b4 0 0 0 0 0 0

E0 2c8ba20 0 0 0 0 0 0

L0 2c8ba8c 0 0 0 0 0 0

B0 2c8bc3c 0 0 0 0 0 0

P3 2c8bb64 0 2c8f208 0 0 0 2

--description
Common model for illustration functions.çä çäIncludes common delimiter, list and blocking functions.çä çäRELEASE LOG:çäRELEASE 1301 - SCARAB/JIRA issues PAD912, PAD902çäRELEASE 1101 - PAC013 calcType
LICENSENAME
"csc us internal use only - workbench"
COMPILERVERSION
"4.5.3"
P13 2c8f208 2c8bb64 0 0 0 0 2
Illustration Functions
IncType
mandatory
IncRule

IncValue

OUTPUT Comment
"Common Illustration Functions model"
OUTPUT Runtime Version
"1.0.0"
OUTPUT Runtime Date
"04/22/2016"
OUTPUT Source Version Computer
"VPMS_SERVER"
OUTPUT Source Version File
"IllustrationFunctions.pms"
OUTPUT Source Version Number
'GEN VersionInfo'
OUTPUT Source Version Date
"04/22/2016"
OUTPUT Source Version Author
"CSC"
OUTPUT Source Version Comment
"PA1603 Delivery"
OUTPUT Audit History Block
"04/22/2016 PA1601 Delivery"
F0 2c8bbd0 0 6641adeb 0 0 0 0

F1 6641adeb 2c8bbd0 350fbb9f 0 0 0 2
:ILLUS
Funktion

F1 350fbb9f 6641adeb 69c95d0a 2c8f5c8 0 0 2
-- Utility --
Funktion

F1 69c95d0a 350fbb9f 0 45b4758 0 0 2
ILLUS Default(yearIndex)
Funktion
IF (yearIndex < 0 ; çä  "" ; çä  0çä)
F1 45b4758 350fbb9f 3ef0aa69 63c197e 0 0 2
ILLUS List Test(rateAssumption;yearIndex)
Funktion
IF (yearIndex > 'ILLUS Maturity Duration' - 1 ; çä  "" ; çä  CASE(yearIndex;çä    "-3" : "";çä    "-2" : 'ILLUS Maturity Duration' - 1;çä    "-1" : 'Illus List Creator format'(FUNCREF('ILLUS test function');V_(rateAssumption);'ILLUS Maturity Duration' - 1;2);çä     : 'Illus Format To'('ILLUS test function'(rateAssumption;yearIndex);2))çäçä)
F1 3ef0aa69 45b4758 0 0 0 0 2
ILLUS test function(a;b)
Funktion
12.43
F1 63c197e 350fbb9f 3a019a14 0 0 0 2
-- N/A --
Funktion

F1 3a019a14 63c197e 5415cf2b 0 0 0 2
Not Applicable
Funktion
"NULL"
F1 5415cf2b 3a019a14 0 0 0 0 2
Not Applicable String
Funktion
"n/a"
F1 2c8f5c8 6641adeb 2c8f9d0 2c903a8 0 0 2
-- Delimiter --
Funktion

F1 2c8f9d0 2c8f5c8 2c8fbb0 2c8ff80 0 0 2
Illus Delimiter(ind)
Funktion
IF ( /*Line Delimiter?*/ ind ALIKE "1" ; çä   /*Yes - Line*/ "*" ; çä   /*No - Column*/ "#"çä)
F1 2c8fbb0 2c8f9d0 0 2c8fda0 0 0 2
Illus Column Delimiter Constant
Funktion
1
F1 2c8fda0 2c8f9d0 0 0 0 0 2
Illus EndOfRow Delimiter Constant
Funktion
2
F1 2c8ff80 2c8f5c8 0 2c90168 0 0 2
Illus Insert Column Delimiters(vectorDataString)
Funktion
V_STRING(vectorDataString;'Illus Delimiter'('Illus Column Delimiter Constant'))
F1 2c90168 2c8f5c8 0 2c90288 0 0 2
Illus Insert Column Delimiter
Funktion
'Illus Delimiter'('Illus Column Delimiter Constant')
F1 2c90288 2c8f5c8 0 0 0 0 2
Illus Insert EndOfRow Delimiter
Funktion
'Illus Delimiter'('Illus EndOfRow Delimiter Constant')
F1 2c903a8 6641adeb 2c90598 0 0 0 2
-- List Functions for Single Indexed Outputs --
Funktion

F1 2c90598 2c903a8 3d0a5bdb 2c90878 0 0 2
-- yearIndex = -1 --
Funktion

F1 3d0a5bdb 2c90598 0 65b85be5 0 0 2
ILLUS Output(FunctionReference;decimals;ParmList;yearIndex)
Funktion
IF (yearIndex > 'ILLUS Maturity Duration' - 1 ; çä  "" ; çä  CASE(yearIndex;çä    "-3" : "";çä    "-2" : 'ILLUS Maturity Duration' - 1;çä    "-1" : 'Illus List Creator format'(FunctionReference;ParmList;'ILLUS Maturity Duration' - 1;decimals);çä     : 'Illus Format To'('Illus Call Function'(FunctionReference;ParmList;yearIndex);decimals))çäçä)
F1 65b85be5 2c90598 c35e223 2c90670 0 0 2
Illus List Creator format(FunctionReference; ParmList; EndCounter; Decimals)
Funktion
 /* If rate assumption is income and does not apply then return null*///IF('Err DVMessage Hard Error Occurs';çä//â'DVMessages DataValidationMessage'('Err DVMessage Hard Error Code';'Message Language';v_("";"";""));çä V_STRING(VECTORX(Ind;1;EndCounter;'Illus Format To'('Illus Call Function'(FunctionReference;ParmList;#Ind);Decimals));'Illus Delimiter'(2))
F1 c35e223 65b85be5 0 7bda550d 0 0 2
Illus Call Function(FunctionReference; ParmList;yearIndex)
Funktion
CASE(V_LENGTH(ParmList);çä  0 : DOCALL(FunctionReference;yearIndex);çä  1 : DOCALL(FunctionReference;E_(ParmList;0);yearIndex);çä  2 : DOCALL(FunctionReference;E_(ParmList;0);E_(ParmList;1);yearIndex);çä  3 : DOCALL(FunctionReference;E_(ParmList;0);E_(ParmList;1);E_(ParmList;2);yearIndex);çä  4 : DOCALL(FunctionReference;E_(ParmList;0);E_(ParmList;1);E_(ParmList;2);E_(ParmList;3);yearIndex);çä  5 : DOCALL(FunctionReference;E_(ParmList;0);E_(ParmList;1);E_(ParmList;2);E_(ParmList;3);E_(ParmList;4);yearIndex);çä   : DOCALL(FunctionReference))çä
F1 7bda550d 65b85be5 53d1478d 3003ed0b 0 0 2
Illus Format(value)
Funktion
'Illus Format To'(value;2)
F1 53d1478d 7bda550d 0 0 0 0 2
Illus Format To(value;decimals)
Funktion
FORMAT('GEN Round'(value;decimals);"1." & decimals)
F1 3003ed0b 65b85be5 0 0 0 0 2
ILLUS Maturity Duration
Funktion
'Coverage Maturity Duration'("";0;'Policy Coverage MaturityAge'("";0))
F1 2c90670 2c90598 0 2c907c0 0 0 2
Illus List Requested(yearIndex)
Funktion
yearIndex = -1 //IF(/*Is yearIndex= -1?*/ yearIndex = -1;çä//â/*Yes - List requested*/ çä//â   1;çä//â/*No*/çä// â   0 çä//)çä
F1 2c907c0 2c90598 0 2cad320 0 0 2
Illus List Insert EndOfRow Delimiter Or End(fromYear; toYear)
Funktion
IF (fromYear + 1 > toYear ; çä   /*Yes*/ 'GEN Vector Blank' ; çä   /*No*/ 'Illus Delimiter'(2)çä)
F1 2cad320 2c90598 0 0 0 0 2
Illus List Zero All Returns Delimited(fromYear; toYear)
Funktion
IF (fromYear > toYear ; çä   /*Yes*/ 'GEN Vector Blank' ; çä   /*No*/ "0" & IF (fromYear = toYear ; çä    'GEN Vector Blank' ; çä    'Illus Delimiter'(2)çä  ) & 'Illus List Zero All Returns Delimited'(fromYear + 1;toYear)çä)
F1 2c90878 2c903a8 2c90aa8 2c90fe0 0 0 2
-- yearIndex = -2 --
Funktion

F1 2c90aa8 2c90878 2c90b88 2c90d60 0 0 2
Illus List Bounds(calcType; yearIndex)
Funktion
IF ( /*Are the boundaries requested?*/ yearIndex EQUAL "-2" ; çä   /*Yes return lower-upper bounds*/ 'Illus List Lower Bound'(calcType) & "-" & 'Illus List Upper Bound'(calcType) ; çä   /*No*/ 'GEN Vector Blank'çä)
F1 2c90b88 2c90aa8 0 2c90c88 0 0 2
Illus List Lower Bound(calcType)
Funktion
1 // Sales Illustrationsä
F1 2c90c88 2c90aa8 0 0 0 0 2
Illus List Upper Bound(calcType)
Funktion
IF ('ProductType is Annuity'('PI PolicyProduct PolicyProductTypeCode'('Policy ProductCode';TransEffDate)) ; çä  'PIDRV AnnuityProduct MaturityDuration'(0) ; çä  'Policy Coverage MaturityAge'(calcType;0) - 'Policy LifeParticipant IssueAge'(calcType;0;0) // Base coverage and Single Participantçäçä)
F1 2c90d60 2c90878 2c90f00 0 0 0 2
Illus List Bounds WSP(calcType; yearIndex)
Funktion
IF ( /*Are the boundaries requested?*/ yearIndex EQUAL "-2" ; çä   /*Yes return lower-upper bounds*/ 'Illus List Lower Bound'(calcType) & "-" & 'Illus List Upper Bound WSP' ; çä   /*No*/ 'GEN Vector Blank'çä)
F1 2c90f00 2c90d60 0 0 0 0 2
Illus List Upper Bound WSP
Funktion
65 // to be changedçä//T_plan_parameters[f_product_code(A_plan_code);"WSP_cease_age"] - 'Policy LifeParticipant IssueAge'(0;0)ä
F1 2c90fe0 2c903a8 2c910d8 0 0 0 2
-- Block Functions for Double Indexed Outputs --
Funktion
//
F1 2c910d8 2c90fe0 2c91250 0 0 0 2
Illus Block Requested(covIndex; yearIndex)
Funktion
IF ( /*Both covIndex and yearIndex = -1?*/ covIndex = -1 AND yearIndex = -1 ; çä   /*Yes*/ 1 ; çä   /*No*/ 0çä)
F1 2c91250 2c910d8 0 2c91440 0 0 2
Illus Block Coverage Bounds(calcType;covIndex; yearIndex)
Funktion
IF ((covIndex EQUAL "-2") && (yearIndex EQUAL "-2") ; çä   /*Yes - return bounds*/ "0-" & 'Policy Number Of Coverage'(calcType;yearIndex) - 1 & ";" & 'Illus List Lower Bound'(calcType) & "-" & 'Illus List Upper Bound'(calcType) ; çä   /*No*/ 'GEN Vector Blank'çä)
F1 2c91440 2c910d8 0 2c91798 0 0 2
Illus Element Number(calcType;index_type)
Funktion
CASE(index_type;çä  "C" : 'Policy Number Of Coverage'(calcType;TransEffDur);çä  "B" : SUMX(cov;0;'Policy Number Of Coverage'(calcType;TransEffDur) - 1;'Policy Number of CovOption'(calcType;#cov));çä   : 1)çä
F1 2c91798 2c910d8 0 2c91a30 0 0 2
//Block_benefit_bounds(ben_index; yearIndex)
Funktion
IF((ben_index EQUAL "-2") and (yearIndex EQUAL "-2");çäâ"0-"&f_element_number(fT_const_BankTerm("benefit_type"))-1&";"&f_List_lower_bound&"-"&f_List_upper_bound_WP; // return boundsçäâ'GEN Vector Blank' // noçä)çä// This function determines if the result should be returned in a delimited List çä// for the range of yearIndex
F1 2c91a30 2c910d8 0 2c91ef8 0 0 2
//Block_benefit_curr_premium(cov_index; cov_index_from; cov_index_to; polyear_from; polyear_to)
Funktion
IF(polyear_from>polyear_to;çäâ'GEN Vector Blank';çäâIF(cov_index>=cov_index_to;çäââf_benefit_curr_premium(cov_index; polyear_from)çäââ&IF(f_Block_benefit_curr_premium(cov_index_from; cov_index_from; cov_index_to; polyear_from+1; polyear_to) EQUAL 'GEN Vector Blank'; çäâââ'GEN Vector Blank';âçäâââf_del(1)çäââ)&f_Block_benefit_curr_premium(cov_index_from; cov_index_from; cov_index_to; polyear_from+1; polyear_to);çäââf_benefit_curr_premium(cov_index; polyear_from)çäââ&f_del(2)&f_Block_benefit_curr_premium(cov_index+1; cov_index_from; cov_index_to; polyear_from; polyear_to)çäâ)çä)çä// Standard function that calls a generic function f_ref to build a delimited string for all valuesçä// the generic function is passed to this function as a parameter which is a reference to a function 'f_ref'çä// this function is called like 'f_Block(funcref(f_.....);0;0;2;1;94)'     çä// funcref() and docall() are an internal VPMS functions to build a reference to a function f_....
F1 2c91ef8 2c910d8 0 0 0 0 2
//Illus Block Cov Curr Dividend(covIndex; fromCovIndex; toCovIndex; fromYear; toYear)
Funktion
IF(fromYear>toYear;çäâ'GEN Vector Blank';çäâIF(covIndex>=toCovIndex;çäââ'ILLUS Cov Curr Dividend'(covIndex; fromYear)çäââ&IF('Illus Block Cov Curr Dividend'(fromCovIndex; fromCovIndex; toCovIndex; fromYear + 1; toYear) EQUAL 'GEN Vector Blank'; çäâââ'GEN Vector Blank';âçäâââ'Illus Delimiter'(1)çäââ)&'Illus Block Cov Curr Dividend'(fromCovIndex; fromCovIndex; toCovIndex; fromYear + 1; toYear);çäââ'ILLUS Cov Curr Dividend'(covIndex; fromYear)çäââ&'Illus Delimiter'(2)&'Illus Block Cov Curr Dividend'(fromCovIndex+1; fromCovIndex; toCovIndex; fromYear; toYear)çäâ)çä)çä// Standard function that calls a generic function f_ref to build a delimited string for all valuesçä// the generic function is passed to this function as a parameter which is a reference to a function 'f_ref'çä// this function is called like 'f_Block(funcref(f_.....);0;0;2;1;94)'     çä// funcref() and docall() are an internal VPMS functions to build a reference to a function f_....
A0 2c8bca8 0 0 0 0 0 0

T0 2c8bd14 0 0 0 0 0 0

I0 2c8bd80 0 0 0 0 0 0

-
O0
E0
L0
B0
P1
2c8f208
F1
6641adeb
A0
T0
!25
2c8f9d0 -2 -2
Description: Returns a column delimiter(i=1) or an end of row delimiter(i<>1) used when stringing values from lower to upper boundçä                    If Column, return *çä                    If End Of Row, return #çäModification Log:çä01/27/2008          CSC                   Illustrations 
2c8fbb0 -2 -2
Description: Column delimiter(i=1) constantçä çäModification Log:çä01/27/2008          CSC                   Illustrations 
2c8fda0 -2 -2
Description: End of row delimiter(i=2) constantçä çäModification Log:çä01/27/2008          CSC                   Illustrations 
2c8ff80 -2 -2
Description: Returns a column delimited string based on string inputçä çäModification Log:çä01/27/2008          CSC                   Illustrations 
2c90168 -2 -2
Description: Returns an end of row delimiterçä çäModification Log:çä02/11/2008          CSC                   Illustrations ILLUS001
2c90288 -2 -2
Description: Returns an end of row delimiterçä çäModification Log:çä01/27/2008          CSC                   Illustrations ILLUS001
3d0a5bdb -2 -2
Description: Generic Function to turn a normal input by year into a list output for Service Layer or delimited formatçäModification Log:çä09/29/2011 - RWE - Added Generic List function for Service Layer functionality
65b85be5 -2 -2
Description:çä çäModification Log:çä06/05/2009 - Defect #2001 - BT - Using a error code funtion in place of the generic error code so that the correct error message is returnedçä06/04/2009 - Defect #2001 - BT - stop calculations right away if there is a hard error and refer to "OUTPUT Illustration Messages" for an explanation of why the test case is invalidçä03/13/2009 - Messages Phase2 - rwe - Updated Messagesçä10/29/2008 - Phase 3 - RB - Bypass calc for rate assump with income if it does not applyçä09/09/2008 - Phase 3 - RPU - BMS - Add Rate Assumption function
c35e223 -2 -2
Description: Generic Function to call a function based ona  reference and a list of parametersçäModification Log:çä09/29/2011 - RWE - Added Generic call function for Service Layer functionality
53d1478d -2 -2
10/18/2012 - PAD-912 - rm - Replaced standard function ROUND with 'GEN Round'çä5/6/2011 - JAD - Included rounding
3003ed0b -2 -2
Description: Generic Function for Maturity DurationçäModification Log:çä09/29/2011 - RWE - Added Maturity Duration for List
2c90670 -2 -2
Description: Determines if the result should be returned in a delimited list, if yearIndex = -1çä çäModification Log:çä03/31/2008          CSC                   Illustrations çä
2c907c0 -2 -2
Description: Returns the end of row delimiter unless it reaches the last year.çä çäModification Log:çä02/14/2008          CSC                   Illustrations ILLUS001çä
2cad320 -2 -2
Description: Returns a delimited string of zeroes for all policy years.çä çäModification Log:çä02/14/2008          CSC                   Illustrations ILLUS001çä
2c90aa8 -2 -2
Description: Returns the lower bounds and upper bounds if yearIndex = -2, otherwise ""çä çäModification Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/31/2008          CSC                   Illustrations 
2c90b88 -2 -2
Description: Start year for policy yearçä                    =1 for New Business Sales Illustrationsçä çäModification Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/31/2008          CSC                   Illustrations 
2c90c88 -2 -2
Description: End year for policy yearçä çäModification Log:çä10/18/2012 - PAD-902 - rm - Replaced usage of 'Policy ProductType' with 'PI PolicyProduct PolicyProductTypeCode'çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/31/2008          CSC                   Illustrations 
2c90d60 -2 -2
Description: Returns the lower bounds and upper bounds of WSP if yearIndex = -2, otherwise ""çä                    Assumed starts at issueçä çäModification Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/31/2008          CSC                   Illustrations 
2c90f00 -2 -2
Description: End year for policy yearçä çäModification Log:çä03/31/2008          CSC                   Illustrations 
2c910d8 -2 -2
Description: Determines if the result should be returned as a delimited çä                    table string for the range of cov_index and yearIndexçä çäModification Log:çä03/31/2008          CSC                   Illustrations 
2c91250 -2 -2
Description: Determines if the result should be returned in a çä                   delimited list for the range of yearIndexçä çäModification Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/31/2008          CSC                   Illustrations 
2c91440 -2 -2
Description: Returns number of indexes for requestçä                    Request types:çä                       C=coverages including ridersçä                       B=benefits/cov optionsçä çäModification Log:çä7/2/2010 - PAC013 calcType - BT - Initially adding calcType parmçä03/31/2008          CSC                   Illustrations 
2c91798 -2 -2
Description:çä çäModification Log:çä03/31/2008          CSC                   Illustrations 
2c91a30 -2 -2
Description:çä çäModification Log:çä03/31/2008          CSC                   Illustrations 
2c91ef8 -2 -2
Description: Standard function that calls a generic function to build a delimited string for all valuesçäthe generic function is passed to this function as a parameter which is a reference to a function 'f_ref'çäthis function is called like 'f_Block(funcref(f_.....);0;0;2;1;94)'     çäfuncref() and docall() are an internal VPMS functions to build a reference to a function f_....çä çäModification Log:çä03/31/2008          CSC                   Illustrations 
;Offset=00000000
